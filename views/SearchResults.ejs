<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="ishtri1.png" sizes="16x16 32x32" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search results</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/toast.js" defer></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/backToTop.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>
    
    <style>
h1 {
text-align: center;
margin-bottom: 20px;
}

.productsContainer {
margin-top: -27px;
padding: 20px;
flex: 1;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsive grid */
}

.product {
font-family: Arial, Helvetica, sans-serifx;
border: 1px solid #ddd;
border-radius: 8px;
padding: 15px;
margin: 10px 0;
background-color: white;
cursor: pointer;
display: flex;
align-items: center;
gap: 15px;
}

.product:hover {
box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.product img {
max-width: 300px;
height: auto;
border-radius: 5px;
}

.product h3 {
margin: 0;
}

.no-products {
text-align: center;
font-size: 18px;
margin-top: 20px;
}

.filter-container {
display: flex;
align-items: center;
gap: 10px;
margin-top: 10px;
font-family: 'Arial', sans-serif;
}

.filter-container label {
font-size: 13px;
color: #333;
font-weight: bold;
}

#priceFilter, #dateFilter, #subCategoryFilter {
padding: 7px;
font-size: 13px;
border-radius: 4px;
background-color: #f9f9f9;
transition: background-color 0.3s ease, border-color 0.3s ease;
cursor: pointer;
box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.page-container {
display: flex;
gap: 20px;
padding: 20px;
}

.side-panel {
font-family: Arial, Helvetica, sans-serif;
width: 250px;
background-color: #f9f9f9;
border: 1px solid #ddd;
border-radius: 8px;
padding: 15px;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
flex-shrink: 0;
}

.side-panel h3 {
margin-bottom: 15px;
font-size: 18px;
color: #333;
text-align: center;
}

.country-list, .car-brand-list {
list-style: none;
padding: 0;
margin: 0;
}


.country-list li, .car-brand-list li {
display: flex;
flex-direction: column;
align-items: flex-start;
margin-bottom: 10px;
}

.country-list li > div {
display: flex;
flex-direction: row; /* Align checkbox and label horizontally */
align-items: center; /* Vertically center the checkbox and label */
gap: 10px; /* Add spacing between checkbox and label */
}

.car-brand-list li > div {
display: flex;
flex-direction: row; /* Align checkbox and label horizontally */
align-items: center; /* Vertically center the checkbox and label */
gap: 10px; /* Add spacing between checkbox and label */
}


.country-list input[type="checkbox"], .car-brand-list input[type="checkbox"] {
margin-right: 10px;
cursor: pointer;
}

.country-list label, .car-brand-list label {
font-size: 16px;
color: #555;
cursor: pointer;
}

.country-list label:hover, .car-brand-list label:hover {
color: #007bff;
}

.sold-label {
color: #ffffff;
background-color: #ff5722;
padding: 3px 6px;
border-radius: 4px;
font-size: 14px;
font-weight: bold;
margin-left: 5px;
display: inline-block;
}


/* City List Styling (Nested) */
.city-list {
list-style: none;
padding-left: 20; /* Reduced padding to align cities properly */
margin: 5px 0 0 0; /* Adjusted margin to remove any left offset */
display: none; /* Hidden by default */
}

.city-list li {
display: flex;
flex-direction: row;
align-items: center; /* Align checkbox and label vertically */
margin-bottom: 5px; /* Add spacing between cities */
}

.city-list input[type="checkbox"] {
margin-right: 10px;
cursor: pointer;
}

.city-list label {
font-size: 14px;
color: #777;
cursor: pointer;
}

.city-list label:hover {
color: #007bff;
}

.load-more-btn {
display: block;
margin: 30px auto;
padding: 12px 24px;
background: #007bff;
color: white;
border: none;
border-radius: 25px;
cursor: pointer;
transition: all 0.3s ease;
font-size: 16px;
}

.load-more-btn:hover {
background: #0056b3;
transform: translateY(-2px);
box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

.load-more-btn:disabled {
background: #cccccc;
cursor: not-allowed;
transform: none;
box-shadow: none;
}

.loading-overlay {
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(255, 255, 255, 0.8);
display: none;
justify-content: center;
align-items: center;
z-index: 1000;
}

.reset-filters-btn {
position: fixed;
bottom: 30px;
right: 30px;
padding: 12px 24px;
background: #dc3545;
color: white;
border: none;
border-radius: 25px;
cursor: pointer;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
transition: all 0.3s ease;
z-index: 1000;
display: flex;
align-items: center;
gap: 8px;
}

.reset-filters-btn:hover {
background: #bb2d3b;
transform: translateY(-2px);
box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
}

.reset-filters-btn:active {
transform: translateY(0);
}

/* Skeleton Loading Styles */
.skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

.skeleton-image {
    width: 300px;
    height: 200px;
    border-radius: 5px;
}

.skeleton-text {
    height: 20px;
    margin: 10px 0;
    border-radius: 4px;
}

.skeleton-title {
    width: 70%;
}

.skeleton-price {
    width: 40%;
}

.skeleton-location {
    width: 60%;
}

/* Toast Notification Styles */
.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.toast {
    background: white;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    margin-bottom: 10px;
    padding: 15px;
    display: flex;
    align-items: center;
    gap: 10px;
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

/* Back to Top Button Styles */
.back-to-top {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background: #007bff;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    z-index: 1000;
}

.back-to-top.visible {
    opacity: 1;
    visibility: visible;
}

.back-to-top:hover {
    background: #0056b3;
    transform: translateY(-3px);
}

@media (max-width: 768px) {
    /* Mobile Layout Adjustments */
    .page-container {
        flex-direction: column;
        padding: 10px;
        gap: 15px;
    }

    .side-panel {
        width: 100%;
        box-sizing: border-box;
        margin-bottom: 15px;
        order: -1;
    }

    .productsContainer {
        grid-template-columns: 1fr;
        padding: 10px;
        margin-top: 0;
    }

    .product {
        flex-direction: column;
        padding: 10px;
        margin: 8px 0;
        gap: 10px;
    }

    .product img {
        max-width: 100%;
        height: 200px;
    }

    /* Filter Container Adjustments */
    .filter-container {
        flex-wrap: wrap;
        gap: 8px;
        margin: 10px 0;
        padding: 0 10px;
    }

    #priceFilter,
    #dateFilter,
    #subCategoryFilter {
        width: 100%;
        font-size: 12px;
        padding: 6px;
    }

    /* Mobile-Specific Element Hiding */
    .custom-title,
    .sold-label {
        display: none;
    }

    /* Button Adjustments */
    .reset-filters-btn {
        bottom: 70px;
        right: 10px;
        padding: 8px 16px;
        font-size: 12px;
        border-radius: 15px;
        width: auto;
    }

    .load-more-btn {
        width: 100%;
        max-width: none;
        border-radius: 8px;
        margin: 15px 0;
        padding: 10px;
    }

    /* Text Size Adjustments */
    .product h3 {
        font-size: 1rem;
        line-height: 1.3;
    }

    .product p {
        font-size: 0.85rem;
        margin: 5px 0;
    }

    /* Filter Labels */
    .filter-container label {
        width: 100%;
        font-size: 12px;
    }

    /* Checkbox Spacing */
    .country-list li,
    .car-brand-list li {
        margin-bottom: 5px;
    }

    .country-list label,
    .car-brand-list label {
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    /* Ultra-Mobile Adjustments */
    .product img {
        height: 150px;
    }

    .side-panel h3 {
        font-size: 16px;
    }

    .reset-filters-btn {
        bottom: 60px;
        right: 8px;
        padding: 6px 12px;
    }

    .back-to-top {
        bottom: 20px;
        right: 20px;
        width: 40px;
        height: 40px;
    }
}
        
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

   <div class="filter-container" style="margin-bottom: 20px;">
        <label for="priceFilter" data-i18n="filter.sorter_etter">Sort By:</label>
        <select id="priceFilter" onchange="applyFilters()">
            <option value="asc" data-i18n="filter.lavest_pris">Heighest Price</option>
            <option value="desc" data-i18n="filter.hÃ¸yest_pris">Lowest Price</option>
            <option value="" data-i18n="filter.alle">All</option>
        </select>
        <label for="dateFilter" data-i18n="filter.utgitt">Date:</label>
        <select id="dateFilter" onchange="applyFilters()">
            <option value="" data-i18n="filter.alle">All</option>
            <option value="desc" data-i18n="filter.nylige">New</option>
            <option value="asc" data-i18n="filter.eldre">Old</option>
        </select>
        <div id="subcategoryFilterContainer" style="display: none;">
            <label for="subCategoryFilter" data-i18n="form.category">Category:</label>
            <select id="subCategoryFilter" onchange="applyFilters()">
                <option value="" data-i18n="filter.alle">All</option>
                <option value="KlÃ¦r" data-i18n="subkategori.klÃ¦r">Clothes</option>
                <option value="Elektronikk" data-i18n="subkategori.elektronikk">Electronics</option>
                <option value="Hvitvarer" data-i18n="subkategori.hvitvarer">White Goods</option>
                <option value="MÃ¸bler" data-i18n="subkategori.mÃ¸bler">Furniture</option>
                <option value="Annet" data-i18n="subkategori.annet">Other</option>
            </select>
            <button onclick="resetFilters()" class="reset-filters-btn">
    â³ Reset Filters
</button>
        </div> 
    </div>  

    <div class="page-container">
        <div class="side-panel">
            <h3 data-i18n="filter.filter_land">Filter by Country</h3>
            <ul class="country-list">
                <ul class="country-list">
            </ul>
        </ul>
        </div>


        <div class="productsContainer" id="productsContainer">
            <!-- Skeleton loading will be shown here -->
        </div>
    </div>
    <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

    <div class="toast-container" id="toastContainer"></div>
    <div class="back-to-top" id="backToTop">
        <i class="fas fa-arrow-up"></i>
    </div>

   <script>

    (function () {
        let filterTimeout;
        const DEBOUNCE_DELAY = 300; // ms


        // Pagination variables
        let currentPage = 1;
        let isLoading = false;
        let hasMore = true;
        const limit = 20;

        // Current filter state
        let currentFilters = {
            priceOrder: '',
            selectedCountries: [],
            dateOrder: '',
            subCategory: '',
            selectedCarBrands: [],
            selectedCities: []
        };

        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function showSkeletonLoading() {
            const container = document.getElementById('productsContainer');
            container.innerHTML = '';
            for (let i = 0; i < 8; i++) {
                const skeleton = document.createElement('div');
                skeleton.className = 'product skeleton';
                skeleton.innerHTML = `
                    <div class="skeleton-image skeleton"></div>
                    <div>
                        <div class="skeleton-text skeleton-title skeleton"></div>
                        <div class="skeleton-text skeleton-price skeleton"></div>
                        <div class="skeleton-text skeleton-location skeleton"></div>
                    </div>
                `;
                container.appendChild(skeleton);
            }
        }

        function fetchProducts(loadMore = false, cacheBuster = null) {
            if (isLoading || (!loadMore && !hasMore)) return;
            
            showLoading();
            isLoading = true;

            if (!loadMore) {
                showSkeletonLoading();
            }

            const offset = (currentPage - 1) * limit;
            const urlParams = new URLSearchParams(window.location.search);
            const searchQuery = urlParams.get("query");

            // Build API URL with current filters
            let apiUrl = `/api/search?query=${searchQuery}&limit=${limit}&offset=${offset}`;
                    // Add cache busting
            if (cacheBuster) {
                apiUrl += `&_=${cacheBuster}`;
            }
            if (currentFilters.subCategory) apiUrl += `&subCategory=${currentFilters.subCategory}`;
            if (currentFilters.priceOrder) apiUrl += `&sortPrice=${currentFilters.priceOrder}`;
            if (currentFilters.dateOrder) apiUrl += `&sortDate=${currentFilters.dateOrder}`;
            if (currentFilters.selectedCountries.length) apiUrl += `&countries=${currentFilters.selectedCountries.join(',')}`;
            if (currentFilters.selectedCarBrands.length) apiUrl += `&carBrand=${currentFilters.selectedCarBrands.join(',')}`;
            if (currentFilters.selectedCities.length) apiUrl += `&cities=${currentFilters.selectedCities.join(',')}`;

            // Show loading state
            const container = document.getElementById('productsContainer');
            const loadButton = document.getElementById('loadMoreButton');
            if (!loadMore) container.innerHTML = '<p>Loading products...</p>';
            if (loadButton) {
                loadButton.disabled = true;
                loadButton.textContent = 'Loading...';
            }

            fetch(apiUrl)
                .then(response => response.json())
                    .then(products => { // ð Directly receive the array
                        console.log("[DEBUG] API Products:", products);
                        hasMore = (currentPage * limit) < products.length; // ð Approximate total
                        displayProducts(products, loadMore);
                        currentPage++;
                        isLoading = false;
                        hideLoading();

                    // Initialize lazy loading for new images
                    if (window.lazyLoader) {
                        window.lazyLoader.observe();
                    }

                    // Update load more button
                    if (loadButton) {
                        loadButton.disabled = false;
                        loadButton.textContent = 'Load More';
                        if (!hasMore) loadButton.remove();
                    } else if (hasMore) {
                        addLoadMoreButton();
                    }
                     hideLoading();
                })
                .catch(error => {
                    console.error("[DEBUG] Error fetching products:", error); 
                    console.error("Error fetching products:", error);
                    isLoading = false;
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `
                        <div class="error-message">
                            <p>Error loading products. Please try again.</p>
                            <button onclick="fetchProducts()">Retry</button>
                        </div>
                    `;
                    window.toast.show('Error loading products. Please try again.', 'error');
                    hideLoading();
                    if (loadButton) {
                        loadButton.disabled = false;
                        loadButton.textContent = 'Load More';
                    }
                });
        }

        function resetFilters() {
            
            // 1. Reset UI elements
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            document.getElementById('priceFilter').value = 'asc';
            document.getElementById('dateFilter').value = '';
            document.getElementById('subCategoryFilter').value = '';
            
            // 2. Clear city lists
            document.querySelectorAll('.city-list').forEach(list => {
                list.innerHTML = '';
                list.style.display = 'none';
            });

            // 3. Reset internal state
            currentFilters = {
                priceOrder: 'asc',
                dateOrder: '',
                subCategory: '',
                selectedCountries: [],
                selectedCarBrands: [],
                selectedCities: []
            };

            // 4. Reset pagination
            currentPage = 1;
            hasMore = true;
            isLoading = false; 

            // 5. Clear container and force fresh load
            const container = document.getElementById('productsContainer');
            container.innerHTML = '<p>Loading products...</p>';
            
            // 6. Fetch with cache busting
            fetchProducts(false, Date.now());
        };

        window.resetFilters = resetFilters;
        window.fetchProducts = fetchProducts;
function displayProducts(products, append = false) {
    const container = document.getElementById('productsContainer');
    if (!container) return;

    if (!append) {
        container.innerHTML = '';
        currentPage = 1;
    }

    if (!products || !Array.isArray(products)) {
        container.innerHTML = '<p class="no-products">No products found.</p>';
        return;
    }

    if (products.length === 0 && !append) {
        container.innerHTML = '<p class="no-products">No products found for this search.</p>';
        return;
    }

    products.forEach(product => {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';

        // 1. Fix image handling
    const images = product.Images ? product.Images.split(',') : [];
    const firstImage = images.length > 0 
        ? `/uploads/${images[0].trim()}` 
        : '/uploads/default-placeholder.png'; // ð Defined here

    // 2. Use firstImage in template
    productDiv.innerHTML = `
        <img data-src="${firstImage}" alt="${product.ProductName}" class="product-image">
        <i class="fas fa-heart favorite-icon" data-product-id="${product.ProductdID}"></i>
        <div>
            <h3>
                ${product.ProductName} 
                ${product.Sold === 1 ? `<span class="sold-label">(Sold)</span>` : ''}
            </h3>
            <p><strong>Price:</strong> ${product.Price} $</p>
            <p><strong>Location:</strong>${product.Location}</p>
        </div>
    `;

        productDiv.addEventListener('click', () => {
            window.location.href = `/productDetails?productdID=${product.ProductdID}`;
        });

        container.appendChild(productDiv);
    });

    initializeFavorites();      

            document.querySelectorAll('.favorite-icon').forEach(icon => {
            icon.addEventListener('click', async (e) => {
                e.stopPropagation();
                const productdID = icon.getAttribute('data-product-id');
                const isFavorited = icon.classList.contains('favorited');

                try {
                    const userResponse = await fetch('/api/auth/current-user');
                    const userData = await userResponse.json();
                    
                    if (!userData.brukernavn) {
                        window.toast.show('Please log in to add favorites', 'info');
                        return;
                    }

                    const endpoint = isFavorited ? '/api/unfavorite' : '/api/favorite';
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productdID }),
                    });

                    if (response.ok) {
                        icon.classList.toggle('favorited');
                        icon.style.color = isFavorited ? '#ccc' : '#ff4757';
                        window.toast.show(
                            isFavorited ? 'Product removed from favorites' : 'Product added to favorites',
                            'success'
                        );
                    } else {
                        window.toast.show('Failed to update favorites', 'error');
                    }
                } catch (error) {
                    console.error("Error handling favorite:", error);
                    window.toast.show('An error occurred', 'error');
                }
            });
        });
    }

        function addLoadMoreButton() {
            const existingButton = document.getElementById('loadMoreButton');
            if (existingButton) return;

            const button = document.createElement('button');
            button.id = 'loadMoreButton';
            button.className = 'load-more-btn';
            button.textContent = 'Load More';
            button.addEventListener('click', () => fetchProducts(true));
            
            const container = document.getElementById('productsContainer');
            container.appendChild(button);
        }

        function applyFilters() {
            clearTimeout(filterTimeout);
            filterTimeout = setTimeout(() => {
                // Update current filters
                currentFilters = {
                    priceOrder: document.getElementById('priceFilter').value,
                    dateOrder: document.getElementById('dateFilter').value,
                    subCategory: document.getElementById('subCategoryFilter')?.value || '',
                    selectedCountries: Array.from(document.querySelectorAll('.country-list input[type="checkbox"]:checked'))
                        .map(checkbox => checkbox.value),
                    selectedCarBrands: Array.from(document.querySelectorAll('.car-brand-list input[type="checkbox"]:checked'))
                        .map(checkbox => checkbox.value),
                    selectedCities: Array.from(document.querySelectorAll('.city-list input[type="checkbox"]:checked'))
                        .map(checkbox => checkbox.value)
                };

                // Reset pagination
                currentPage = 1;
                hasMore = true;
            // Clear existing products
                document.getElementById('productsContainer').innerHTML = '<p>Loading products...</p>';
                
                fetchProducts();
            }, DEBOUNCE_DELAY);
        }

    document.getElementById('dateFilter').addEventListener('change', () => {
    document.getElementById('priceFilter').value = '';
    applyFilters();
});
    document.getElementById('priceFilter').addEventListener('change', () => {
    document.getElementById('dateFilter').value = '';
    applyFilters();
});

function handleCategoryVisibility() {
    const urlParams = new URLSearchParams(window.location.search);
    const category = urlParams.get('category') || 'default';
    const subcategoryContainer = document.getElementById('subcategoryFilterContainer');
    const carBrandSection = document.getElementById('kjÃ¸rr');
    const carBrandLabel = document.getElementById('filterCar');

    // Toggle subcategory filter
    if (subcategoryContainer) {
        subcategoryContainer.style.display = category === 'Torget' ? 'block' : 'none';
    }

    // Toggle car brand filter
    if (carBrandSection && carBrandLabel) {
        const shouldShow = category === 'Bil';
        carBrandSection.style.display = shouldShow ? 'block' : 'none';
        carBrandLabel.style.display = shouldShow ? 'block' : 'none';
    }
}

        function initializeFilters() {
            // Price and Date filters
            document.getElementById('priceFilter').addEventListener('change', applyFilters);
            document.getElementById('dateFilter').addEventListener('change', applyFilters);
            
            // Subcategory filter
            const subCategoryFilter = document.getElementById('subCategoryFilter');
            if (subCategoryFilter) {
                subCategoryFilter.addEventListener('change', applyFilters);
            }

             // Fetch countries and cities from the API
    fetch('/api/utils/countries')
        .then(response => response.json())
        .then(countries => {
            const countryList = document.querySelector('.country-list');
            
            countries.forEach(countryData => {
                // Create country checkbox
                const countryItem = document.createElement('li');
                countryItem.innerHTML = `
                    <div>
                        <input type="checkbox" id="${countryData.country}" value="${countryData.country}">
                        <label for="${countryData.country}">${countryData.country}</label>
                    </div>
                    <ul class="city-list" id="${countryData.country}-cities" style="display: none;"></ul>
                `;
                
                // Populate cities for this country
                const cityList = countryItem.querySelector('.city-list');
                countryData.cities.forEach((cityName, index) => {
                    const cityId = countryData.city_ids[index];
                    cityList.innerHTML += `
                        <li>
                            <input type="checkbox" id="city_${cityId}" value="${cityId}">
                            <label for="city_${cityId}">${cityName}</label>
                        </li>
                    `;
                });

                // Add event listener to country checkbox
                const countryCheckbox = countryItem.querySelector('input[type="checkbox"]');
                countryCheckbox.addEventListener('change', function() {
                    const cityList = this.closest('li').querySelector('.city-list');
                    cityList.style.display = this.checked ? 'block' : 'none';
                    applyFilters();
                });

                countryList.appendChild(countryItem);
            });

            // Add event listeners to city checkboxes after they are created
            document.querySelectorAll('.city-list input').forEach(cityCheckbox => {
                cityCheckbox.addEventListener('change', applyFilters);
            });
        })
        .catch(error => {
            console.error("Error loading countries and cities:", error);
        });
}

        function initializeFavorites() {
            fetch('/api/favorites')
                .then(response => response.json())
                .then(favorites => {
                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                        const productdID = icon.getAttribute('data-product-id');
                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));
                        icon.classList.toggle('favorited', isFavorited);
                        icon.style.color = isFavorited ? '#ff4757' : '#ccc';
                    });
                })
                .catch(error => console.error("Error checking favorites:", error));
        }

        // Initialize back to top button
        const backToTopButton = document.getElementById('backToTop');
        window.addEventListener('scroll', () => {
            if (window.scrollY > 300) {
                backToTopButton.classList.add('visible');
            } else {
                backToTopButton.classList.remove('visible');
            }
        });

        backToTopButton.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        window.onload = function () {
            fetchProducts();
            checkUnreadMessages();
            initializeFilters();
            initializeFavorites();
            applyFilters();
            handleCategoryVisibility();
            checkUnreadMessages();
            
            // Initialize lazy loading
            if (window.lazyLoader) {
                window.lazyLoader.observe();
            }
        };
    })();
</script>
</body>
</html>