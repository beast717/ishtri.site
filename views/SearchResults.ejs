<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://unpkg.com/i18next-http-backend/i18nextHttpBackend.min.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Results</title>
    <style>
        .productsContainer {
            margin-top: -27px;
            padding: 20px;
            flex: 1;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsive grid */
        }

        .product {
            font-family: Arial, Helvetica, sans-serif;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            background-color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .product:hover {
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .product img {
            max-width: 300px;
            height: auto;
            border-radius: 5px;
        }

        .product h3 {
            margin: 0;
        }

        .no-products {
            text-align: center;
            font-size: 18px;
            margin-top: 20px;
        }

        .page-container {
            display: flex;
            gap: 20px;
            padding: 20px;
        }

        .side-panel {
            font-family: Arial, Helvetica, sans-serif;
            width: 250px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            flex-shrink: 0;
        }

        .side-panel h3 {
            margin-bottom: 15px;
            font-size: 18px;
            color: #333;
            text-align: center;
        }

        .country-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .country-list li {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .country-list input[type="checkbox"] {
            margin-right: 10px;
            cursor: pointer;
        }

        .country-list label {
            font-size: 16px;
            color: #555;
            cursor: pointer;
        }

        .country-list label:hover {
            color: #007bff;
        }

        .filter-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
            font-family: 'Arial', sans-serif;
        }

        .filter-container label {
            font-size: 13px;
            color: #333;
            font-weight: bold;
        }

        #priceFilter, #dateFilter {
            padding: 7px;
            font-size: 13px;
            border-radius: 4px;
            background-color: #f9f9f9;
            transition: background-color 0.3s ease, border-color 0.3s ease;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .sold-label {
            color: #ffffff;
            background-color: #ff5722;
            padding: 3px 6px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: bold;
            margin-left: 5px;
            display: inline-block;
        }

        
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <!-- Price Filter Dropdown -->
    <div class="filter-container" style="margin-bottom: 20px;">
        <label for="priceFilter" data-i18n="filter.sorter_etter">Sorter etter:</label>
        <select id="priceFilter" onchange="applyPriceFilter()">
            <option value="asc" data-i18n="filter.lavest_pris">Lavest Pris</option>
            <option value="desc" data-i18n="filter.høyest_pris">Høyest Pris</option>
        </select>
        <label for="dateFilter" data-i18n="filter.utgitt">Utgitt:</label>
        <select id="dateFilter" onchange="applyDateFilter()">
            <option value="desc" data-i18n="filter.alle">alle</option>
            <option value="desc" data-i18n="filter.nylige">Nylige</option>
            <option value="asc" data-i18n="filter.eldre">Eldre</option>
        </select>
    </div>

    <div class="page-container">
        <div class="side-panel">
            <h3 data-i18n="filter.filter_land">Filter by Country</h3>
            <ul class="country-list">
                <li><input type="checkbox" id="uae" value="UAE"> <label for="uae">United Arab Emirates</label></li>
                <li><input type="checkbox" id="saudi" value="Saudi Arabia"> <label for="saudi">Saudi Arabia</label></li>
                <li><input type="checkbox" id="egypt" value="Egypt"> <label for="egypt">Egypt</label></li>
                <li><input type="checkbox" id="jordan" value="Jordan"> <label for="jordan">Jordan</label></li>
                <li><input type="checkbox" id="qatar" value="Qatar"> <label for="qatar">Qatar</label></li>
                <li><input type="checkbox" id="oman" value="Oman"> <label for="oman">Oman</label></li>
                <li><input type="checkbox" id="kuwait" value="Kuwait"> <label for="kuwait">Kuwait</label></li>
                <li><input type="checkbox" id="bahrain" value="Bahrain"> <label for="bahrain">Bahrain</label></li>
                <li><input type="checkbox" id="iraq" value="Iraq"> <label for="iraq">Iraq</label></li>
                <li><input type="checkbox" id="syria" value="Syria"> <label for="syria">Syria</label></li>
                <li><input type="checkbox" id="lebanon" value="Lebanon"> <label for="lebanon">Lebanon</label></li>
                <li><input type="checkbox" id="yemen" value="Yemen"> <label for="yemen">Yemen</label></li>
                <li><input type="checkbox" id="libya" value="Libya"> <label for="libya">Libya</label></li>
                <li><input type="checkbox" id="sudan" value="Sudan"> <label for="sudan">Sudan</label></li>
                <li><input type="checkbox" id="morocco" value="Morocco"> <label for="morocco">Morocco</label></li>
                <li><input type="checkbox" id="tunisia" value="Tunisia"> <label for="tunisia">Tunisia</label></li>
                <li><input type="checkbox" id="algeria" value="Algeria"> <label for="algeria">Algeria</label></li>
                <li><input type="checkbox" id="Palestine" value="Palestine"> <label for="Palestine">palestine</label></li>
                <li><input type="checkbox" id="Mauritania" value="Mauritania"> <label for="Mauritania">Mauritania</label></li>
            </ul>
        </div>

        <div class="productsContainer" id="productsContainer">
            <p>Loading products...</p>
        </div>
    </div>

    <script>
        // Fetch products initially with default sorting
        const priceOrder = document.getElementById('priceFilter').value;  // Default price sorting
        const dateOrder = document.getElementById('dateFilter').value;   // Default date sorting
        const selectedCountries = Array.from(document.querySelectorAll('.country-list input[type="checkbox"]:checked'))
            .map(checkbox => checkbox.value);

        fetchProducts(priceOrder, selectedCountries, dateOrder);

        // Apply the price filter based on user selection
        function applyPriceFilter() {
            const priceOrder = document.getElementById('priceFilter').value; // 'asc' or 'desc'
            const dateOrder = document.getElementById('dateFilter').value;   // Retrieve date order
            const selectedCountries = Array.from(document.querySelectorAll('.country-list input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            fetchProducts(priceOrder, selectedCountries, dateOrder);
        }

        // Apply the date filter based on user selection
        function applyDateFilter() {
            const dateOrder = document.getElementById('dateFilter').value || '';  // 'asc' or 'desc'
            const priceOrder = document.getElementById('priceFilter').value; // Retrieve price order
            const selectedCountries = Array.from(document.querySelectorAll('.country-list input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            fetchProducts(priceOrder, selectedCountries, dateOrder);
        }

        // Fetch products with optional category and price sorting
        function fetchProducts(priceOrder = 'asc', selectedCountries = [], dateOrder = 'desc') {
            const queryParams = new URLSearchParams(window.location.search);
            const searchQuery = queryParams.get("query");

            let apiUrl = `/api/search?query=${searchQuery}`;

            if (priceOrder) apiUrl += `&sortPrice=${priceOrder}`;
            if (dateOrder !== '') apiUrl += `&sortDate=${dateOrder}`;
            if (selectedCountries.length) apiUrl += `&countries=${selectedCountries.join(',')}`;

            // Fetch products from the server
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    return response.json();
                })
                .then(products => {
                    console.log("Fetched products:", products); // Debug log the fetched data
                    displayProducts(products);
                })
                .catch(error => {
                    console.error("Error fetching products:", error);
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `<p class="no-products">Error loading products: ${error.message}</p>`;
                });
        }

        // Display products in the DOM
        function displayProducts(products) {
            const container = document.getElementById('productsContainer');
            container.innerHTML = ''; // Clear the existing content

            if (products.length === 0) {
                container.innerHTML = '<p class="no-products">No products found for this category.</p>';
                return;
            }

            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';

                productDiv.innerHTML = `
                    <img src="/uploads/${product.Images.split(',')[0]}" alt="${product.ProductName}">
                    <i class="fas fa-heart favorite-icon" data-product-id="${product.ProductdID}"></i>
                    <div>
                        <h3>
                            ${product.ProductName} 
                            ${product.Sold ? `<span class="sold-label">(Sold)</span>` : ''}
                        </h3>
                        <p><strong>Pris:</strong> ${product.Price} NOK</p>
                        <p><strong>Sted:</strong> ${product.Location}</p>
                    </div>
                `;

                // Add click event to redirect to product details page (excluding the heart icon)
                productDiv.addEventListener('click', (e) => {
                    // Check if the click target is the heart icon
                    if (!e.target.classList.contains('favorite-icon')) {
                        const favoriteIcon = productDiv.querySelector('.favorite-icon');
                        const isFavorited = favoriteIcon.classList.contains('favorited'); // Check if the product is favorited
                        window.location.href = `/productDetails?productdID=${product.ProductdID}&favorited=${isFavorited}`;
                    }
                });

                container.appendChild(productDiv);
            });

            // Initialize favorite icons after products are displayed
            initializeFavorites();
        }

        // Initialize favorite icons
        function initializeFavorites() {
            fetch('/api/favorites')
                .then(response => response.json())
                .then(favorites => {
                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                        const productdID = icon.getAttribute('data-product-id');
                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));

                        if (isFavorited) {
                            icon.classList.add('favorited');
                            icon.style.color = '#ff4757'; // Red color for favorited products
                        } else {
                            icon.classList.remove('favorited');
                            icon.style.color = '#ccc'; // Default color for non-favorited products
                        }
                    });
                })
                .catch(error => console.error("Error checking favorites:", error));
        }

        // Attach event listeners to filters
        document.getElementById('priceFilter').addEventListener('change', applyPriceFilter);
        document.getElementById('dateFilter').addEventListener('change', applyDateFilter);
        document.querySelectorAll('.country-list input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const priceOrder = document.getElementById('priceFilter').value;
                const dateOrder = document.getElementById('dateFilter').value;
                const selectedCountries = Array.from(document.querySelectorAll('.country-list input[type="checkbox"]:checked'))
                    .map(checkbox => checkbox.value);

                fetchProducts(priceOrder, selectedCountries, dateOrder);
            });
        });

        // Handle favorite icon clicks
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('favorite-icon')) {
        e.preventDefault(); // Prevent default behavior
        e.stopPropagation(); // Stop event from bubbling up to the parent container

        const productdID = e.target.getAttribute('data-product-id');
        const isFavorited = e.target.classList.contains('favorited');

        if (isFavorited) {
            fetch('/api/unfavorite', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productdID }),
            })
            .then(response => response.json())
            .then(data => {
                e.target.classList.remove('favorited');
                e.target.style.color = '#ccc';
            })
            .catch(error => console.error("Error unfavoriting product:", error));
        } else {
            fetch('/api/favorite', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productdID }),
            })
            .then(response => response.json())
            .then(data => {
                e.target.classList.add('favorited');
                e.target.style.color = '#ff4757';
            })
            .catch(error => console.error("Error favoriting product:", error));
        }
    }
});
    </script>
</body>
</html>