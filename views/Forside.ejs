<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="ishtri1.png" sizes="16x16 32x32" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ishtri | Universe Of Products</title>
    <meta name="Description" content="Buy, Sell, Travel And More.">
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/toast.js" defer></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>
    <style>

/* Only keep unique search bar and category container styles */
.søkeBarContainer {
    margin-top: 20px;
    text-align: center;
}

.search-bar {
    display: inline-flex;
    align-items: center;
    border: 1px solid #ccc;
    border-radius: 4px;
    overflow: hidden;
}

.søkeBarContainer input[type="text"] {
    padding: 12px;
    width: 700px;
    height: 70px;
    border: none;
    font-size: 16px;
    box-sizing: border-box;
    outline: none;
}

.search-bar button {
    padding: 12px 20px;
    height: 70px;
    border: none;
    background-color: transparent;
    color: #007bff;
    cursor: pointer;
    transition: background-color 0.3s ease;
    box-sizing: border-box;
}

.search-bar button:hover {
    background-color: rgba(0, 123, 255, 0.1);
}

.search-bar button img {
    width: 20px;
    height: 20px;
    filter: brightness(0) saturate(100%) invert(36%) sepia(98%) saturate(2476%) hue-rotate(200deg) brightness(98%) contrast(104%);
}

.kategorierContainer, .kategorContainer2 {
    display: flex;
    justify-content: center;
    margin-top: 40px;
    gap: 60px;
}

.kategori, .kategori2 {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    transition: transform 0.2s ease-in-out;
}

.kategori:hover, .kategori2:hover {
    transform: scale(1.05);
}

.kategorierContainer i, .kategorContainer2 i {
    font-size: 30px;
    color: #525252;
    margin-bottom: 10px;
}

.kategori a, .kategori2 a {
    text-decoration: none;
    color: black;
    font-size: 16px;
}

#randomProducts {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
    padding: 20px;
    margin-top: 20px;
}

@media (max-width: 768px) {
    .kategorierContainer, .kategorContainer2 {
        flex-wrap: nowrap;
        overflow-x: auto;
        justify-content: flex-start;
    }

    .kategori, .kategori2 {
        flex: 0 0 auto;
    }

    .kategorierContainer i, .kategorContainer2 i {
        font-size: 24px;
    }

    .kategori a, .kategori2 a {
        font-size: 14px;
    }

    .søkeBarContainer input[type="text"] {
        width: 100%;
        height: 50px;
    }

    .search-bar button {
        height: 50px;
    }

    #randomProducts {
        flex-direction: column;
        align-items: center;
    }
}
    </style>
</head>
<body>
    <script src="/shared.js"></script>
    <%- include('partials/navbar') %>
    <div class="søkeBarContainer">
        <form action="/search" method="GET">
            <div class="search-bar">
                <input type="text" data-i18n="search.placeholder" placeholder="Search..." name="query" required>
                <button>
                    <img src="https://www.svgrepo.com/show/7109/search.svg" alt="Search Icon" style="width: 20px; height: 20px;">
                </button>
            </div>
        </form>
    </div>

    <div class="kategorierContainer">
        <div class="kategori">
            <a href="/torgetkat?category=Torget">
                <i class="fas fa-chair"></i>
                <span data-i18n="categories.torget">Marked</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Bil">
                <i class="fas fa-car"></i>
                <span data-i18n="categories.bil">Car</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/reise">
                <i class="fas fa-plane"></i>
                <span data-i18n="categories.reise">Travel</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Båt">
                <i class="fas fa-ship"></i>
                <span data-i18n="categories.båt">Boat</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Mc">
                <i class="fas fa-motorcycle"></i>
                <span data-i18n="categories.mc">Mc</span>
            </a>
        </div>
    </div>

    <div class="kategorContainer2">
        <div class="kategori2">
            <a href="">
                <i class="fas fa-suitcase-rolling"></i>
                <span data-i18n="categories.pakkereise">Package-deal</span>
            </a>
        </div>
        <div class="kategori2">
            <a href="/torgetkat?category=Jobb">
                <i class="fas fa-briefcase"></i>
                <span data-i18n="categories.jobb">Job</span>
            </a>
        </div>
        <div class="kategori2">
            <a href="/torgetkat?category=Eiendom">
                <i class="fas fa-home"></i>
                <span data-i18n="categories.eiendom">Property</span>
            </a>
        </div>
        <div class="kategori2">
            <a href="">
                <i class="fas fa-laptop"></i>
                <span data-i18n="categories.ny-brukt elektronikk">New-used electronics</span>
            </a>
        </div>
    </div>
    </div>
       <div id="randomProducts" style="display: flex; gap: 20px; padding: 10px; min-height: 100px; overflow-x: auto; justify-content: center;">
        <!-- Products will be loaded here -->
    </div>
    
        <script>
            function loadRandomProducts() {
                const randomProductsContainer = document.getElementById('randomProducts');
                
                // Show skeleton loading
                randomProductsContainer.innerHTML = '';
                for (let i = 0; i < 5; i++) {
                    const skeleton = document.createElement('div');
                    skeleton.className = 'product-card skeleton';
                    skeleton.innerHTML = `
                        <div class="skeleton-image skeleton"></div>
                        <div class="skeleton-text skeleton-title skeleton"></div>
                        <div class="skeleton-text skeleton-price skeleton"></div>
                    `;
                    randomProductsContainer.appendChild(skeleton);
                }

                fetch('/api/utils/random-products')
                    .then(response => response.json())
                    .then(products => {
                        randomProductsContainer.innerHTML = '';
                        
                        products.forEach(product => {
                            const productDiv = document.createElement('div');
                            productDiv.className = 'product-card';
                            
                            // Handle images
                            const images = product.Images ? product.Images.split(',') : [];
                            const firstImage = images.length > 0 ? images[0].trim() : null;
                            const imageUrl = firstImage ? `/uploads/${firstImage}` : '/images/default-product.png';
                            
                            productDiv.innerHTML = `
                                <img src="${imageUrl}" alt="${product.ProductName}" class="product-image" onerror="this.src='/images/default-product.png'">
                                <i class="fas fa-heart favorite-icon" data-product-id="${product.ProductdID}"></i>
                                <h4>
                                    ${product.ProductName} 
                                    ${product.Sold ? `<span class="sold-label">(Sold)</span>` : ''}
                                </h4>
                                <p>${product.Price ? `$${product.Price.toLocaleString('en-US')}` : 'Contact for price'}</p>
                            `;
                            
                            productDiv.addEventListener('click', (e) => {
                                if (!e.target.classList.contains('favorite-icon')) {
                                    window.location.href = `/productDetails?productdID=${product.ProductdID}`;
                                }
                            });
                            
                            randomProductsContainer.appendChild(productDiv);
                        });
                        
                        initializeFavorites();
                    })
                    .catch(err => {
                        console.error("Error loading products:", err);
                        randomProductsContainer.innerHTML = '<p>Error loading products. Please try again.</p>';
                        window.toast.show('Error loading products. Please try again.', 'error');
                    });
            }

             // Function to initialize favorite icons
            function initializeFavorites() {
                fetch('/api/favorites', { credentials: 'include' })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Authentication required');
                        }
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            throw new Error('Invalid response format');
                        }
                        return response.json();
                    })
                    .then(favorites => {
                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                        const productdID = icon.getAttribute('data-product-id');
                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));

                        if (isFavorited) {
                            icon.classList.add('favorited');
                            icon.style.color = '#ff4757'; // Red color for favorited products
                        } else {
                            icon.classList.remove('favorited');
                            icon.style.color = '#ccc'; // Default color for non-favorited products
                        }
                    });
                })
                 .catch(error => {
                console.error("Error checking favorites:", error);
                // Clear favorite states on error
                document.querySelectorAll('.favorite-icon').forEach(icon => {
                    icon.classList.remove('favorited');
                    icon.style.color = '#ccc';
                });
            });
    }

        // Handle favorite icon clicks
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('favorite-icon')) {
                e.preventDefault();
                e.stopPropagation();

                const productdID = e.target.getAttribute('data-product-id');
                const isFavorited = e.target.classList.contains('favorited');

                fetch('/api/auth/current-user', { credentials: 'include' })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.brukernavn) {
                            window.toast.show('Please <a href="/Logg inn.html">log in</a> to add favorites', 'info');
                            return;
                        }

                        // Use the same endpoint for both adding and removing favorites
                        fetch('/api/favorites', {
                            method: 'POST',
                            credentials: 'include',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ productdID }),
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            e.target.classList.toggle('favorited');
                            e.target.style.color = isFavorited ? '#ccc' : '#ff4757';
                            window.toast.show(
                                isFavorited ? 'Product removed from favorites' : 'Product added to favorites',
                                'success'
                            );
                        })
                        .catch(error => {
                            console.error("Error handling favorite:", error);
                            window.toast.show('Error updating favorites. Please try again.', 'error');
                        });
                    })
                    .catch(error => {
                        console.error("Error checking user session:", error);
                        window.toast.show('Error checking authentication. Please try again.', 'error');
                    });
            }
        });
            window.addEventListener('load', loadRandomProducts);
        window.onload = function () {
    checkUnreadMessages(); 
};

        </script>
</body>
</html>