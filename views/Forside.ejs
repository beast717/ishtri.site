<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="/ishtri1.png" sizes="16x16 32x32" type="image/png"> <!-- Use root-relative path -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- SEO and Social Media Meta Tags -->
    <title>Ishtri | Buy, Sell, Travel & More - Your Universe Of Products</title>
    <meta name="description" content="Discover Ishtri - Your online marketplace to buy and sell goods, find cars, boats, properties, jobs, travel deals, and much more. Explore a universe of products today!">
    <meta name="keywords" content="Ishtri, marketplace, buy, sell, online shopping, classifieds, cars, boats, property, jobs, travel, electronics, furniture, middle east, uae, dubai, oman, marocco">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://ishtri.site/"> <!-- Replace with actual domain -->
    <meta property="og:title" content="Ishtri | Buy, Sell, Travel & More">
    <meta property="og:description" content="Your online marketplace for goods, cars, property, jobs, travel, and more. Explore a universe of products on Ishtri.">
    <meta property="og:image" content="https://ishtri.site/ishtri1.png"> <!-- Replace with actual domain and path to a logo/banner -->
    <meta property="og:site_name" content="Ishtri">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://ishtri.site/"> <!-- Replace with actual domain -->
    <meta property="twitter:title" content="Ishtri | Buy, Sell, Travel & More">
    <meta property="twitter:description" content="Your online marketplace for goods, cars, property, jobs, travel, and more. Explore a universe of products on Ishtri.">
    <meta property="twitter:image" content="https://ishtri.site/ishtri1.png"> <!-- Replace with actual domain and path to a logo/banner -->

    <!-- Other Meta Tags -->
    <meta name="robots" content="index, follow"> <!-- Allow search engines to index the homepage -->
    <link rel="canonical" href="https://ishtri.site/" /> <!-- Replace with actual domain -->

    <!-- Stylesheets and Scripts -->
    <link rel="stylesheet" href="/css/main.css"> <!-- Use root-relative path -->
    <script src="/js/toast.js"></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>
    
</head>
<body>
    <%- include('partials/navbar') %> <!-- Move navbar include before shared.js -->
    <script src="/shared.js"></script> <!-- shared.js now loads after navbar (and socket.io.js) -->

    <div class="søkeBarContainer">
        <form action="/search" method="GET">
            <div class="search-bar">
                <input type="text" data-i18n="search.placeholder" placeholder="Search..." name="query" required>
                <button>
                    <img src="https://www.svgrepo.com/show/7109/search.svg" alt="Search Icon" style="width: 20px; height: 20px;">
                </button>
            </div>
        </form>
    </div>

    <div class="kategorierContainer">
        <div class="kategori">
            <a href="/torgetkat?category=Torget">
                <i class="fas fa-chair"></i>
                <span data-i18n="categories.torget">Marked</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Bil">
                <i class="fas fa-car"></i>
                <span data-i18n="categories.bil">Car</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/reise">
                <i class="fas fa-plane"></i>
                <span data-i18n="categories.reise">Travel</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Båt">
                <i class="fas fa-ship"></i>
                <span data-i18n="categories.båt">Boat</span>
            </a>
        </div>
        <div class="kategori">
            <a href="/torgetkat?category=Mc">
                <i class="fas fa-motorcycle"></i>
                <span data-i18n="categories.mc">Mc</span>
            </a>
        </div>
        <div class="kategori">  
            <a href="/torgetkat?category=Jobb">
                <i class="fas fa-briefcase"></i>
                <span data-i18n="categories.jobb">Job</span>
            </a>
        </div>
        <div class="kategori">  
            <a href="/torgetkat?category=Eiendom">
                <i class="fas fa-home"></i>
                <span data-i18n="categories.eiendom">Property</span>
            </a>
        </div>
    </div>
       <div id="randomProducts" style="display: flex; gap: 20px; padding: 10px; min-height: 100px; overflow-x: auto; justify-content: center;">
        <!-- Products will be loaded here -->
    </div>
    
        <script>
            function loadRandomProducts() {
                const randomProductsContainer = document.getElementById('randomProducts');
                
                // Show skeleton loading
                randomProductsContainer.innerHTML = '';
                for (let i = 0; i < 5; i++) {
                    const skeleton = document.createElement('div');
                    skeleton.className = 'product-card skeleton';
                    skeleton.innerHTML = `
                        <div class="skeleton-image skeleton"></div>
                        <div class="skeleton-text skeleton-title skeleton"></div>
                        <div class="skeleton-text skeleton-price skeleton"></div>
                    `;
                    randomProductsContainer.appendChild(skeleton);
                }

                fetch('/api/utils/random-products')
                    .then(response => response.json())
                    .then(products => {
                        randomProductsContainer.innerHTML = '';
                        
                        products.forEach(product => {
                            const productDiv = document.createElement('div');
                            productDiv.className = 'product-card';
                            
                            // Handle images
                            const images = product.Images ? product.Images.split(',') : [];
                            const firstImage = images.length > 0 ? images[0].trim() : null;
                            const imageUrl = firstImage ? `/uploads/${firstImage}` : '/images/default-product.png';
                            
                            productDiv.innerHTML = `
                                <img src="${imageUrl}" alt="${product.ProductName}" class="product-image" onerror="this.src='/images/default-product.png'">
                                <i class="fas fa-heart favorite-icon" data-product-id="${product.ProductdID}"></i>
                                <h4>
                                    ${product.ProductName} 
                                    ${product.Sold ? `<span class="sold-label">(Sold)</span>` : ''}
                                </h4>
                                <p>${product.Price ? `$${product.Price.toLocaleString('en-US')}` : 'Contact for price'}</p>
                            `;
                            
                            productDiv.addEventListener('click', (e) => {
                                if (!e.target.classList.contains('favorite-icon')) {
                                    window.location.href = `/productDetails?productdID=${product.ProductdID}`;
                                }
                            });
                            
                            randomProductsContainer.appendChild(productDiv);
                        });
                        
                        initializeFavorites();
                    })
                    .catch(err => {
                        randomProductsContainer.innerHTML = '<p>Error loading products. Please try again.</p>';
                        window.toast.show('Error loading products. Please try again.', 'error');
                    });
            }

             // Function to initialize favorite icons
            function initializeFavorites() {
                // First, check if the user is logged in
                fetch('/api/auth/current-user', { credentials: 'include' })
                    .then(response => response.json())
                    .then(userData => {
                        if (userData && userData.brukernavn) {
                            // User is logged in, fetch favorites
                            fetch('/api/favorites', { credentials: 'include' })
                                .then(response => {
                                    if (!response.ok) {
                                        // Handle potential errors even if logged in initially
                                        if (response.status === 401) {
                                            throw new Error('Authentication required');
                                        }
                                        throw new Error('Failed to fetch favorites');
                                    }
                                    const contentType = response.headers.get('content-type');
                                    if (!contentType || !contentType.includes('application/json')) {
                                        throw new Error('Invalid response format from /api/favorites');
                                    }
                                    return response.json();
                                })
                                .then(favorites => {
                                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                                        const productdID = icon.getAttribute('data-product-id');
                                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));

                                        if (isFavorited) {
                                            icon.classList.add('favorited');
                                            icon.style.color = '#ff4757'; // Red color for favorited products
                                        } else {
                                            icon.classList.remove('favorited');
                                            icon.style.color = '#ccc'; // Default color for non-favorited products
                                        }
                                    });
                                })
                                .catch(error => {
console.error("Error fetching or processing favorites:", error);
                                    // Ensure icons are in default state on error
                                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                                        icon.classList.remove('favorited');
                                        icon.style.color = '#ccc';
                                    });
                                });
                        } else {
                            // User is not logged in, set all icons to default state
                            document.querySelectorAll('.favorite-icon').forEach(icon => {
                                icon.classList.remove('favorited');
                                icon.style.color = '#ccc';
                            });
                        }
                    })
                    .catch(error => {
                        // Ensure icons are in default state on error
                        document.querySelectorAll('.favorite-icon').forEach(icon => {
                            icon.classList.remove('favorited');
                            icon.style.color = '#ccc';
                        });
                    });
            }

        // Handle favorite icon clicks
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('favorite-icon')) {
                e.preventDefault();
                e.stopPropagation();

                const productdID = e.target.getAttribute('data-product-id');
                const isFavorited = e.target.classList.contains('favorited');

                fetch('/api/auth/current-user', { credentials: 'include' })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.brukernavn) {
                            window.toast.show('Please <a href="/Logg inn.html">log in</a> to add favorites', 'info');
                            return;
                        }

                        // Use the same endpoint for both adding and removing favorites
                        fetch('/api/favorites', {
                            method: 'POST',
                            credentials: 'include',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ productdID }),
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            e.target.classList.toggle('favorited');
                            e.target.style.color = isFavorited ? '#ccc' : '#ff4757';
                            window.toast.show(
                                isFavorited ? 'Product removed from favorites' : 'Product added to favorites',
                                'success'
                            );
                        })
                        .catch(error => {
                            window.toast.show('Error updating favorites. Please try again.', 'error');
                        });
                    })
                    .catch(error => {
                        window.toast.show('Error checking authentication. Please try again.', 'error');
                    });
            }
        });
            window.addEventListener('load', loadRandomProducts);
        window.onload = function () {
            // Check user login status before checking messages
            fetch('/api/auth/current-user', { credentials: 'include' })
                .then(response => response.json())
                .then(userData => {
                    if (userData && userData.brukernavn) {
                        // Only call checkUnreadMessages if the user is logged in
                        if (typeof checkUnreadMessages === 'function') {
                             checkUnreadMessages();
                        } else {
                        }
                    } else {
                        // Optionally update UI to show 0 notifications if needed
                         if (typeof updateNotificationBadge === 'function') {
                            updateNotificationBadge(0);
                         }
                    }
                })
                .catch(error => {
                    console.error("Error checking user session for messages:", error);
                     // Optionally update UI to show 0 notifications on error
                     if (typeof updateNotificationBadge === 'function') {
                        updateNotificationBadge(0);
                     }
                });
        };

        </script>
</body>
</html>