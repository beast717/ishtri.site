<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://unpkg.com/i18next-http-backend/i18nextHttpBackend.min.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universe of Products</title>
    <style>   

h1 {
    text-align: center;
    margin-bottom: 20px;
}

.productsContainer {
    margin-top: -27px;  
    padding: 20px;
    flex: 1;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsive grid */
}

.product {
    font-family: Arial, Helvetica, sans-serifx;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin: 10px 0;
    background-color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 15px;
}

.product:hover {
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.product img {
    max-width: 300px;
    height: auto;
    border-radius: 5px;
}

.product h3 {
    margin: 0;
}

.no-products {
    text-align: center;
    font-size: 18px;
    margin-top: 20px;
}

.filter-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
    font-family: 'Arial', sans-serif;
}

.filter-container label {
    font-size: 13px;
    color: #333;
    font-weight: bold;
}

#priceFilter, #dateFilter, #subCategoryFilter {
    padding: 7px;
    font-size: 13px;
    border-radius: 4px;
    background-color: #f9f9f9;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.page-container {
    display: flex;
    gap: 20px;
    padding: 20px;
}

.side-panel {
font-family: Arial, Helvetica, sans-serif;
width: 250px;
background-color: #f9f9f9;
border: 1px solid #ddd;
border-radius: 8px;
padding: 15px;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
flex-shrink: 0;
}

.side-panel h3 {
margin-bottom: 15px;
font-size: 18px;
color: #333;
text-align: center;
}

.country-list, .car-brand-list {
list-style: none;
padding: 0;
margin: 0;
}


.country-list li, .car-brand-list li {
display: flex;
flex-direction: column;
align-items: flex-start;
margin-bottom: 10px;
}

.country-list li > div {
display: flex;
flex-direction: row; /* Align checkbox and label horizontally */
align-items: center; /* Vertically center the checkbox and label */
gap: 10px; /* Add spacing between checkbox and label */
}

.car-brand-list li > div {
display: flex;
flex-direction: row; /* Align checkbox and label horizontally */
align-items: center; /* Vertically center the checkbox and label */
gap: 10px; /* Add spacing between checkbox and label */
}


.country-list input[type="checkbox"], .car-brand-list input[type="checkbox"] {
margin-right: 10px;
cursor: pointer;
}

.country-list label, .car-brand-list label {
font-size: 16px;
color: #555;
cursor: pointer;
}

.country-list label:hover, .car-brand-list label:hover {
color: #007bff;
}

.sold-label {
color: #ffffff;
background-color: #ff5722;
padding: 3px 6px;
border-radius: 4px;
font-size: 14px;
font-weight: bold;
margin-left: 5px;
display: inline-block;
}


/* City List Styling (Nested) */
.city-list {
list-style: none;
padding-left: 20; /* Reduced padding to align cities properly */
margin: 5px 0 0 0; /* Adjusted margin to remove any left offset */
display: none; /* Hidden by default */
}

.city-list li {
display: flex;
flex-direction: row;
align-items: center; /* Align checkbox and label vertically */
margin-bottom: 5px; /* Add spacing between cities */
}

.city-list input[type="checkbox"] {
margin-right: 10px;
cursor: pointer;
}

.city-list label {
font-size: 14px;
color: #777;
cursor: pointer;
}

.city-list label:hover {
color: #007bff;
}

.load-more-btn {
display: block;
margin: 30px auto;
padding: 12px 24px;
background: #007bff;
color: white;
border: none;
border-radius: 25px;
cursor: pointer;
transition: all 0.3s ease;
font-size: 16px;
}

.load-more-btn:hover {
background: #0056b3;
transform: translateY(-2px);
box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

.load-more-btn:disabled {
background: #cccccc;
cursor: not-allowed;
transform: none;
box-shadow: none;
}

.loading-overlay {
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(255, 255, 255, 0.8);
display: none;
justify-content: center;
align-items: center;
z-index: 1000;
}

.reset-filters-btn {
position: fixed;
bottom: 30px;
right: 30px;
padding: 12px 24px;
background: #dc3545;
color: white;
border: none;
border-radius: 25px;
cursor: pointer;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
transition: all 0.3s ease;
z-index: 1000;
display: flex;
align-items: center;
gap: 8px;
}

.reset-filters-btn:hover {
background: #bb2d3b;
transform: translateY(-2px);
box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
}

.reset-filters-btn:active {
transform: translateY(0);
}

.custom-title {
    color: #666;
    font-size: 1.2rem;
    font-weight: normal;
}

.filter-section {
    margin: 15px 0;
    padding: 10px;
    border-top: 1px solid #eee;
}

.filter-section h4 {
    margin: 0 0 10px 0;
    color: #333;
    font-size: 14px;
}

.range-inputs {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.range-inputs input {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

select[multiple] {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
    height: auto;
    min-height: 80px;
}

select[multiple] option {
    padding: 5px;
}

select[multiple] option:checked {
    background-color: #007bff;
    color: white;
}

.date-input input {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}

        
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <script src="/shared.js"></script>

    <div class="filter-container" style="margin-bottom: 20px;">
        <label for="priceFilter" data-i18n="filter.sorter_etter">Sorter etter:</label>
        <select id="priceFilter" onchange="applyFilters()">
            <option value="asc" data-i18n="filter.lavest_pris">Lavest Pris</option>
            <option value="desc" data-i18n="filter.høyest_pris">Høyest Pris</option>
            <option value="" data-i18n="filter.alle">alle</option>
        </select>
        <label for="dateFilter" data-i18n="filter.utgitt">Utgitt:</label>
        <select id="dateFilter" onchange="applyFilters()">
            <option value="" data-i18n="filter.alle">alle</option>
            <option value="desc" data-i18n="filter.nylige">Nylige</option>
            <option value="asc" data-i18n="filter.eldre">Eldre</option>
        </select>
        <div id="subcategoryFilterContainer" style="display: none;">
            <label for="subCategoryFilter" data-i18n="form.category">Kategori:</label>
            <select id="subCategoryFilter" onchange="applyFilters()">
                <option value="" data-i18n="filter.alle">Alle</option>
                <option value="Klær" data-i18n="subkategori.klær">Klær</option>
                <option value="Elektronikk" data-i18n="subkategori.elektronikk">Elektronikk</option>
                <option value="Hvitvarer" data-i18n="subkategori.hvitvarer">Hvitvarer</option>
                <option value="Møbler" data-i18n="subkategori.møbler">Møbler</option>
                <option value="Annet" data-i18n="subkategori.annet">Annet</option>
            </select>
        </div> 
    </div>  

    <!-- Move reset filters button outside of subcategoryFilterContainer -->
    <button onclick="resetFilters()" class="reset-filters-btn" id="resetFiltersBtn" style="display: none;">
        ⟳ Reset Filters
    </button>

    <div class="page-container">
        <div class="side-panel">
            <h3 data-i18n="filter.filter_land">Filter by Country</h3>
            <ul class="country-list">
                <ul class="country-list">
            </ul>
        </ul>
    
        <h3 id="filterCar">Filter Car</h3>
            <ul class="car-brand-list" id="carBrandList"></ul>

            <!-- Add Car Specific Filters -->
            <div id="carSpecificFilters" style="display: none;">
                <!-- Year Range Filter -->
                <div class="filter-section">
                    <h4>Year Range</h4>
                    <div class="range-inputs">
                        <input type="number" id="yearFrom" placeholder="From" min="1900" max="2024">
                        <input type="number" id="yearTo" placeholder="To" min="1900" max="2024">
                    </div>
                </div>

                <!-- Mileage Range Filter -->
                <div class="filter-section">
                    <h4>Mileage (km)</h4>
                    <div class="range-inputs">
                        <input type="number" id="mileageFrom" placeholder="From" min="0">
                        <input type="number" id="mileageTo" placeholder="To">
                    </div>
                </div>

                <!-- Fuel Type Filter -->
                <div class="filter-section">
                    <h4>Fuel Type</h4>
                    <select id="fuelTypeFilter" multiple>
                        <option value="Bensin">Bensin</option>
                        <option value="Diesel">Diesel</option>
                        <option value="Hybrid">Hybrid</option>
                        <option value="Electric">Electric</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <!-- Transmission Filter -->
                <div class="filter-section">
                    <h4>Transmission</h4>
                    <select id="transmissionFilter" multiple>
                        <option value="Manual">Manual</option>
                        <option value="Automatic">Automatic</option>
                    </select>
                </div>
            </div>

            <!-- Add Property Specific Filters -->
            <div id="propertySpecificFilters" style="display: none;">
                <!-- Property Type Filter -->
                <div class="filter-section">
                    <h4>Property Type</h4>
                    <select id="propertyTypeFilter" multiple>
                        <option value="Apartment">Apartment</option>
                        <option value="House">House</option>
                        <option value="Cabin">Cabin</option>
                        <option value="Townhouse">Townhouse</option>
                        <option value="Commercial">Commercial</option>
                    </select>
                </div>

                <!-- Size Range Filter -->
                <div class="filter-section">
                    <h4>Size (m²)</h4>
                    <div class="range-inputs">
                        <input type="number" id="sizeFrom" placeholder="From" min="0">
                        <input type="number" id="sizeTo" placeholder="To">
                    </div>
                </div>

                <!-- Rooms Filter -->
                <div class="filter-section">
                    <h4>Number of Rooms</h4>
                    <div class="range-inputs">
                        <input type="number" id="roomsFrom" placeholder="From" min="0">
                        <input type="number" id="roomsTo" placeholder="To">
                    </div>
                </div>

                <!-- Bathrooms Filter -->
                <div class="filter-section">
                    <h4>Number of Bathrooms</h4>
                    <div class="range-inputs">
                        <input type="number" id="bathroomsFrom" placeholder="From" min="0">
                        <input type="number" id="bathroomsTo" placeholder="To">
                    </div>
                </div>

                <!-- Energy Class Filter -->
                <div class="filter-section">
                    <h4>Energy Class</h4>
                    <select id="energyClassFilter" multiple>
                        <option value="A">A</option>
                        <option value="B">B</option>
                        <option value="C">C</option>
                        <option value="D">D</option>
                        <option value="E">E</option>
                        <option value="F">F</option>
                        <option value="G">G</option>
                    </select>
                </div>
            </div>

            <!-- Add Work Specific Filters -->
            <div id="workSpecificFilters" style="display: none;">
                <!-- Employment Type Filter -->
                <div class="filter-section">
                    <h4>Employment Type</h4>
                    <select id="employmentTypeFilter" multiple>
                        <option value="Full-time">Full-time</option>
                        <option value="Part-time">Part-time</option>
                        <option value="Contract">Contract</option>
                        <option value="Temporary">Temporary</option>
                        <option value="Internship">Internship</option>
                    </select>
                </div>

                <!-- Salary Range Filter -->
                <div class="filter-section">
                    <h4>Salary Range (NOK)</h4>
                    <div class="range-inputs">
                        <input type="number" id="salaryFrom" placeholder="From" min="0">
                        <input type="number" id="salaryTo" placeholder="To">
                    </div>
                </div>

                <!-- Application Deadline Filter -->
                <div class="filter-section">
                    <h4>Application Deadline</h4>
                    <div class="date-input">
                        <input type="date" id="deadlineDate">
                    </div>
                </div>
            </div>
        </div>

        <div class="productsContainer" id="productsContainer">
            <p>Loading products...</p>
        </div>
    </div>


    <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

    <script>
    (function () {
        console.log("Initializing TorgetKat page...");
        let filterTimeout;
        const DEBOUNCE_DELAY = 300; // ms


        // Pagination variables
        let currentPage = 1;
        let isLoading = false;
        let hasMore = true;
        const limit = 20;

        // Current filter state
        let currentFilters = {
            priceOrder: '',
            selectedCountries: [],
            dateOrder: '',
            subCategory: '',
            selectedCarBrands: [],
            selectedCities: [],
            yearRange: { from: null, to: null },
            mileageRange: { from: null, to: null },
            fuelTypes: [],
            transmissionTypes: [],
            propertyTypes: [],
            sizeRange: { from: null, to: null },
            roomsRange: { from: null, to: null },
            bathroomsRange: { from: null, to: null },
            energyClasses: [],
            employmentTypes: [],
            salaryRange: { from: null, to: null },
            applicationDeadline: null
        };

        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function fetchProducts(loadMore = false, cacheBuster = null) {
            if (isLoading || (!loadMore && !hasMore)) return;
            
            showLoading();
            isLoading = true;

            const offset = (currentPage - 1) * limit;
            const urlParams = new URLSearchParams(window.location.search);
            const category = urlParams.get('category') || 'default';

            // Build API URL with current filters
            let apiUrl = `/api/products?category=${category}&limit=${limit}&offset=${offset}`;
                    // Add cache busting
            if (cacheBuster) {
                apiUrl += `&_=${cacheBuster}`;
            }
            if (currentFilters.subCategory) apiUrl += `&subCategory=${currentFilters.subCategory}`;
            if (currentFilters.priceOrder) apiUrl += `&sortPrice=${currentFilters.priceOrder}`;
            if (currentFilters.dateOrder) apiUrl += `&sortDate=${currentFilters.dateOrder}`;
            if (currentFilters.selectedCarBrands.length) apiUrl += `&carBrand=${currentFilters.selectedCarBrands.join(',')}`;
            if (currentFilters.selectedCountries.length) {
              apiUrl += `&countries=${encodeURIComponent(currentFilters.selectedCountries.join(','))}`;
            }
            if (currentFilters.selectedCities.length) {
              apiUrl += `&cities=${currentFilters.selectedCities.join(',')}`;
            }

            // Add car specific filters
            if (category === 'Bil') {
                if (currentFilters.yearRange.from) {
                    apiUrl += `&yearFrom=${currentFilters.yearRange.from}`;
                }
                if (currentFilters.yearRange.to) {
                    apiUrl += `&yearTo=${currentFilters.yearRange.to}`;
                }
                if (currentFilters.mileageRange.from) {
                    apiUrl += `&mileageFrom=${currentFilters.mileageRange.from}`;
                }
                if (currentFilters.mileageRange.to) {
                    apiUrl += `&mileageTo=${currentFilters.mileageRange.to}`;
                }
                if (currentFilters.fuelTypes.length) {
                    apiUrl += `&fuelTypes=${currentFilters.fuelTypes.join(',')}`;
                }
                if (currentFilters.transmissionTypes.length) {
                    apiUrl += `&transmissionTypes=${currentFilters.transmissionTypes.join(',')}`;
                }
            }

            // Add property specific filters
            if (category === 'Eiendom') {
                if (currentFilters.propertyTypes.length) {
                    apiUrl += `&propertyType=${encodeURIComponent(currentFilters.propertyTypes.join(','))}`;
                }
                if (currentFilters.sizeRange.from) {
                    apiUrl += `&sizeSqmFrom=${encodeURIComponent(currentFilters.sizeRange.from)}`;
                }
                if (currentFilters.sizeRange.to) {
                    apiUrl += `&sizeSqmTo=${encodeURIComponent(currentFilters.sizeRange.to)}`;
                }
                if (currentFilters.roomsRange.from) {
                    apiUrl += `&numRoomsFrom=${encodeURIComponent(currentFilters.roomsRange.from)}`;
                }
                if (currentFilters.roomsRange.to) {
                    apiUrl += `&numRoomsTo=${encodeURIComponent(currentFilters.roomsRange.to)}`;
                }
                if (currentFilters.bathroomsRange.from) {
                    apiUrl += `&numBathroomsFrom=${encodeURIComponent(currentFilters.bathroomsRange.from)}`;
                }
                if (currentFilters.bathroomsRange.to) {
                    apiUrl += `&numBathroomsTo=${encodeURIComponent(currentFilters.bathroomsRange.to)}`;
                }
                if (currentFilters.energyClasses.length) {
                    apiUrl += `&energyClass=${encodeURIComponent(currentFilters.energyClasses.join(','))}`;
                }
            }

            // Add work specific filters
            if (category === 'Jobb') {
                if (currentFilters.employmentTypes.length) {
                    apiUrl += `&employmentTypes=${currentFilters.employmentTypes.join(',')}`;
                }
                if (currentFilters.salaryRange.from) {
                    apiUrl += `&salaryFrom=${currentFilters.salaryRange.from}`;
                }
                if (currentFilters.salaryRange.to) {
                    apiUrl += `&salaryTo=${currentFilters.salaryRange.to}`;
                }
                if (currentFilters.applicationDeadline) {
                    apiUrl += `&deadline=${currentFilters.applicationDeadline}`;
                }
            }

            // Show loading state
            const container = document.getElementById('productsContainer');
            const loadButton = document.getElementById('loadMoreButton');
            if (!loadMore) container.innerHTML = '<p>Loading products...</p>';
            if (loadButton) {
                loadButton.disabled = true;
                loadButton.textContent = 'Loading...';
            }

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    hasMore = (currentPage * limit) < data.total;
                    displayProducts(data.products, loadMore);
                    currentPage++;
                    isLoading = false;

                    // Update load more button
                    if (loadButton) {
                        loadButton.disabled = false;
                        loadButton.textContent = 'Load More';
                        if (!hasMore) loadButton.remove();
                    } else if (hasMore) {
                        addLoadMoreButton();
                    }
                     hideLoading();
                })
                .catch(error => {
                    console.error("Error fetching products:", error);
                    isLoading = false;
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `
                        <div class="error-message">
                            <p>Error loading products. Please try again.</p>
                            <button onclick="fetchProducts()">Retry</button>
                        </div>
                    `;
                    hideLoading();
                    if (loadButton) {
                        loadButton.disabled = false;
                        loadButton.textContent = 'Load More';
                    }
                });
        }

        function resetFilters() {  
            // 1. Reset UI elements
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });

            // 2. Hide city lists instead of clearing them
            document.querySelectorAll('.city-list').forEach(list => {
                list.style.display = 'none'; 
            });
            
            // Reset dropdowns
            document.getElementById('priceFilter').value = 'asc';
            document.getElementById('dateFilter').value = '';

            // Reset category-specific filters
            const urlParams = new URLSearchParams(window.location.search);
            const category = urlParams.get('category') || 'default';

            // Reset Torget filters
            if (category === 'Torget') {
                document.getElementById('subCategoryFilter').value = '';
            }

            // Reset Car filters
            if (category === 'Bil') {
                document.getElementById('yearFrom').value = '';
                document.getElementById('yearTo').value = '';
                document.getElementById('mileageFrom').value = '';
                document.getElementById('mileageTo').value = '';
                document.getElementById('fuelTypeFilter').selectedIndex = -1;
                document.getElementById('transmissionFilter').selectedIndex = -1;
            }

            // Reset Property filters
            if (category === 'Eiendom') {
                document.getElementById('propertyTypeFilter').selectedIndex = -1;
                document.getElementById('sizeFrom').value = '';
                document.getElementById('sizeTo').value = '';
                document.getElementById('roomsFrom').value = '';
                document.getElementById('roomsTo').value = '';
                document.getElementById('bathroomsFrom').value = '';
                document.getElementById('bathroomsTo').value = '';
                document.getElementById('energyClassFilter').selectedIndex = -1;
            }

            // Reset Work filters
            if (category === 'Jobb') {
                document.getElementById('employmentTypeFilter').selectedIndex = -1;
                document.getElementById('salaryFrom').value = '';
                document.getElementById('salaryTo').value = '';
                document.getElementById('deadlineDate').value = '';
            }

            // 3. Reset internal state
            currentFilters = {
                priceOrder: 'asc',
                dateOrder: '',
                subCategory: '',
                selectedCountries: [],
                selectedCarBrands: [],
                selectedCities: [],
                yearRange: { from: null, to: null },
                mileageRange: { from: null, to: null },
                fuelTypes: [],
                transmissionTypes: [],
                propertyTypes: [],
                sizeRange: { from: null, to: null },
                roomsRange: { from: null, to: null },
                bathroomsRange: { from: null, to: null },
                energyClasses: [],
                employmentTypes: [],
                salaryRange: { from: null, to: null },
                applicationDeadline: null
            };

            // 4. Reset pagination
            currentPage = 1;
            hasMore = true;
            isLoading = false; 

            // 5. Clear container and force fresh load
            const container = document.getElementById('productsContainer');
            container.innerHTML = '<p>Loading products...</p>';
            
            // 6. Fetch with cache busting
            fetchProducts(false, Date.now());
        }

        window.resetFilters = resetFilters;
        window.fetchProducts = fetchProducts;

        function displayProducts(products, append = false) {
            const container = document.getElementById('productsContainer');
            if (!container) return;

            if (!append) {
                container.innerHTML = '';
                currentPage = 1;
            }

            if (products.length === 0 && !append) {
                container.innerHTML = '<p class="no-products">No products found for this category.</p>';
                return;
            }

            products.forEach(product => {
                const isJob = product.category === 'Jobb';
                const isCar = product.category === 'Bil';
                const isProperty = product.category === 'Eiendom'; 
                
                const productDiv = document.createElement('div');
                productDiv.className = 'product';

                const images = product.Images ? product.Images.split(',') : [];
                const firstImage = images.length > 0 ? `/uploads/${images[0].trim()}` : '/uploads/default-placeholder.png';

                productDiv.innerHTML = `
                    <img src="${firstImage}" alt="${isJob ? product.JobTitle : 
                    isCar ? `${product.brand_name} ${product.model_name}` : 
                    product.ProductName}">
                    <div>
                        <h3>
                            ${isJob ? product.JobTitle || 'No title' : 
                            isCar ? 
                                `${product.brand_name || 'Unknown brand'} ${product.model_name || ''}`.trim() : 
                                product.ProductName || 'Unnamed product'}
                            ${product.Sold ? `<span class="sold-label">(Sold)</span>` : ''}
                            <i class="favorite-icon fas fa-heart" data-product-id="${product.ProductdID}"></i> 
                        </h3>
                        ${isCar ? `<p class="custom-title">${product.ProductName}</p>` : ''}
                        ${isJob ? `
                            <p><strong>Bedrift:</strong> ${product.CompanyName || 'Not specified'}</p>
                            <p><strong>Ansettelsesform:</strong> ${product.EmploymentType || 'Not specified'}</p>
                        ` : ''}
                        ${isCar ? `
                            <p><strong>Årsmodell:</strong> ${product.Year || 'N/A'}</p>
                            <p><strong>Kilometer:</strong> ${product.Mileage ? `${product.Mileage} km` : 'N/A'}</p>
                            <p><strong>Drivstoff:</strong> ${product.FuelType || 'Not specified'}</p>
                        ` : ''}
                        ${isProperty ? `
                            <p><strong>Pris:</strong> ${product.Price ? `${product.Price.toLocaleString('no-NO')} kr` : 'Pris på forespørsel'}</p>
                            <p><strong>Type:</strong> ${product.PropertyType}</p>
                            <p><strong>Størrelse:</strong> ${product.SizeSqm} m²</p>
                        ` : ''}
                        <p><strong>Sted:</strong> ${ 
                            (product.cityName || product.Location || 'Not specified') + 
                            (product.country ? `, ${product.country}` : '')
                        }</p>
                        ${!isJob && !isCar && !isProperty ? `<p><strong>Pris:</strong> ${product.Price ? `${product.Price} kr` : 'Contact for price'}</p>` : ''}
                    </div>
                `;

                productDiv.addEventListener('click', () => {
                    const favoriteIcon = productDiv.querySelector('.favorite-icon');
                    const isFavorited = favoriteIcon.classList.contains('favorited');
                    window.location.href = `/productDetails?productdID=${product.ProductdID}&favorited=${isFavorited}`;
                });

                container.appendChild(productDiv);
            });

            initializeFavorites();

            document.querySelectorAll('.favorite-icon').forEach(icon => {
            icon.addEventListener('click', (e) => {
                e.stopPropagation();
                const productdID = icon.getAttribute('data-product-id');
                const isFavorited = icon.classList.contains('favorited');

                if (isFavorited) {
                    fetch('/api/favorites', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productdID }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        icon.classList.remove('favorited');
                        icon.style.color = '#ccc';
                    })
                    .catch(error => console.error("Error unfavoriting product:", error));
                } else {
                    fetch('/api/favorites', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productdID }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        icon.classList.add('favorited');
                        icon.style.color = '#ff4757';
                    })
                    .catch(error => console.error("Error favoriting product:", error));
                }
            });
        });
    }

        function addLoadMoreButton() {
            const existingButton = document.getElementById('loadMoreButton');
            if (existingButton) return;

            const button = document.createElement('button');
            button.id = 'loadMoreButton';
            button.className = 'load-more-btn';
            button.textContent = 'Load More';
            button.addEventListener('click', () => fetchProducts(true));
            
            const container = document.getElementById('productsContainer');
            container.appendChild(button);
        }

        function applyFilters() {
            clearTimeout(filterTimeout);
            filterTimeout = setTimeout(() => {
                // Get values from car filters
                const yearFrom = document.getElementById('yearFrom')?.value;
                const yearTo = document.getElementById('yearTo')?.value;
                const mileageFrom = document.getElementById('mileageFrom')?.value;
                const mileageTo = document.getElementById('mileageTo')?.value;
                const fuelTypeSelect = document.getElementById('fuelTypeFilter');
                const transmissionSelect = document.getElementById('transmissionFilter');

                // Get values from property filters
                const propertyTypeSelect = document.getElementById('propertyTypeFilter');
                const sizeFrom = document.getElementById('sizeFrom')?.value;
                const sizeTo = document.getElementById('sizeTo')?.value;
                const roomsFrom = document.getElementById('roomsFrom')?.value;
                const roomsTo = document.getElementById('roomsTo')?.value;
                const bathroomsFrom = document.getElementById('bathroomsFrom')?.value;
                const bathroomsTo = document.getElementById('bathroomsTo')?.value;
                const energyClassSelect = document.getElementById('energyClassFilter');

                // Get values from work filters
                const employmentTypeSelect = document.getElementById('employmentTypeFilter');
                const salaryFrom = document.getElementById('salaryFrom')?.value;
                const salaryTo = document.getElementById('salaryTo')?.value;
                const deadlineDate = document.getElementById('deadlineDate')?.value;

                currentFilters = {
                    priceOrder: document.getElementById('priceFilter').value,
                    dateOrder: document.getElementById('dateFilter').value,
                    subCategory: document.getElementById('subCategoryFilter')?.value || '',
                    selectedCountries: Array.from(
                        document.querySelectorAll('.country-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    selectedCities: Array.from(
                        document.querySelectorAll('.city-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    selectedCarBrands: Array.from(
                        document.querySelectorAll('.car-brand-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    yearRange: {
                        from: yearFrom || null,
                        to: yearTo || null
                    },
                    mileageRange: {
                        from: mileageFrom || null,
                        to: mileageTo || null
                    },
                    fuelTypes: Array.from(fuelTypeSelect?.selectedOptions || []).map(option => option.value),
                    transmissionTypes: Array.from(transmissionSelect?.selectedOptions || []).map(option => option.value),
                    propertyTypes: Array.from(propertyTypeSelect?.selectedOptions || []).map(option => option.value),
                    sizeRange: {
                        from: sizeFrom || null,
                        to: sizeTo || null
                    },
                    roomsRange: {
                        from: roomsFrom || null,
                        to: roomsTo || null
                    },
                    bathroomsRange: {
                        from: bathroomsFrom || null,
                        to: bathroomsTo || null
                    },
                    energyClasses: Array.from(energyClassSelect?.selectedOptions || []).map(option => option.value),
                    employmentTypes: Array.from(employmentTypeSelect?.selectedOptions || []).map(option => option.value),
                    salaryRange: {
                        from: salaryFrom || null,
                        to: salaryTo || null
                    },
                    applicationDeadline: deadlineDate || null
                };

                // Force reset pagination
                currentPage = 1;
                hasMore = true;
                document.getElementById('productsContainer').innerHTML = '<p>Loading products...</p>';
                fetchProducts();
            }, DEBOUNCE_DELAY);
        }

        document.getElementById('dateFilter').addEventListener('change', () => {
        document.getElementById('priceFilter').value = '';
        applyFilters();
    });
        document.getElementById('priceFilter').addEventListener('change', () => {
        document.getElementById('dateFilter').value = '';
        applyFilters();
    });

    function handleCategoryVisibility() {
        const urlParams = new URLSearchParams(window.location.search);
        const category = urlParams.get('category') || 'default';
        const subcategoryContainer = document.getElementById('subcategoryFilterContainer');
        const carBrandSection = document.getElementById('carBrandList');
        const carBrandLabel = document.getElementById('filterCar');
        const carSpecificFilters = document.getElementById('carSpecificFilters');
        const propertySpecificFilters = document.getElementById('propertySpecificFilters');
        const workSpecificFilters = document.getElementById('workSpecificFilters');
        const resetFiltersBtn = document.getElementById('resetFiltersBtn');

        // Toggle subcategory filter
        if (subcategoryContainer) {
            subcategoryContainer.style.display = category === 'Torget' ? 'block' : 'none';
        }

        // Toggle car brand filter and specific filters
        if (carBrandSection && carBrandLabel && carSpecificFilters) {
            const shouldShowCar = category === 'Bil';
            carBrandSection.style.display = shouldShowCar ? 'block' : 'none';
            carBrandLabel.style.display = shouldShowCar ? 'block' : 'none';
            carSpecificFilters.style.display = shouldShowCar ? 'block' : 'none';
        }

        // Toggle property specific filters
        if (propertySpecificFilters) {
            propertySpecificFilters.style.display = category === 'Eiendom' ? 'block' : 'none';
        }

        // Toggle work specific filters
        if (workSpecificFilters) {
            workSpecificFilters.style.display = category === 'Jobb' ? 'block' : 'none';
        }

        // Show reset filters button for all valid categories
        if (resetFiltersBtn) {
            resetFiltersBtn.style.display = ['Torget', 'Bil', 'Jobb', 'Eiendom'].includes(category) ? 'flex' : 'none';
        }
    }

        function initializeFilters() {
    // Price and Date filters
    document.getElementById('priceFilter').addEventListener('change', applyFilters);
    document.getElementById('dateFilter').addEventListener('change', applyFilters);
    
    // Subcategory filter
    const subCategoryFilter = document.getElementById('subCategoryFilter');
    if (subCategoryFilter) {
        subCategoryFilter.addEventListener('change', applyFilters);
    }

    // Add event listeners for work filters
    ['salaryFrom', 'salaryTo'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', applyFilters);
            element.addEventListener('input', function() {
                // Ensure the value doesn't exceed max length
                if (this.value.length > 10) {
                    this.value = this.value.slice(0, 10);
                }
            });
        }
    });

    const deadlineDate = document.getElementById('deadlineDate');
    if (deadlineDate) {
        deadlineDate.addEventListener('change', applyFilters);
        // Set min date to today
        const today = new Date().toISOString().split('T')[0];
        deadlineDate.min = today;
    }

    const employmentTypeFilter = document.getElementById('employmentTypeFilter');
    if (employmentTypeFilter) {
        employmentTypeFilter.addEventListener('change', applyFilters);
    }

    // Add event listeners for property filters
    ['sizeFrom', 'sizeTo', 'roomsFrom', 'roomsTo', 'bathroomsFrom', 'bathroomsTo'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', applyFilters);
            element.addEventListener('change', applyFilters);
            element.addEventListener('input', function() {
                // Ensure the value doesn't exceed max length
                if (this.value.length > 7) {
                    this.value = this.value.slice(0, 7);
                }
            });
        }
    });

    ['propertyTypeFilter', 'energyClassFilter'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', applyFilters);
        }
    });

    // Add event listeners for car filters
    ['yearFrom', 'yearTo', 'mileageFrom', 'mileageTo'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', applyFilters);
            element.addEventListener('change', applyFilters);
            element.addEventListener('input', function() {
                if (this.value.length > 7) {
                    this.value = this.value.slice(0, 7);
                }
            });
        }
    });

    ['fuelTypeFilter', 'transmissionFilter'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', applyFilters);
        }
    });

    // Fetch countries and cities from the API
    fetch('/api/utils/countries')
        .then(response => response.json())
        .then(countries => {
            const countryList = document.querySelector('.country-list');
            
            countries.forEach(countryData => {
                // Create country checkbox
                const countryItem = document.createElement('li');
                countryItem.innerHTML = `
                    <div>
                        <input type="checkbox" id="${countryData.country}" value="${countryData.country}">
                        <label for="${countryData.country}">${countryData.country}</label>
                    </div>
                    <ul class="city-list" id="${countryData.country}-cities" style="display: none;"></ul>
                `;
                
                // Populate cities for this country
                const cityList = countryItem.querySelector('.city-list');
                countryData.cities.forEach((cityName, index) => {
                    const cityId = countryData.city_ids[index];
                    cityList.innerHTML += `
                        <li>
                            <input type="checkbox" id="city_${cityId}" value="${cityId}">
                            <label for="city_${cityId}">${cityName}</label>
                        </li>
                    `;
                });

             // Modify the country checkbox event listener to uncheck cities
            document.querySelectorAll('.country-list input[type="checkbox"]').forEach(countryCheckbox => {
                    countryCheckbox.addEventListener('change', function() {
                        const countryItem = this.closest('li');
                        const cityList = countryItem.querySelector('.city-list');
                        const cityCheckboxes = cityList.querySelectorAll('input[type="checkbox"]');

                        // Uncheck all cities when country is unchecked
                        if (!this.checked) {
                            cityCheckboxes.forEach(cityCB => {
                                cityCB.checked = false;
                            });
                        }

                        // Toggle city list visibility
                        cityList.style.display = this.checked ? 'block' : 'none';
                        applyFilters(); // Refresh results
                    });
                });

                countryList.appendChild(countryItem);
            });

            // Add event listeners to city checkboxes after they are created
            document.querySelectorAll('.city-list input').forEach(cityCheckbox => {
                cityCheckbox.addEventListener('change', applyFilters);
            });
        })
        .catch(error => {
            console.error("Error loading countries and cities:", error);
        });

    loadCarBrands();
}

function loadCarBrands() {
    fetch('/api/utils/car-brands')
        .then(response => response.json())
        .then(brands => {
            const container = document.getElementById('carBrandList');
            
            brands.forEach(brand => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <div>
                        <input type="checkbox" id="${brand.brand_id}" value="${brand.brand_id}">
                        <label for="${brand.brand_id}">${brand.brand_name}</label>
                    </div>
                `;
                container.appendChild(li);
            });

            // Add event listeners to the new checkboxes
            document.querySelectorAll('#carBrandList input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', applyFilters);
            });
        })
        .catch(error => console.error("Error loading car brands:", error));
}

        function initializeFavorites() {
            fetch('/api/favorites')
                .then(response => response.json())
                .then(favorites => {
                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                        const productdID = icon.getAttribute('data-product-id');
                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));
                        icon.classList.toggle('favorited', isFavorited);
                        icon.style.color = isFavorited ? '#ff4757' : '#ccc';
                    });
                })
                .catch(error => console.error("Error checking favorites:", error));
        }

        window.onload = function () {
            fetchProducts();
            checkUnreadMessages();
            initializeFilters();
            initializeFavorites();
            applyFilters();
            handleCategoryVisibility();
            checkUnreadMessages();
        };
    })();
</script>
</body>
</html>