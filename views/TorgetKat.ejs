<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="icon" href="ishtri1.png" sizes="16x16 32x32" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universe of Products</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/toast.js" defer></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/backToTop.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>
    
    <style>   
/* Only keep unique layout/filter/special styles */
h1 {
    text-align: center;
    margin-bottom: 20px;
}

.productsContainer {
    margin-top: -27px;  
    padding: 20px;
    flex: 1;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.filter-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.custom-title {
    color: #666;
    font-size: 1.2rem;
    font-weight: normal;
    margin-top: 5px;
}

.filter-section {
    margin: 15px 0;
    padding: 10px;
    border-top: 1px solid #eee;
}

.filter-section h4 {
    margin: 0 0 10px 0;
    color: #333;
    font-size: 14px;
}

@media (max-width: 768px) {

    .productsContainer {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Keep specific grid adjustment */
        padding: 10px;
    }

    /* Filter Container Adjustments */
    .filter-container {
        flex-wrap: wrap;
        gap: 8px;
        margin: 10px 0;
    }

    #priceFilter,
    #dateFilter,
    #subCategoryFilter {
        width: 100%;
        font-size: 12px;
        padding: 6px;
    }

    .filter-section h4 {
        font-size: 13px;
    }

    .range-inputs {
        flex-direction: column;
    }

    .filter-container label {
        width: 100%;
        font-size: 12px;
    }

    #carSpecificFilters,
    #propertySpecificFilters,
    #workSpecificFilters {
        padding: 5px;
    }

    select[multiple] {
        min-height: 60px;
        font-size: 12px;
    }
}

@media (max-width: 480px) {
    .productsContainer {
        grid-template-columns: 1fr; 
    }

}
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <script src="/shared.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.js" integrity="sha512-UOJe4paV6hYWBnS0c9GnIRH8PLm2nFK22uhfAvsTIqd3uwnWsVri1OPn5fJYdLtGY3wB11LGHJ4yPU1WFJeBYQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <div class="filter-container" style="margin-bottom: 20px; padding-left: 25px;">
        <label for="priceFilter" data-i18n="filter.sorter_etter">Sort By:</label>
        <select id="priceFilter" onchange="applyFilters()">
            <option value="asc" data-i18n="filter.lavest_pris">Lowest Price</option>
            <option value="desc" data-i18n="filter.høyest_pris">Highest Price</option>
            <option value="" data-i18n="filter.alle">All</option>
        </select>
        <label for="dateFilter" data-i18n="filter.utgitt">Date:</label>
        <select id="dateFilter" onchange="applyFilters()">
            <option value="" data-i18n="filter.alle">All</option>
            <option value="desc" data-i18n="filter.nylige">New</option>
            <option value="asc" data-i18n="filter.eldre">Old</option>
        </select>
        <div id="subcategoryFilterContainer" style="display: none;">
            <label for="subCategoryFilter" data-i18n="form.category">Categori:</label>
            <select id="subCategoryFilter" onchange="applyFilters()">
                <option value="" data-i18n="filter.alle">All</option>
                <option value="Klær" data-i18n="subkategori.klær">Clothes</option>
                <option value="Elektronikk" data-i18n="subkategori.elektronikk">Electronics</option>
                <option value="Hvitvarer" data-i18n="subkategori.hvitvarer">White Goods</option>
                <option value="Møbler" data-i18n="subkategori.møbler">Furniture</option>
                <option value="Annet" data-i18n="subkategori.annet">Else</option>
            </select>
        </div>
        <div class="filter-actions">
            <button id="saveSearchBtn" class="save-search-button">
                <i class="fas fa-save"></i> Save This Search
            </button>
            <button onclick="resetFilters()" class="reset-filters-btn" id="resetFiltersBtn"> <!-- Removed btn and btn-danger classes -->
                ⟳ Reset Filters
            </button>
        </div>
    </div>

    <div class="active-filters-container" id="activeFiltersDisplay" style="margin-bottom: 15px; padding: 10px 20px;">
    <!-- Active filters will be shown here by JS -->
</div>

    <div class="page-container">
        <div class="side-panel">
            <h3 data-i18n="filter.filter_land">Filter by Country</h3>
            <ul class="country-list">
                <!-- Countries will be populated here -->
            </ul>
    
            <h3 id="filterCar">Filter by Car</h3>
            <ul class="car-brand-list" id="carBrandList">
                <!-- Car brands will be populated here -->
            </ul>

            <!-- Car Specific Filters Update -->
        <div id="carSpecificFilters" style="display: none;">
            <div class="filter-section">
                <h4 data-i18n="filter.year_range">Year Range</h4>
                <div class="slider-values"><span id="year-slider-val-min"></span> - <span id="year-slider-val-max"></span></div>
                <div id="year-slider" class="range-slider"></div>
                <!-- Hidden inputs to store values for the form/JS -->
                <input type="hidden" id="yearFrom">
                <input type="hidden" id="yearTo">
            </div>
            <div class="filter-section">
                <h4 data-i18n="filter.mileage_range">Mileage (km)</h4>
                 <div class="slider-values"><span id="mileage-slider-val-min"></span> - <span id="mileage-slider-val-max"></span></div>
                <div id="mileage-slider" class="range-slider"></div>
                <input type="hidden" id="mileageFrom">
                <input type="hidden" id="mileageTo">
            </div>

                <!-- Fuel Type Filter -->
                <div class="filter-section">
                    <h4 data-i18n="filter.fuel_type">Fuel Type</h4>
                    <select id="fuelTypeFilter" multiple>
                        <option value="Petrol" data-i18n="fuel.petrol">Petrol</option>
                        <option value="Diesel" data-i18n="fuel.diesel">Diesel</option>
                        <option value="Hybrid" data-i18n="fuel.hybrid">Hybrid</option>
                        <option value="Electric" data-i18n="fuel.electric">Electric</option>
                        <option value="Other" data-i18n="filter.other">Other</option>
                    </select>
                </div>

                <!-- Transmission Filter -->
                <div class="filter-section">
                    <h4>Transmission</h4>
                    <select id="transmissionFilter" multiple>
                        <option value="Manual">Manual</option>
                        <option value="Automatic">Automatic</option>
                    </select>
                </div>
            </div>

            <!-- Property Specific Filters Update -->
            <div id="propertySpecificFilters" style="display: none;">
                <!-- Property Type Filter -->
                <div class="filter-section">
                    <h4>Property Type</h4>
                    <select id="propertyTypeFilter" multiple>
                        <option value="Apartment">Apartment</option>
                        <option value="House">House</option>
                        <option value="Cabin">Cabin</option>
                        <option value="Townhouse">Townhouse</option>
                        <option value="Commercial">Commercial</option>
                    </select>
                </div>

                <div class="filter-section">
                <h4>Size (m²)</h4>
                 <div class="slider-values"><span id="size-slider-val-min"></span> - <span id="size-slider-val-max"></span></div>
                <div id="size-slider" class="range-slider"></div>
                <input type="hidden" id="sizeSqmFrom">
                <input type="hidden" id="sizeSqmTo">
            </div>
             <div class="filter-section">
                <h4>Number of Rooms</h4>
                 <div class="slider-values"><span id="rooms-slider-val-min"></span> - <span id="rooms-slider-val-max"></span></div>
                <div id="rooms-slider" class="range-slider"></div>
                <input type="hidden" id="numRoomsFrom">
                <input type="hidden" id="numRoomsTo">
            </div>
            <div class="filter-section">
                <h4>Number of Bathrooms</h4>
                <div class="slider-values"><span id="bathrooms-slider-val-min"></span> - <span id="bathrooms-slider-val-max"></span></div>
                <div id="bathrooms-slider" class="range-slider"></div>
                <input type="hidden" id="numBathroomsFrom">
                <input type="hidden" id="numBathroomsTo">
            </div>

                <!-- Energy Class Filter -->
                <div class="filter-section">
                    <h4>Energy Class</h4>
                    <select id="energyClassFilter" multiple>
                        <option value="A">A</option>
                        <option value="B">B</option>
                        <option value="C">C</option>
                        <option value="D">D</option>
                        <option value="E">E</option>
                        <option value="F">F</option>
                        <option value="G">G</option>
                    </select>
                </div>
            </div>

            <!-- Add Work Specific Filters -->
            <div id="workSpecificFilters" style="display: none;">
                <!-- Employment Type Filter -->
                <div class="filter-section">
                    <h4>Employment Type</h4>
                    <select id="employmentTypeFilter" multiple>
                        <option value="Full-time">Full-time</option>
                        <option value="Part-time">Part-time</option>
                        <option value="Contract">Contract</option>
                        <option value="Temporary">Temporary</option>
                        <option value="Internship">Internship</option>
                    </select>
                </div>

                <!-- Salary Range Filter -->
                <div class="filter-section">
                    <h4>Salary Range (NOK)</h4>
                    <div class="range-inputs">
                        <input type="number" id="salaryFrom" placeholder="From" min="0">
                        <input type="number" id="salaryTo" placeholder="To">
                    </div>
                </div>

                <!-- Application Deadline Filter -->
                <div class="filter-section">
                    <h4>Application Deadline</h4>
                    <div class="date-input">
                        <input type="date" id="deadlineDate">
                    </div>
                </div>
            </div>
        </div>

        <div class="productsContainer" id="productsContainer">
            <!-- Skeleton loading will be shown here -->
        </div>
    </div>


    <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

    <div class="toast-container" id="toastContainer"></div>
    <div class="back-to-top" id="backToTop">
        <i class="fas fa-arrow-up"></i>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        console.log("Initializing TorgetKat page...");      

        // Add debouncing utility
        const debounce = (func, wait) => {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        };

        // Pagination variables
        let currentPage = 1;
        let isLoading = false;
        let hasMore = true;
        const limit = 20;

        // Current filter state
        let currentFilters = {
            priceOrder: '',
            selectedCountries: [],
            dateOrder: '',
            subCategory: '',
            selectedCarBrands: [],
            selectedCities: [],
            yearRange: { from: null, to: null },
            mileageRange: { from: null, to: null },
            fuelTypes: [],
            transmissionTypes: [],
            propertyTypes: [],
            sizeRange: { from: null, to: null },
            roomsRange: { from: null, to: null },
            bathroomsRange: { from: null, to: null },
            energyClasses: [],
            employmentTypes: [],
            salaryRange: { from: null, to: null },
            applicationDeadline: null
        };

        // Store event listeners for cleanup
        const eventListeners = new Set();

        // Function to safely add event listeners
        const addSafeEventListener = (element, event, handler) => {
            element.addEventListener(event, handler);
            eventListeners.add({ element, event, handler });
        };

        // Cleanup function
        function cleanup() {
            // Remove all stored event listeners
            eventListeners.forEach(({ element, event, handler }) => {
                element.removeEventListener(event, handler);
            });
            eventListeners.clear();

            // Cleanup lazy loader
            if (window.lazyLoader && window.lazyLoader.observer) {
                window.lazyLoader.observer.disconnect();
            }

            // Cleanup skeleton loader
            if (window.skeletonLoader) {
                window.skeletonLoader = null;
            }

            // Cleanup toast container
            const toastContainer = document.getElementById('toast-container');
            if (toastContainer) {
                toastContainer.innerHTML = '';
            }
        }

        // Add cleanup on page unload
        window.addEventListener('beforeunload', cleanup);

        // Update existing event listeners to use safe version
        const backToTopButton = document.getElementById('backToTop');
        if (backToTopButton) {
            const handleScroll = () => {
                if (window.scrollY > 300) {
                    backToTopButton.classList.add('visible');
                } else {
                    backToTopButton.classList.remove('visible');
                }
            };
            addSafeEventListener(window, 'scroll', handleScroll);
            addSafeEventListener(backToTopButton, 'click', () => {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
        }

        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function displayProducts(products, loadMore = false) {
            const container = document.getElementById('productsContainer');
            if (!loadMore) {
                container.innerHTML = '';
            }

            if (!products || products.length === 0) {
                if (!loadMore) {
                    container.innerHTML = '<p class="no-products">No products found</p>';
                }
                return;
            }

            products.forEach(product => {
                const productElement = createProductElement(product);
                container.appendChild(productElement);
            });
        }

        function createProductElement(product) {
            const isJob = product.category === 'Jobb';
            const isCar = product.category === 'Bil';
            const isProperty = product.category === 'Eiendom';

            const div = document.createElement('div');
            div.className = 'product';
            div.setAttribute('role', 'article');
            div.setAttribute('aria-label', isJob ? product.JobTitle : 
                isCar ? `${product.brand_name} ${product.model_name}` : 
                product.ProductName);
            div.setAttribute('tabindex', '0');

            // Handle images
            const images = product.Images ? product.Images.split(',') : [];
            const firstImage = images.length > 0 ? images[0].trim() : null;
            const imageUrl = firstImage ? `/uploads/${firstImage}` : '/images/default-product.png';

            div.innerHTML = `
                <img src="${imageUrl}" 
                     alt="${isJob ? product.JobTitle : 
                        isCar ? `${product.brand_name} ${product.model_name}` : 
                        product.ProductName}" 
                     class="product-image" 
                     onerror="this.src='/images/default-product.png'"
                     loading="lazy"
                     aria-hidden="true">
                <div>
                    <h3>
                        ${isJob ? product.JobTitle || 'No title' : 
                        isCar ? 
                            `${product.brand_name || 'Unknown brand'} ${product.model_name || ''}`.trim() : 
                            product.ProductName || 'Unnamed product'}
                        ${product.Sold ? `<span class="sold-label" data-i18n="product_details.sold">(Sold)</span>` : ''}
                        <button class="fas fa-heart favorite-icon" 
                                data-product-id="${product.ProductdID}"
                                aria-label="${product.isFavorited ? 'Remove from favorites' : 'Add to favorites'}"
                                aria-pressed="${product.isFavorited ? 'true' : 'false'}">
                        </button>
                    </h3>
                    ${isCar ? `<p class="custom-title">${product.ProductName}</p>` : ''}
                    ${isJob ? `
                        <p><strong data-i18n="form.company_name">Company:</strong> ${product.CompanyName || 'Not specified'}</p>
                        <p><strong data-i18n="form.employment_type">Employment Type:</strong> ${product.EmploymentType || 'Not specified'}</p>
                    ` : ''}
                    ${isCar ? `
                        <p><strong data-i18n="form.year">Year:</strong> ${product.Year || 'N/A'}</p>
                        <p><strong data-i18n="form.mileage">Mileage:</strong> ${product.Mileage ? `${product.Mileage} km` : 'N/A'}</p>
                        <p><strong data-i18n="form.fuel_type">Fuel Type:</strong> ${product.FuelType || 'Not specified'}</p>
                    ` : ''}
                    ${isProperty ? `
                        <p><strong data-i18n="form.price">Price:</strong> ${product.Price ? `$${product.Price.toLocaleString('en-US')}` : 'Contact for price'}</p>
                        <p><strong data-i18n="form.property_type">Type:</strong> ${product.PropertyType}</p>
                        <p><strong data-i18n="property.size">Size:</strong> ${product.SizeSqm} m²</p>
                    ` : ''}
                    <p><strong data-i18n="form.location">Location:</strong> ${ 
                        (product.cityName || product.Location || 'Not specified') + 
                        (product.country ? `, ${product.country}` : '')
                    }</p>
                    ${!isJob && !isCar && !isProperty ? `<p><strong data-i18n="form.price">Price:</strong> ${product.Price ? `${product.Price.toLocaleString('en-US')} $` : 'Contact for price'}</p>` : ''}
                </div>
            `;

            // Add keyboard navigation
            div.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    window.location.href = `/productDetails?productdID=${product.ProductdID}`;
                }
            });

            // Add click event for the entire product
            div.addEventListener('click', (e) => {
                if (!e.target.classList.contains('favorite-icon')) {
                    window.location.href = `/productDetails?productdID=${product.ProductdID}`;
                }
            });

            // Add click event for the favorite icon
            const favoriteIcon = div.querySelector('.favorite-icon');
            if (favoriteIcon) {
                favoriteIcon.addEventListener('click', async (e) => {
                    e.stopPropagation();
                    const productdID = e.target.getAttribute('data-product-id');
                    const isFavorited = e.target.classList.contains('favorited');

                    try {
                        const response = await fetch('/api/favorites', {
                            method: 'POST',
                            credentials: 'include',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ productdID }),
                        });

                        if (response.ok) {
                            e.target.classList.toggle('favorited');
                            e.target.style.color = isFavorited ? '#ccc' : '#ff4757';
                            window.toast.show(
                                isFavorited ? 'Product removed from favorites' : 'Product added to favorites',
                                'success'
                            );
                        } else {
                            window.toast.show('Failed to update favorites', 'error');
                        }
                    } catch (error) {
                        console.error("Error handling favorite:", error);
                        window.toast.show('An error occurred', 'error');
                    }
                });
            }

            return div;
        }

        function fetchProducts(loadMore = false, cacheBuster = null) {
            if (isLoading || (!loadMore && !hasMore)) return;
            
            showLoading();
            isLoading = true;

            if (!loadMore) {
                showSkeletonLoading();
            }

            // Calculate the page and offset
            const newPage = loadMore ? currentPage + 1 : 1;
            const offset = (newPage - 1) * limit;

            const urlParams = new URLSearchParams(window.location.search);
            const category = urlParams.get('category') || 'default';


            // Build API URL with current filters
            let apiUrl = `/api/products?category=${category}&limit=${limit}&offset=${offset}`;
            if (cacheBuster) {
                apiUrl += `&_=${cacheBuster}`;
            }
            if (currentFilters.subCategory) apiUrl += `&subCategory=${currentFilters.subCategory}`;
            if (currentFilters.priceOrder) apiUrl += `&sortPrice=${currentFilters.priceOrder}`;
            if (currentFilters.dateOrder) apiUrl += `&sortDate=${currentFilters.dateOrder}`;
            if (currentFilters.selectedCarBrands.length) apiUrl += `&carBrand=${currentFilters.selectedCarBrands.join(',')}`;
            if (currentFilters.selectedCountries.length) {
              apiUrl += `&countries=${encodeURIComponent(currentFilters.selectedCountries.join(','))}`;
            }
            if (currentFilters.selectedCities.length) {
              apiUrl += `&cities=${encodeURIComponent(currentFilters.selectedCities.join(','))}`;
            }

            // Add car specific filters
            if (category === 'Bil') {
                if (currentFilters.yearRange.from) {
                    apiUrl += `&yearFrom=${currentFilters.yearRange.from}`;
                }
                if (currentFilters.yearRange.to) {
                    apiUrl += `&yearTo=${currentFilters.yearRange.to}`;
                }
                if (currentFilters.mileageRange.from) {
                    apiUrl += `&mileageFrom=${currentFilters.mileageRange.from}`;
                }
                if (currentFilters.mileageRange.to) {
                    apiUrl += `&mileageTo=${currentFilters.mileageRange.to}`;
                }
                if (currentFilters.fuelTypes.length) {
                    apiUrl += `&fuelTypes=${currentFilters.fuelTypes.join(',')}`;
                }
                if (currentFilters.transmissionTypes.length) {
                    apiUrl += `&transmissionTypes=${currentFilters.transmissionTypes.join(',')}`;
                }
            }

            // Add property specific filters
            if (category === 'Eiendom') {
                if (currentFilters.propertyTypes.length) {
                    apiUrl += `&propertyType=${encodeURIComponent(currentFilters.propertyTypes.join(','))}`;
                }
                if (currentFilters.sizeRange.from) {
                    apiUrl += `&sizeSqmFrom=${encodeURIComponent(currentFilters.sizeRange.from)}`;
                }
                if (currentFilters.sizeRange.to) {
                    apiUrl += `&sizeSqmTo=${encodeURIComponent(currentFilters.sizeRange.to)}`;
                }
                if (currentFilters.roomsRange.from) {
                    apiUrl += `&numRoomsFrom=${encodeURIComponent(currentFilters.roomsRange.from)}`;
                }
                if (currentFilters.roomsRange.to) {
                    apiUrl += `&numRoomsTo=${encodeURIComponent(currentFilters.roomsRange.to)}`;
                }
                if (currentFilters.bathroomsRange.from) {
                    apiUrl += `&numBathroomsFrom=${encodeURIComponent(currentFilters.bathroomsRange.from)}`;
                }
                if (currentFilters.bathroomsRange.to) {
                    apiUrl += `&numBathroomsTo=${encodeURIComponent(currentFilters.bathroomsRange.to)}`;
                }
                if (currentFilters.energyClasses.length) {
                    apiUrl += `&energyClass=${encodeURIComponent(currentFilters.energyClasses.join(','))}`;
                }
            }

            // Add work specific filters
            if (category === 'Jobb') {
                if (currentFilters.employmentTypes.length) {
                    apiUrl += `&employmentTypes=${currentFilters.employmentTypes.join(',')}`;
                }
                if (currentFilters.salaryRange.from) {
                    apiUrl += `&salaryFrom=${currentFilters.salaryRange.from}`;
                }
                if (currentFilters.salaryRange.to) {
                    apiUrl += `&salaryTo=${currentFilters.salaryRange.to}`;
                }
                if (currentFilters.applicationDeadline) {
                    apiUrl += `&deadline=${currentFilters.applicationDeadline}`;
                }
            }

            // Show loading state
            const container = document.getElementById('productsContainer');
            const loadButton = document.getElementById('loadMoreButton');
            if (!loadMore) container.innerHTML = '<p>Loading products...</p>';
            if (loadButton) {
                loadButton.disabled = true;
                loadButton.textContent = 'Loading...';
            }

            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                     hasMore = data.products.length >= limit;
                     displayProducts(data.products, loadMore); // Products are displayed here

                     // *** ADD FAVORITE CHECK HERE ***
                     initializeFavorites(); // Check favorite status after products are in the DOM

                     // Reposition the load more button to the bottom of the container
                     const loadButton = document.getElementById('loadMoreButton');
                     if (loadButton) {
                         const buttonWrapper = loadButton.parentElement;
                         document.getElementById('productsContainer').appendChild(buttonWrapper);
                     }

                     // Update currentPage after successful fetch
                    currentPage = newPage;
                    isLoading = false;

                    // Initialize lazy loading for new images
                    if (window.lazyLoader) window.lazyLoader.observe();

                    // Update load more button visibility and state
                    if (document.getElementById('loadMoreButton')) {
                     document.getElementById('loadMoreButton').style.display = hasMore ? 'block' : 'none';
                     document.getElementById('loadMoreButton').disabled = false;
                     document.getElementById('loadMoreButton').textContent = 'Load More';
                 } else {
                     addLoadMoreButton();
                 }
            })
                .catch(error => {
                    console.error("Error fetching products:", error);
                    isLoading = false;
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `
                        <div class="error-message">
                            <p>Error loading products. Please try again.</p>
                            <button onclick="fetchProducts()" class="retry-button">Retry</button>
                        </div>
                    `;
                    window.toast.show('Error loading products. Please try again.', 'error');
                })
                .finally(() => {
                    hideLoading();
                });
        }



    // --- Slider Configuration ---
const sliderConfigs = {
    'year-slider': { range: { min: 1980, max: new Date().getFullYear() }, start: [1980, new Date().getFullYear()], step: 1, inputs: ['yearFrom', 'yearTo'], format: { to: v => Math.round(v), from: v => Math.round(v) } },
    'mileage-slider': { range: { min: 0, max: 500000 }, start: [0, 500000], step: 1000, inputs: ['mileageFrom', 'mileageTo'], format: { to: v => Math.round(v), from: v => Math.round(v) } },
    'size-slider': { range: { min: 10, max: 1000 }, start: [10, 1000], step: 10, inputs: ['sizeSqmFrom', 'sizeSqmTo'], format: { to: v => Math.round(v), from: v => Math.round(v) } },
    'rooms-slider': { range: { min: 1, max: 10 }, start: [1, 10], step: 1, inputs: ['numRoomsFrom', 'numRoomsTo'], format: { to: v => Math.round(v), from: v => Math.round(v) } },
    'bathrooms-slider': { range: { min: 1, max: 5 }, start: [1, 5], step: 1, inputs: ['numBathroomsFrom', 'numBathroomsTo'], format: { to: v => Math.round(v), from: v => Math.round(v) } }
    // Add more sliders here if needed
};

// --- Initialize Sliders Function ---
function initializeSliders() {
    Object.keys(sliderConfigs).forEach(sliderId => {
        const sliderElement = document.getElementById(sliderId);
        const config = sliderConfigs[sliderId];
        const minValDisplay = document.getElementById(`${sliderId}-val-min`);
        const maxValDisplay = document.getElementById(`${sliderId}-val-max`);
        const inputMin = document.getElementById(config.inputs[0]);
        const inputMax = document.getElementById(config.inputs[1]);

        if (sliderElement && inputMin && inputMax) {
            noUiSlider.create(sliderElement, {
                start: config.start,
                connect: true, // Fills the range between handles
                step: config.step,
                range: config.range,
                format: config.format, // Use formatting for whole numbers
                behaviour: 'tap-drag',
                tooltips: false // We'll use separate display elements
            });

            // Update display and hidden inputs when slider changes
            sliderElement.noUiSlider.on('update', (values) => {
                const [minVal, maxVal] = values;
                if (minValDisplay) minValDisplay.textContent = minVal;
                if (maxValDisplay) maxValDisplay.textContent = maxVal;
                inputMin.value = minVal; // Update hidden input
                inputMax.value = maxVal; // Update hidden input
            });

             // Trigger applyFilters ONLY when the user finishes sliding ('change' event)
             sliderElement.noUiSlider.on('change', () => {
                 // Update currentFilters state immediately on change for display purposes
                 updateCurrentFiltersFromUI();
                 // Debounce the actual API call
                 debouncedApplyFilters();
             });

             // Set initial display values
             const initialValues = sliderElement.noUiSlider.get();
             if (minValDisplay) minValDisplay.textContent = initialValues[0];
             if (maxValDisplay) maxValDisplay.textContent = initialValues[1];
        }
    });
}

        function resetFilters() {  
            // 1. Reset UI elements
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });

            // 2. Hide city lists instead of clearing them
            document.querySelectorAll('.city-list').forEach(list => {
                list.style.display = 'none'; 
            });
            
            // Reset dropdowns
            document.getElementById('priceFilter').value = 'asc';
            document.getElementById('dateFilter').value = '';

            // Reset category-specific filters
            const urlParams = new URLSearchParams(window.location.search);
            const category = urlParams.get('category') || 'default';

            // Reset Torget filters
            if (category === 'Torget') {
                document.getElementById('subCategoryFilter').value = '';
            }

            // Reset Car filters
            if (category === 'Bil') {
                document.getElementById('yearFrom').value = '';
                document.getElementById('yearTo').value = '';
                document.getElementById('mileageFrom').value = '';
                document.getElementById('mileageTo').value = '';
                document.getElementById('fuelTypeFilter').selectedIndex = -1;
                document.getElementById('transmissionFilter').selectedIndex = -1;
            }

            // Reset Property filters
            if (category === 'Eiendom') {
                document.getElementById('propertyTypeFilter').selectedIndex = -1;
                document.getElementById('sizeFrom').value = '';
                document.getElementById('sizeTo').value = '';
                document.getElementById('roomsFrom').value = '';
                document.getElementById('roomsTo').value = '';
                document.getElementById('bathroomsFrom').value = '';
                document.getElementById('bathroomsTo').value = '';
                document.getElementById('energyClassFilter').selectedIndex = -1;
            }

            // Reset Work filters
            if (category === 'Jobb') {
                document.getElementById('employmentTypeFilter').selectedIndex = -1;
                document.getElementById('salaryFrom').value = '';
                document.getElementById('salaryTo').value = '';
                document.getElementById('deadlineDate').value = '';
            }

             // Reset multi-selects
            ['fuelTypeFilter', 'transmissionFilter', 'propertyTypeFilter', 'energyClassFilter', 'employmentTypeFilter'].forEach(id => {
                const selectElement = document.getElementById(id);
                if (selectElement) {
                     Array.from(selectElement.options).forEach(option => option.selected = false);
                }
            });
             // Reset date input
            const deadlineDate = document.getElementById('deadlineDate');
            if (deadlineDate) deadlineDate.value = '';


            // --- START: ADD THIS SECTION TO RESET SLIDERS ---
            Object.keys(sliderConfigs).forEach(sliderId => {
                const sliderElement = document.getElementById(sliderId);
                if (sliderElement && sliderElement.noUiSlider) { // Check if slider exists and is initialized
                    // Reset the slider to its initial start values
                    sliderElement.noUiSlider.set(sliderConfigs[sliderId].start);
                    // Manually update hidden inputs immediately after reset
                    const config = sliderConfigs[sliderId];
                    const inputMin = document.getElementById(config.inputs[0]);
                    const inputMax = document.getElementById(config.inputs[1]);
                    if (inputMin) inputMin.value = sliderConfigs[sliderId].start[0];
                    if (inputMax) inputMax.value = sliderConfigs[sliderId].start[1];
                }
            });

            // 3. Reset internal state
            currentFilters = {
                priceOrder: document.getElementById('priceFilter').value, // Get the reset value
                dateOrder: '',
                subCategory: '',
                selectedCountries: [],
                selectedCarBrands: [],
                selectedCities: [],
                // Reset ranges in state using the default slider values
                yearRange: { from: sliderConfigs['year-slider'].start[0], to: sliderConfigs['year-slider'].start[1] },
                mileageRange: { from: sliderConfigs['mileage-slider'].start[0], to: sliderConfigs['mileage-slider'].start[1] },
                fuelTypes: [],
                transmissionTypes: [],
                propertyTypes: [],
                sizeRange: { from: sliderConfigs['size-slider'].start[0], to: sliderConfigs['size-slider'].start[1] },
                roomsRange: { from: sliderConfigs['rooms-slider'].start[0], to: sliderConfigs['rooms-slider'].start[1] },
                bathroomsRange: { from: sliderConfigs['bathrooms-slider'].start[0], to: sliderConfigs['bathrooms-slider'].start[1] },
                energyClasses: [],
                employmentTypes: [],
                salaryRange: { from: null, to: null }, // Assuming no salary slider yet
                applicationDeadline: null
            };

            // 4. Reset pagination
            currentPage = 1;
            hasMore = true;
            isLoading = false; 

            // 5. Clear container and force fresh load
            const container = document.getElementById('productsContainer');
            container.innerHTML = '<p>Loading products...</p>';
            showSkeletonLoading(); // Show skeleton immediately

            // --- Update Active Filters Display ---
             updateActiveFiltersDisplay(); // Update tags to show none are active
            
            // 6. Fetch with cache busting
            fetchProducts(false, Date.now());
        }

        window.resetFilters = resetFilters;
        window.fetchProducts = fetchProducts;

        function addLoadMoreButton() {
            const existingButton = document.getElementById('loadMoreButton');
            if (existingButton) return;

            const button = document.createElement('button');
            button.id = 'loadMoreButton';
            button.className = 'load-more-btn';
            button.textContent = 'Load More';
            button.style.display = hasMore ? 'block' : 'none';
             button.addEventListener('click', () => {
                fetchProducts(true);
            });
            
            const container = document.getElementById('productsContainer');
            const buttonWrapper = document.createElement('div');
            buttonWrapper.style.textAlign = 'center';
            buttonWrapper.style.width = '100%';
            buttonWrapper.appendChild(button);
            container.appendChild(buttonWrapper);
        }

        function applyFilters() {
            clearTimeout(filterTimeout);
            filterTimeout = setTimeout(() => {
                 console.log("Applying filters..."); // Debug log
                // --- Gather Filter Values ---
                updateCurrentFiltersFromUI(); // Use helper function

                 // Reset pagination for new filter set
                currentPage = 1;
                hasMore = true;

                // Clear container and fetch
                document.getElementById('productsContainer').innerHTML = ''; // Clear only products
                fetchProducts(); // Call your existing fetch function

                 // --- Update Active Filters Display ---
                updateActiveFiltersDisplay(); // Render the active filter tags

                // Get values from car filters
                const yearFrom = document.getElementById('yearFrom')?.value;
                const yearTo = document.getElementById('yearTo')?.value;
                const mileageFrom = document.getElementById('mileageFrom')?.value;
                const mileageTo = document.getElementById('mileageTo')?.value;
                const fuelTypeSelect = document.getElementById('fuelTypeFilter');
                const transmissionSelect = document.getElementById('transmissionFilter');

                // Get values from property filters
                const propertyTypeSelect = document.getElementById('propertyTypeFilter');
                const sizeFrom = document.getElementById('sizeFrom')?.value;
                const sizeTo = document.getElementById('sizeTo')?.value;
                const roomsFrom = document.getElementById('roomsFrom')?.value;
                const roomsTo = document.getElementById('roomsTo')?.value;
                const bathroomsFrom = document.getElementById('bathroomsFrom')?.value;
                const bathroomsTo = document.getElementById('bathroomsTo')?.value;
                const energyClassSelect = document.getElementById('energyClassFilter');

                // Get values from work filters
                const employmentTypeSelect = document.getElementById('employmentTypeFilter');
                const salaryFrom = document.getElementById('salaryFrom')?.value;
                const salaryTo = document.getElementById('salaryTo')?.value;
                const deadlineDate = document.getElementById('deadlineDate')?.value;

                currentFilters = {
                    priceOrder: document.getElementById('priceFilter').value,
                    dateOrder: document.getElementById('dateFilter').value,
                    subCategory: document.getElementById('subCategoryFilter')?.value || '',
                    selectedCountries: Array.from(
                        document.querySelectorAll('.country-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    selectedCities: Array.from(
                        document.querySelectorAll('.city-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    selectedCarBrands: Array.from(
                        document.querySelectorAll('.car-brand-list input[type="checkbox"]:checked')
                    ).map(checkbox => checkbox.value),
                    yearRange: {
                        from: yearFrom || null,
                        to: yearTo || null
                    },
                    mileageRange: {
                        from: mileageFrom || null,
                        to: mileageTo || null
                    },
                    fuelTypes: Array.from(fuelTypeSelect?.selectedOptions || []).map(option => option.value),
                    transmissionTypes: Array.from(transmissionSelect?.selectedOptions || []).map(option => option.value),
                    propertyTypes: Array.from(propertyTypeSelect?.selectedOptions || []).map(option => option.value),
                    sizeRange: {
                        from: sizeFrom || null,
                        to: sizeTo || null
                    },
                    roomsRange: {
                        from: roomsFrom || null,
                        to: roomsTo || null
                    },
                    bathroomsRange: {
                        from: bathroomsFrom || null,
                        to: bathroomsTo || null
                    },
                    energyClasses: Array.from(energyClassSelect?.selectedOptions || []).map(option => option.value),
                    employmentTypes: Array.from(employmentTypeSelect?.selectedOptions || []).map(option => option.value),
                    salaryRange: {
                        from: salaryFrom || null,
                        to: salaryTo || null
                    },
                    applicationDeadline: deadlineDate || null
                };
                // Force reset pagination
                currentPage = 1;
                hasMore = true;
                document.getElementById('productsContainer').innerHTML = '<p>Loading products...</p>';
                fetchProducts();
            }, DEBOUNCE_DELAY);
        }

        // Define debouncedApplyFilters ONCE, AFTER debounce and applyFilters
        const debouncedApplyFilters = debounce(applyFilters, 300); // Or your delay

        // Add event listeners to all filter inputs
        const filterInputs = document.querySelectorAll('input[type="number"], input[type="date"], select');
        filterInputs.forEach(input => {
            input.addEventListener('input', debouncedApplyFilters);
            input.addEventListener('change', debouncedApplyFilters);
        });

        let filterTimeout;
        const DEBOUNCE_DELAY = 300; // ms

        // --- NEW: Helper to Update currentFilters Object from UI ---
function updateCurrentFiltersFromUI() {
     const urlParams = new URLSearchParams(window.location.search);
     const category = urlParams.get('category') || 'default';

     currentFilters = {
        priceOrder: document.getElementById('priceFilter')?.value || '',
        dateOrder: document.getElementById('dateFilter')?.value || '',
        subCategory: category === 'Torget' ? document.getElementById('subCategoryFilter')?.value || '' : '',
        selectedCountries: Array.from(
            document.querySelectorAll('.country-list > li > div > input[type="checkbox"]:checked')
        ).map(cb => cb.value),
        selectedCities: Array.from(document.querySelectorAll('.city-list input[type="checkbox"]:checked')).map(cb => cb.value),
        // Car Filters
        selectedCarBrands: category === 'Bil' ? Array.from(document.querySelectorAll('.car-brand-list input[type="checkbox"]:checked')).map(cb => cb.value) : [],
        yearRange: { from: document.getElementById('yearFrom')?.value || null, to: document.getElementById('yearTo')?.value || null },
        mileageRange: { from: document.getElementById('mileageFrom')?.value || null, to: document.getElementById('mileageTo')?.value || null },
        fuelTypes: category === 'Bil' ? Array.from(document.getElementById('fuelTypeFilter')?.selectedOptions || []).map(opt => opt.value) : [],
        transmissionTypes: category === 'Bil' ? Array.from(document.getElementById('transmissionFilter')?.selectedOptions || []).map(opt => opt.value) : [],
        // Property Filters
        propertyTypes: category === 'Eiendom' ? Array.from(document.getElementById('propertyTypeFilter')?.selectedOptions || []).map(opt => opt.value) : [],
        sizeRange: { from: document.getElementById('sizeSqmFrom')?.value || null, to: document.getElementById('sizeSqmTo')?.value || null },
        roomsRange: { from: document.getElementById('numRoomsFrom')?.value || null, to: document.getElementById('numRoomsTo')?.value || null },
        bathroomsRange: { from: document.getElementById('numBathroomsFrom')?.value || null, to: document.getElementById('numBathroomsTo')?.value || null },
        energyClasses: category === 'Eiendom' ? Array.from(document.getElementById('energyClassFilter')?.selectedOptions || []).map(opt => opt.value) : [],
        // Work Filters (Example - Adjust based on actual IDs if different)
        employmentTypes: category === 'Jobb' ? Array.from(document.getElementById('employmentTypeFilter')?.selectedOptions || []).map(opt => opt.value) : [],
        salaryRange: { from: document.getElementById('salaryFrom')?.value || null, to: document.getElementById('salaryTo')?.value || null },
        applicationDeadline: category === 'Jobb' ? document.getElementById('deadlineDate')?.value || null : null
    };
    // Clean null/empty values from range objects if needed by backend
    Object.keys(currentFilters).forEach(key => {
        if (typeof currentFilters[key] === 'object' && currentFilters[key] !== null && !Array.isArray(currentFilters[key])) {
            if (currentFilters[key].from === null || currentFilters[key].from === '') delete currentFilters[key].from;
            if (currentFilters[key].to === null || currentFilters[key].to === '') delete currentFilters[key].to;
        }
    });
    console.log("Updated Filters:", currentFilters); // Debug log
}


// --- NEW: Function to Update Active Filters Display ---
function updateActiveFiltersDisplay() {
    const displayContainer = document.getElementById('activeFiltersDisplay');
    if (!displayContainer) return;
    displayContainer.innerHTML = ''; // Clear previous tags

    let hasActiveFilters = false; // Flag to check if any filter is set

    // --- GET CURRENT CATEGORY ---
    const urlParams = new URLSearchParams(window.location.search);
    const currentCategory = urlParams.get('category') || 'default'; // Get active category

    // --- START: Subcategory Translation Map ---
    const subCategoryTranslations = {
        'Klær': 'Clothes',
        'Elektronikk': 'Electronics',
        'Hvitvarer': 'White Goods',
        'Møbler': 'Furniture',
        'Annet': 'Else'
        // Add more translations if needed
    };
    // --- END: Subcategory Translation Map ---


    const addFilterTag = (label, value, removeCallback) => {
        hasActiveFilters = true;
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `${label}: <strong>${value}</strong> <button class="remove-filter-btn" aria-label="Remove ${label} filter">×</button>`;
        tag.querySelector('.remove-filter-btn').addEventListener('click', removeCallback);
        displayContainer.appendChild(tag);
    };

    // --- Check and Add Tags for Each Filter Type (with Category Check) ---

    // Price Sort (Applies to all categories with products)
    if (currentFilters.priceOrder) {
        const priceText = currentFilters.priceOrder === 'asc' ? 'Lowest First' : 'Highest First';
        addFilterTag('Sort Price', priceText, () => {
            document.getElementById('priceFilter').value = ''; // Or set to a default
            applyFilters();
        });
    }
    // Date Sort (Applies to all categories with products)
    if (currentFilters.dateOrder) {
        const dateText = currentFilters.dateOrder === 'asc' ? 'Oldest First' : 'Newest First';
         addFilterTag('Sort Date', dateText, () => {
            document.getElementById('dateFilter').value = '';
            applyFilters();
        });
    }

    // SubCategory (Only show if category is 'Torget')
    if (currentCategory === 'Torget' && currentFilters.subCategory) {
        // --- START: Use translated value ---
        const displayValue = subCategoryTranslations[currentFilters.subCategory] || currentFilters.subCategory;
        addFilterTag('Subcategory', displayValue, () => {
        // --- END: Use translated value ---
            document.getElementById('subCategoryFilter').value = '';
            applyFilters();
        });
    }

    // Countries (Applies to all)
    currentFilters.selectedCountries.forEach(country => {
        addFilterTag('Country', country, () => {
            const cb = document.getElementById(country);
             if(cb) cb.checked = false;
            // Also uncheck and hide cities for this country
            const cityList = document.getElementById(`${country}-cities`);
            if (cityList) {
                cityList.querySelectorAll('input[type="checkbox"]').forEach(cityCb => cityCb.checked = false);
                cityList.style.display = 'none';
            }
            applyFilters();
        });
    });

    // Cities (Applies to all)
     currentFilters.selectedCities.forEach(cityId => {
        const cityCheckbox = document.getElementById(`city_${cityId}`);
        const cityName = cityCheckbox ? cityCheckbox.nextElementSibling.textContent : `City ${cityId}`;
        addFilterTag('City', cityName, () => {
             if(cityCheckbox) cityCheckbox.checked = false;
            applyFilters();
        });
    });

    // --- Category Specific Tags ---

    // Car Filters (Only show if category is 'Bil')
    if (currentCategory === 'Bil') {
        // Car Brands
        currentFilters.selectedCarBrands.forEach(brandId => {
            const brandCheckbox = document.getElementById(`brand_${brandId}`);
            const brandName = brandCheckbox ? brandCheckbox.nextElementSibling.textContent : `Brand ${brandId}`;
            addFilterTag('Brand', brandName, () => {
                if(brandCheckbox) brandCheckbox.checked = false;
                applyFilters();
            });
        });
        // Year Range
        if (currentFilters.yearRange.from !== sliderConfigs['year-slider'].start[0] || currentFilters.yearRange.to !== sliderConfigs['year-slider'].start[1]) {
            const label = `${currentFilters.yearRange.from || sliderConfigs['year-slider'].range.min} - ${currentFilters.yearRange.to || sliderConfigs['year-slider'].range.max}`;
            addFilterTag('Year', label, () => {
                const slider = document.getElementById('year-slider').noUiSlider;
                slider.set(sliderConfigs['year-slider'].start);
                applyFilters();
            });
        }
        // Mileage Range
        if (currentFilters.mileageRange.from !== sliderConfigs['mileage-slider'].start[0] || currentFilters.mileageRange.to !== sliderConfigs['mileage-slider'].start[1]) {
             const label = `${currentFilters.mileageRange.from || sliderConfigs['mileage-slider'].range.min} - ${currentFilters.mileageRange.to || sliderConfigs['mileage-slider'].range.max} km`;
            addFilterTag('Mileage', label, () => {
                document.getElementById('mileage-slider').noUiSlider.set(sliderConfigs['mileage-slider'].start);
                applyFilters();
            });
        }
        // Fuel Types
         if (currentFilters.fuelTypes && currentFilters.fuelTypes.length > 0) {
            addFilterTag('Fuel Types', currentFilters.fuelTypes.join(', '), () => {
                const selectElement = document.getElementById('fuelTypeFilter');
                if (selectElement) Array.from(selectElement.options).forEach(option => option.selected = false);
                applyFilters();
            });
        }
        // Transmission Types
         if (currentFilters.transmissionTypes && currentFilters.transmissionTypes.length > 0) {
            addFilterTag('Transmission', currentFilters.transmissionTypes.join(', '), () => {
                const selectElement = document.getElementById('transmissionFilter');
                if (selectElement) Array.from(selectElement.options).forEach(option => option.selected = false);
                applyFilters();
            });
        }
    } // End of if (currentCategory === 'Bil')

    // Property Filters (Only show if category is 'Eiendom')
    if (currentCategory === 'Eiendom') {
        // Property Types
        if (currentFilters.propertyTypes && currentFilters.propertyTypes.length > 0) {
             addFilterTag('Property Types', currentFilters.propertyTypes.join(', '), () => {
                 const selectElement = document.getElementById('propertyTypeFilter');
                 if (selectElement) Array.from(selectElement.options).forEach(option => option.selected = false);
                 applyFilters();
             });
         }
        // Size Range
        if (currentFilters.sizeRange.from !== sliderConfigs['size-slider'].start[0] || currentFilters.sizeRange.to !== sliderConfigs['size-slider'].start[1]) {
            const label = `${currentFilters.sizeRange.from || sliderConfigs['size-slider'].range.min} - ${currentFilters.sizeRange.to || sliderConfigs['size-slider'].range.max} m²`;
            addFilterTag('Size', label, () => {
                document.getElementById('size-slider').noUiSlider.set(sliderConfigs['size-slider'].start);
                applyFilters();
            });
        }
        // Rooms Range
        if (currentFilters.roomsRange.from !== sliderConfigs['rooms-slider'].start[0] || currentFilters.roomsRange.to !== sliderConfigs['rooms-slider'].start[1]) {
             const label = `${currentFilters.roomsRange.from || sliderConfigs['rooms-slider'].range.min} - ${currentFilters.roomsRange.to || sliderConfigs['rooms-slider'].range.max}`;
            addFilterTag('Rooms', label, () => {
                document.getElementById('rooms-slider').noUiSlider.set(sliderConfigs['rooms-slider'].start);
                applyFilters();
            });
        }
        // Bathrooms Range
        if (currentFilters.bathroomsRange.from !== sliderConfigs['bathrooms-slider'].start[0] || currentFilters.bathroomsRange.to !== sliderConfigs['bathrooms-slider'].start[1]) {
             const label = `${currentFilters.bathroomsRange.from || sliderConfigs['bathrooms-slider'].range.min} - ${currentFilters.bathroomsRange.to || sliderConfigs['bathrooms-slider'].range.max}`;
            addFilterTag('Bathrooms', label, () => {
                document.getElementById('bathrooms-slider').noUiSlider.set(sliderConfigs['bathrooms-slider'].start);
                applyFilters();
            });
        }
        // Energy Classes
         if (currentFilters.energyClasses && currentFilters.energyClasses.length > 0) {
             addFilterTag('Energy Classes', currentFilters.energyClasses.join(', '), () => {
                 const selectElement = document.getElementById('energyClassFilter');
                 if (selectElement) Array.from(selectElement.options).forEach(option => option.selected = false);
                 applyFilters();
             });
         }
    } // End of if (currentCategory === 'Eiendom')

     // Job Filters (Only show if category is 'Jobb')
     if (currentCategory === 'Jobb') {
        // Employment Types
         if (currentFilters.employmentTypes && currentFilters.employmentTypes.length > 0) {
             addFilterTag('Employment Types', currentFilters.employmentTypes.join(', '), () => {
                 const selectElement = document.getElementById('employmentTypeFilter');
                 if (selectElement) Array.from(selectElement.options).forEach(option => option.selected = false);
                 applyFilters();
             });
         }
         // Add Salary Range and Deadline if needed (assuming no sliders for these yet)
         // Example for Deadline:
         // if (currentFilters.applicationDeadline) {
         //    addFilterTag('Deadline Before', currentFilters.applicationDeadline, () => {
         //       document.getElementById('deadlineDate').value = '';
         //       applyFilters();
         //    });
         // }
     } // End of if (currentCategory === 'Jobb')


    // Show container only if there are active filters
    displayContainer.style.display = hasActiveFilters ? 'flex' : 'none';
}

// Ensure other event listeners also call applyFilters correctly
// (e.g., listeners for checkboxes, dropdowns)

// --- Make applyFilters globally accessible if needed by inline `onchange` ---
// It's generally better to attach listeners programmatically in JS,
// but if you keep onchange="", this makes it work.
window.applyFilters = applyFilters;

// --- Add event listeners to filters ---
function setupFilterListeners() {
    // Dropdowns (Price, Date, SubCategory)
    ['priceFilter', 'dateFilter', 'subCategoryFilter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', applyFilters); // Use non-debounced for immediate select change
    });

    // Checkboxes (Countries, Cities, Brands) - These are added dynamically, attach in initialize functions
    // No need for separate listeners here if attached during creation

    // Sliders - Listener attached during initialization ('change' event uses debouncedApplyFilters)

    // Multi-Selects
    ['fuelTypeFilter', 'transmissionFilter', 'propertyTypeFilter', 'energyClassFilter', 'employmentTypeFilter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', applyFilters); // Use non-debounced for immediate select change
    });

    // Range Input Fields (From/To for text inputs if any - not currently used with sliders)

    // Date Input
    const deadlineDate = document.getElementById('deadlineDate');
    if (deadlineDate) deadlineDate.addEventListener('change', applyFilters);
}

        document.getElementById('dateFilter').addEventListener('change', () => {
        document.getElementById('priceFilter').value = '';
        applyFilters();
    });
        document.getElementById('priceFilter').addEventListener('change', () => {
        document.getElementById('dateFilter').value = '';
        applyFilters();
    });

    function handleCategoryVisibility() {
         const urlParams = new URLSearchParams(window.location.search);
        const category = urlParams.get('category') || 'default';
        console.log("Handling visibility for category:", category);

        // --- Get references to filter UI elements ---
        const subcategoryContainer = document.getElementById('subcategoryFilterContainer'); // Top filter bar section
        const carBrandList = document.getElementById('carBrandList');           // Car brand checkbox list
        const carBrandLabel = document.getElementById('filterCar');              // Car brand <h3> heading
        const carSpecificFilters = document.getElementById('carSpecificFilters'); // DIV containing car sliders/selects
        const propertySpecificFilters = document.getElementById('propertySpecificFilters'); // DIV containing property sliders/selects
        const workSpecificFilters = document.getElementById('workSpecificFilters'); // DIV containing work selects/inputs
        const resetFiltersBtn = document.getElementById('resetFiltersBtn');

        // --- Hide ALL potentially category-specific elements initially ---
        if (subcategoryContainer) subcategoryContainer.style.display = 'none'; // Hide top subcat filter
        if (carBrandList) carBrandList.style.display = 'none';                 // Hide car brand list
        if (carBrandLabel) carBrandLabel.style.display = 'none';               // Hide car brand heading
        if (carSpecificFilters) carSpecificFilters.style.display = 'none';     // Hide car specific div
        if (propertySpecificFilters) propertySpecificFilters.style.display = 'none'; // Hide property specific div
        if (workSpecificFilters) workSpecificFilters.style.display = 'none';     // Hide work specific div
        // Add others if needed (e.g., boat, MC)

        let showResetButton = false; // Flag for the main reset button

        // --- Show elements based on the current category ---
        switch (category) {
            case 'Torget':
                if (subcategoryContainer) subcategoryContainer.style.display = 'block'; // Show top subcat filter
                showResetButton = true;
                break;
            case 'Bil':
                if (carBrandList) carBrandList.style.display = 'block';       // Show car brand list
                if (carBrandLabel) carBrandLabel.style.display = 'block';     // Show car brand heading
                if (carSpecificFilters) carSpecificFilters.style.display = 'block'; // Show car specific div
                showResetButton = true;
                break;
            case 'Eiendom':
                if (propertySpecificFilters) propertySpecificFilters.style.display = 'block'; // Show property specific div
                showResetButton = true;
                break;
            case 'Jobb':
                if (workSpecificFilters) workSpecificFilters.style.display = 'block'; // Show work specific div
                showResetButton = true;
                break;
             case 'Båt': // Example for Boat category
                 // if (boatSpecificFilters) boatSpecificFilters.style.display = 'block';
                 // showResetButton = true; // Decide if Boat needs reset
                 break;
            case 'MC': // Example for MC category
                 // if (mcSpecificFilters) mcSpecificFilters.style.display = 'block';
                 // showResetButton = true; // Decide if MC needs reset
                 break;
            default:
                // No specific filters for other categories or default view
                console.log("No specific filters for category:", category);
                break;
        }

        // Show/hide the global reset button
        if (resetFiltersBtn) {
            resetFiltersBtn.style.display = showResetButton ? 'flex' : 'none';
        }
    }

        function initializeFilters() {
            // Add a flag to track if filters have been initialized
            if (window.filtersInitialized) {
                console.log("Filters already initialized, skipping...");
                return;
            }
            window.filtersInitialized = true;

            console.log("Initializing filters...");

            // Price and Date filters
            document.getElementById('priceFilter').addEventListener('change', applyFilters);
            document.getElementById('dateFilter').addEventListener('change', applyFilters);
            
            // Subcategory filter
            const subCategoryFilter = document.getElementById('subCategoryFilter');
            if (subCategoryFilter) {
                subCategoryFilter.addEventListener('change', applyFilters);
            }

            // Add event listeners for work filters
            ['salaryFrom', 'salaryTo'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', applyFilters);
                    element.addEventListener('input', function() {
                        if (this.value.length > 10) {
                            this.value = this.value.slice(0, 10);
                        }
                    });
                }
            });

            const deadlineDate = document.getElementById('deadlineDate');
            if (deadlineDate) {
                deadlineDate.addEventListener('change', applyFilters);
                const today = new Date().toISOString().split('T')[0];
                deadlineDate.min = today;
            }

            // Add event listeners for all filter elements
            ['employmentTypeFilter', 'propertyTypeFilter', 'energyClassFilter', 'fuelTypeFilter', 'transmissionFilter'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', applyFilters);
                }
            });

            // Add event listeners for numeric inputs
            ['sizeFrom', 'sizeTo', 'roomsFrom', 'roomsTo', 'bathroomsFrom', 'bathroomsTo', 'yearFrom', 'yearTo', 'mileageFrom', 'mileageTo'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('input', applyFilters);
                    element.addEventListener('change', applyFilters);
                    element.addEventListener('input', function() {
                        if (this.value.length > 7) {
                            this.value = this.value.slice(0, 7);
                        }
                    });
                }
            });

        }

       const saveSearchBtn = document.getElementById('saveSearchBtn');
         if (saveSearchBtn) {
             saveSearchBtn.addEventListener('click', async () => {
         // 1. Check login (Keep this part)
         try {
             const userRes = await fetch('/api/auth/current-user');
             const userData = await userRes.json();
             if (!userData || !userData.brukerId) {
                 window.toast.show('Please log in to save searches.', 'info');
                 return;
             }
         } catch (error) {
              window.toast.show('Could not verify login status.', 'error');
              return;
         }

         // 2. Get search name (Keep this part)
         const searchName = prompt("Enter a name for this search:");
         if (!searchName || searchName.trim() === '') {
             window.toast.show('Search not saved (no name provided).', 'warning');
             return;
         }

         // 3. *** START: CORRECTED FILTER GATHERING ***
         const urlParams = new URLSearchParams(window.location.search);
         const category = urlParams.get('category'); // Get the ACTUAL active category

         if (!category) {
             window.toast.show('Cannot save search: Category not identified.', 'error');
             return;
         }

         // Initialize an EMPTY object for filters to be saved
         const filtersToSave = {};

         // --- Add Common Filters (apply to most categories) ---
         const selectedCountries = Array.from(
            document.querySelectorAll('.country-list > li > div > input[type="checkbox"]:checked')
         ).map(cb => cb.value);
        if (selectedCountries.length > 0) filtersToSave.countries = selectedCountries;

          const selectedCities = Array.from(document.querySelectorAll('.city-list input[type="checkbox"]:checked')).map(cb => cb.value); // Ensure this parenthesis is closed
     if (selectedCities.length > 0) filtersToSave.cities = selectedCities; 


         // --- Add Category-Specific Filters ---
         switch (category) {
            case 'Torget':
                const subCategory = document.getElementById('subCategoryFilter')?.value;
                if (subCategory) filtersToSave.subCategory = subCategory;
                break;

            case 'Bil':
                const selectedCarBrands = Array.from(document.querySelectorAll('.car-brand-list input[type="checkbox"]:checked')).map(cb => cb.value);
                if (selectedCarBrands.length > 0) filtersToSave.car_brands = selectedCarBrands; // Use consistent key name

                const yearFrom = document.getElementById('yearFrom')?.value;
                const yearTo = document.getElementById('yearTo')?.value;
                if (yearFrom || yearTo) filtersToSave.yearRange = { from: yearFrom || null, to: yearTo || null };

                const mileageFrom = document.getElementById('mileageFrom')?.value;
                const mileageTo = document.getElementById('mileageTo')?.value;
                if (mileageFrom || mileageTo) filtersToSave.mileageRange = { from: mileageFrom || null, to: mileageTo || null };

                const fuelTypes = Array.from(document.getElementById('fuelTypeFilter')?.selectedOptions || []).map(opt => opt.value);
                if (fuelTypes.length > 0) filtersToSave.fuel_types = fuelTypes; // Use consistent key name

                const transmissionTypes = Array.from(document.getElementById('transmissionFilter')?.selectedOptions || []).map(opt => opt.value);
                if (transmissionTypes.length > 0) filtersToSave.transmission_types = transmissionTypes; // Use consistent key name
                break;

            case 'Eiendom':
                const propertyTypes = Array.from(document.getElementById('propertyTypeFilter')?.selectedOptions || []).map(opt => opt.value);
                if (propertyTypes.length > 0) filtersToSave.property_types = propertyTypes; // Use consistent key name

                const sizeSqmFrom = document.getElementById('sizeSqmFrom')?.value;
                const sizeSqmTo = document.getElementById('sizeSqmTo')?.value;
                 if (sizeSqmFrom || sizeSqmTo) filtersToSave.sizeRange = { from: sizeSqmFrom || null, to: sizeSqmTo || null }; // Use sizeRange

                const numRoomsFrom = document.getElementById('numRoomsFrom')?.value;
                const numRoomsTo = document.getElementById('numRoomsTo')?.value;
                if (numRoomsFrom || numRoomsTo) filtersToSave.roomsRange = { from: numRoomsFrom || null, to: numRoomsTo || null }; // Use roomsRange

                const numBathroomsFrom = document.getElementById('numBathroomsFrom')?.value;
                const numBathroomsTo = document.getElementById('numBathroomsTo')?.value;
                if (numBathroomsFrom || numBathroomsTo) filtersToSave.bathroomsRange = { from: numBathroomsFrom || null, to: numBathroomsTo || null }; // Use bathroomsRange

                const energyClasses = Array.from(document.getElementById('energyClassFilter')?.selectedOptions || []).map(opt => opt.value);
                if (energyClasses.length > 0) filtersToSave.energy_classes = energyClasses; // Use consistent key name
                break;

            case 'Jobb':
                 const employmentTypes = Array.from(document.getElementById('employmentTypeFilter')?.selectedOptions || []).map(opt => opt.value);
                 if (employmentTypes.length > 0) filtersToSave.employment_types = employmentTypes; // Use consistent key name

                 const salaryFrom = document.getElementById('salaryFrom')?.value;
                 const salaryTo = document.getElementById('salaryTo')?.value;
                 if (salaryFrom || salaryTo) filtersToSave.salaryRange = { from: salaryFrom || null, to: salaryTo || null };

                 const applicationDeadline = document.getElementById('deadlineDate')?.value;
                 if (applicationDeadline) filtersToSave.applicationDeadline = applicationDeadline;
                break;

             // Add cases for 'Båt', 'MC' if they have savable filters
         }
         // *** END: CORRECTED FILTER GATHERING ***


         // 4. Send ONLY the relevant filters to the backend
         try {
             const response = await fetch('/api/saved-searches', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({
                     search_name: searchName,
                     category: category, // Send the correct category
                     filters: filtersToSave // Send the filtered object
                 })
             });

             if (!response.ok) {
                 const errorData = await response.json();
                 throw new Error(errorData.message || 'Failed to save search.');
             }

             const result = await response.json();
             window.toast.show(`Search '${result.search_name}' saved successfully!`, 'success');

         } catch (error) {
             console.error("Error saving search:", error);
             window.toast.show(`Error: ${error.message}`, 'error');
         }
     });
 }

function applyFiltersFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    console.log("Applying filters from URL parameters:", urlParams.toString());

    let filtersApplied = false; // Flag to see if we actually changed anything

    // --- Helper Function to Update Multi-Select ---
    const updateMultiSelect = (selectId, values) => {
        const select = document.getElementById(selectId);
        if (select && values && values.length > 0) {
            Array.from(select.options).forEach(option => {
                option.selected = values.includes(option.value);
            });
            filtersApplied = true;
        }
    };

    // --- Helper Function to Update Checkboxes ---
    const updateCheckboxes = (selector, values) => {
        if (values && values.length > 0) {
            document.querySelectorAll(selector).forEach(checkbox => {
                if (values.includes(checkbox.value)) {
                    checkbox.checked = true;
                    // If it's a city checkbox, make sure its country list is expanded
                    const cityList = checkbox.closest('.city-list');
                    if (cityList && cityList.style.display !== 'block') {
                         const countryCheckbox = cityList.closest('li').querySelector('input[type="checkbox"]');
                         if (countryCheckbox) countryCheckbox.checked = true; // Ensure country is checked too
                         cityList.style.display = 'block';
                    }
                     filtersApplied = true;
                } else {
                    checkbox.checked = false;
                }
            });

        }
    };

     // --- Helper Function to Update Single Select ---
    const updateSingleSelect = (selectId, value) => {
         const select = document.getElementById(selectId);
         if (select && value) {
             select.value = value;
             if(select.value === value) filtersApplied = true; // Check if value was successfully set
         }
     };

     // --- Helper Function to Update Slider ---
     const updateSlider = (sliderId, fromValue, toValue) => {
          const sliderElement = document.getElementById(sliderId);
          const config = sliderConfigs[sliderId]; // Assumes sliderConfigs is accessible
          if (sliderElement && sliderElement.noUiSlider && config) {
              const currentVals = sliderElement.noUiSlider.get();
              const newFrom = fromValue !== null ? parseFloat(fromValue) : config.start[0];
              const newTo = toValue !== null ? parseFloat(toValue) : config.start[1];

              // Only update if values are different from default start AND valid within range
              if ((!isNaN(newFrom) && !isNaN(newTo)) &&
                  (newFrom !== config.start[0] || newTo !== config.start[1]) &&
                  (newFrom >= config.range.min && newTo <= config.range.max && newFrom <= newTo))
              {
                   sliderElement.noUiSlider.set([newFrom, newTo]);
                   // Update hidden inputs associated with the slider
                   document.getElementById(config.inputs[0]).value = newFrom;
                   document.getElementById(config.inputs[1]).value = newTo;
                   filtersApplied = true;
              }
          }
      };

    // --- Apply Filters based on URL Params ---

    // Sort Orders (update dropdowns)
    updateSingleSelect('priceFilter', urlParams.get('sortPrice'));
    updateSingleSelect('dateFilter', urlParams.get('sortDate'));

    // Common Filters
    updateCheckboxes('.country-list input[type="checkbox"]', urlParams.get('countries')?.split(','));
    updateCheckboxes('.city-list input[type="checkbox"]', urlParams.get('cities')?.split(','));

    // Category Specific Filters
    const category = urlParams.get('category');
    switch(category) {
        case 'Torget':
            updateSingleSelect('subCategoryFilter', urlParams.get('subCategory'));
            break;
        case 'Bil':
            updateCheckboxes('.car-brand-list input[type="checkbox"]', urlParams.get('carBrand')?.split(',')); // Use carBrand key
            updateSlider('year-slider', urlParams.get('yearFrom'), urlParams.get('yearTo'));
            updateSlider('mileage-slider', urlParams.get('mileageFrom'), urlParams.get('mileageTo'));
            updateMultiSelect('fuelTypeFilter', urlParams.get('fuelTypes')?.split(','));
            updateMultiSelect('transmissionFilter', urlParams.get('transmissionTypes')?.split(','));
            break;
        case 'Eiendom':
             updateMultiSelect('propertyTypeFilter', urlParams.get('propertyType')?.split(','));
             updateSlider('size-slider', urlParams.get('sizeSqmFrom'), urlParams.get('sizeSqmTo'));
             updateSlider('rooms-slider', urlParams.get('numRoomsFrom'), urlParams.get('numRoomsTo'));
             updateSlider('bathrooms-slider', urlParams.get('numBathroomsFrom'), urlParams.get('numBathroomsTo'));
             updateMultiSelect('energyClassFilter', urlParams.get('energyClass')?.split(','));
            break;
         case 'Jobb':
             updateMultiSelect('employmentTypeFilter', urlParams.get('employmentTypes')?.split(','));
             // Update salary range inputs (assuming no slider yet)
             const salaryFromInput = document.getElementById('salaryFrom');
             const salaryToInput = document.getElementById('salaryTo');
             if(salaryFromInput && urlParams.has('salaryFrom')) salaryFromInput.value = urlParams.get('salaryFrom');
             if(salaryToInput && urlParams.has('salaryTo')) salaryToInput.value = urlParams.get('salaryTo');
             // Update deadline input
             const deadlineInput = document.getElementById('deadlineDate');
             if(deadlineInput && urlParams.has('deadline')) deadlineInput.value = urlParams.get('deadline');
            break;
        // Add cases for Båt, MC if needed
    }

     console.log("Finished applying URL filters. Filters Applied:", filtersApplied);
    return filtersApplied; // Return true if any UI element was changed
}
        async function initializeCountries() {
        const countryList = document.querySelector('.country-list');

        if (!countryList) {
            console.error("initializeCountries: CRITICAL - Could not find '.country-list'.");
            return Promise.reject("Country list container not found");
        }

        // --- Refined Check ---
        // Check specifically for a country checkbox structure, not just any li
        // Use a data attribute to mark initialization?
        const isAlreadyInitialized = countryList.dataset.initialized === 'true';
        const hasCountryCheckboxes = countryList.querySelector('li > div > input[type="checkbox"][id]:not([id^="city_"])'); // Look for a country ID, not a city ID

        if (isAlreadyInitialized || hasCountryCheckboxes) {
            console.log(`initializeCountries: Skipping initialization. Already initialized: ${isAlreadyInitialized}, Found existing country checkboxes: ${!!hasCountryCheckboxes}`);
            // If it has checkboxes but isn't marked initialized, mark it now?
            if (hasCountryCheckboxes && !isAlreadyInitialized) {
                countryList.dataset.initialized = 'true';
            }
            return Promise.resolve(); // Already populated or marked
        }

        countryList.innerHTML = ''; // Clear any "Loading...", "Error..." messages FIRST

        return fetch('/api/utils/countries')
            .then(response => response.json())
            .then(countries => {
                  if (countries.length === 0) {
                     console.log("initializeCountries: Received 0 countries.");
                     countryList.innerHTML = '<li>No countries available.</li>';
                     countryList.dataset.initialized = 'true'; // Mark as initialized even if empty
                     return;
                }

                // *** Mark as initialized AFTER successfully adding elements ***
                countryList.dataset.initialized = 'true';
                console.log("initializeCountries: Marked list as initialized.");

                    countries.forEach(countryData => {
                        const countryItem = document.createElement('li');
                        countryItem.innerHTML = `
                            <div>
                                <input type="checkbox" id="${countryData.country}" value="${countryData.country}">
                                <label for="${countryData.country}">${countryData.country}</label>
                            </div>
                            <ul class="city-list" id="${countryData.country}-cities" style="display: none;"></ul>
                        `;
                        
                        const cityList = countryItem.querySelector('.city-list');
                        countryData.cities = countryData.cities || []; // Ensure it's an array
                        const cities = Array.isArray(countryData.cities) ? countryData.cities : [];
                        const cityIds = Array.isArray(countryData.city_ids) ? countryData.city_ids : [];

                        cities.forEach((cityName, index) => {
                            const cityId = cityIds[index] || `unknown_${index}`; // Handle missing IDs
                            cityList.innerHTML += `
                                <li>
                                    <input type="checkbox" id="city_${cityId}" value="${cityId}">
                                    <label for="city_${cityId}">${cityName}</label>
                                </li>
                            `;
                        });

                        const countryCheckbox = countryItem.querySelector('input[type="checkbox"]');
                        countryCheckbox.addEventListener('change', function() {
                            const cityList = countryItem.querySelector('.city-list');
                            const cityCheckboxes = cityList.querySelectorAll('input[type="checkbox"]');
                            if (!this.checked) {
                                cityCheckboxes.forEach(cityCB => cityCB.checked = false);
                            }
                            cityList.style.display = this.checked ? 'block' : 'none';
                            applyFilters();
                        });

                        countryList.appendChild(countryItem);
                    });

                    document.querySelectorAll('.city-list input').forEach(cityCheckbox => {
                        cityCheckbox.addEventListener('change', applyFilters);
                    });
                })
                .catch(error => {
                     console.error("initializeCountries: CATCH block.", error);
                countryList.innerHTML = `<li style="color: red;">Error: ${error.message}.</li>`;
                // Don't mark as initialized on error
                delete countryList.dataset.initialized;
                return Promise.reject(error);
                });
        }

         async function initializeCarBrands() {
          const container = document.getElementById('carBrandList'); // Assuming ID is correct
        // ... (check container exists) ...

        const isAlreadyInitialized = container.dataset.initialized === 'true';
        const hasBrandCheckboxes = container.querySelector('li > div > input[type="checkbox"][id^="brand_"]');

        if (isAlreadyInitialized || hasBrandCheckboxes) {
             console.log(`initializeCarBrands: Skipping initialization. Initialized: ${isAlreadyInitialized}, Found existing checkboxes: ${!!hasBrandCheckboxes}`);
             if(hasBrandCheckboxes && !isAlreadyInitialized) container.dataset.initialized = 'true';
             return Promise.resolve();
        }

        container.innerHTML = ''; // Clear stale content

        return fetch('/api/utils/car-brands')
                .then(response => response.json())
                .then(brands => {
                    if (!brands || brands.length === 0) {
                        console.log("No car brands received");
                        return;
                    }

                    console.log("Loading car brands:", brands.length);
                    brands.forEach(brand => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <div>
                                <input type="checkbox" id="brand_${brand.brand_id}" value="${brand.brand_id}">
                                <label for="brand_${brand.brand_id}">${brand.brand_name}</label>
                            </div>
                        `;
                        container.appendChild(li);

                        const checkbox = li.querySelector('input[type="checkbox"]');
                        checkbox.addEventListener('change', applyFilters);
                    });
                })
                .catch(error => {
                    console.error("Error loading car brands:", error);
                    container.innerHTML = '<p>Error loading car brands</p>';
                    return Promise.resolve();
                });
        }

        function initializeFavorites() {
            fetch('/api/favorites')
                .then(response => response.json())
                .then(favorites => {
                    document.querySelectorAll('.favorite-icon').forEach(icon => {
                        const productdID = icon.getAttribute('data-product-id');
                        const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));
                        icon.classList.toggle('favorited', isFavorited);
                        icon.style.color = isFavorited ? '#ff4757' : '#ccc';
                    });
                })
                .catch(error => console.error("Error checking favorites:", error));
        }

        function showSkeletonLoading() {
            const container = document.getElementById('productsContainer');
            container.innerHTML = '';
            for (let i = 0; i < 8; i++) {
                const skeleton = document.createElement('div');
                skeleton.className = 'product skeleton';
                skeleton.innerHTML = `
                    <div class="skeleton-image skeleton"></div>
                    <div>
                        <div class="skeleton-text skeleton-title skeleton"></div>
                        <div class="skeleton-text skeleton-price skeleton"></div>
                        <div class="skeleton-text skeleton-location skeleton"></div>
                    </div>
                `;
                container.appendChild(skeleton);
            }
        }

         window.addEventListener('load', async () => { // Use 'load' if images etc. affect layout, 'DOMContentLoaded' otherwise
          const countryList = document.querySelector('.country-list');
          const carBrandList = document.getElementById('carBrandList');
          if (countryList) delete countryList.dataset.initialized;
          if (carBrandList) delete carBrandList.dataset.initialized;
        try {
            // --- Synchronous Setup First ---
            handleCategoryVisibility(); // Determine which filters *should* be visible
            initializeSliders();        // Setup sliders (uses existing DOM elements)
            initializeFilters();       // Add basic listeners to static elements
            checkUnreadMessages();     // Any other sync setup

            // --- Wait for ASYNC UI elements to be created ---
            await Promise.all([
                initializeCountries(),
                initializeCarBrands()
                // Add other async initializations here if needed
            ]);

            // --- Now Apply Filters from URL (elements exist) ---
            const urlFiltersApplied = applyFiltersFromURL();
            // --- Update UI and Fetch Initial Data ---
            updateActiveFiltersDisplay(); // Show filter tags based on URL/UI state

            // Fetch products *after* ensuring URL filters are applied to the UI state
            // applyFilters() internally updates currentFilters and calls fetchProducts
            if (urlFiltersApplied) {
                 applyFilters(); // Trigger a filter application which includes fetching
             } else {
                 fetchProducts(); // Fetch default products if no URL filters were applied
             }

            // Setup remaining listeners (like save search button)
            const saveSearchBtn = document.getElementById('saveSearchBtn');
             if (saveSearchBtn) {
                // ... attach your save search listener here ...
                saveSearchBtn.addEventListener('click', async () => { /* ... your existing save logic ... */ });
             }
             
            // Initialize lazy loading last
            if (window.lazyLoader) {
                window.lazyLoader.observe();
            }

        } catch (error) {
            console.error("Error during page initialization:", error);
            // Display a user-friendly error message on the page if appropriate
            const container = document.getElementById('productsContainer');
            if(container) container.innerHTML = "<p class='error-message'>An error occurred loading the page. Please try refreshing.</p>";
        }
    });

}); 
</script>
</body>
</html>