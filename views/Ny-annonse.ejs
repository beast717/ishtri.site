<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-i18n="form.lag_nyannonse">New ad</title>
    <style>
/* Container for the entire page content */
.page-container {
width: 100%;
max-width: 1200px;
margin: 0 auto;
padding: 20px;
display: flex;
flex-direction: column;
align-items: center;
}

/* Heading Styling */
.overskrift {
text-align: center;
margin-top: 40px;
color: #333;
}

.overskrift h1 {
font-size: 32px;
margin-bottom: 10px;
font-weight: 600;
}

.overskrift h2 {
font-size: 20px;
color: #555;
font-weight: 400;
}

/* Category Buttons Styling */
.kategorierContainer {
display: flex;
justify-content: center;
gap: 30px;
margin-top: 30px;
flex-wrap: wrap;
}

.kategori {
text-align: center;
cursor: pointer;
transition: transform 0.3s ease-in-out;
background-color: #fff;
padding: 20px;
border-radius: 12px;
box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
width: 150px;
}

.kategori i {
font-size: 40px;
color: #007bff;
margin-bottom: 10px;
}

.kategori span {
font-size: 16px;
color: #333;
font-weight: 500;
}

.kategori:hover {
transform: scale(1.05);
box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* Form Container Styling */
.formContainer {
font-family: Arial, Helvetica, sans-serif;
text-align: center;
margin-top: 50px;
display: none;
transition: opacity 0.5s ease;
padding: 30px;
border-radius: 12px;
background-color: white;
box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
width: 100%;
max-width: 600px;
}

.formContainer h3 {
font-size: 24px;
margin-bottom: 20px;
color: #333;
font-weight: 600;
}

.formContainer label {
display: block;
margin-bottom: 8px;
font-weight: 600;
color: #555;
text-align: left;
}

.formContainer input,
.formContainer textarea,
.formContainer select {
margin-bottom: 20px;
padding: 12px;
width: 100%;
border-radius: 6px;
border: 1px solid #ddd;
font-size: 16px;
color: #333;
background-color: #f9f9f9;
transition: border-color 0.3s, box-shadow 0.3s;
}

.formContainer input:focus,
.formContainer textarea:focus,
.formContainer select:focus {
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
outline: none;
}

.formContainer button {
padding: 12px 20px;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 6px;
cursor: pointer;
font-weight: 600;
transition: background-color 0.3s;
}

.formContainer button:hover {
background-color: #0056b3;
}

.formContainer textarea {
resize: vertical;
min-height: 100px;
}

.formContainer select {
appearance: none;
background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007BFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
background-repeat: no-repeat;
background-position: right 10px center;
background-size: 12px;
}

/* Replace all display: none with */
#productFields, #jobFields, #propertyFields, #carFields {
    display: none;
}

.active {
    display: block !important;
}

.formContainer {
    display: none;
}

.formContainer.active {
    display: block;
}


@media (max-width: 768px) {
.kategorierContainer {
gap: 20px;
}

.kategori {
width: 120px;
padding: 15px;
}

.kategori i {
font-size: 30px;
}

.kategori span {
font-size: 14px;
}

.formContainer {
padding: 20px;
}
}

.required {
  color: #ff4444; /* Red color */
  margin-left: 3px;
  font-weight: bold;
}

.error-message {
    color: red;
    font-size: 0.9em;
    margin-top: 5px;
}
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <!-- Page Container -->
    <div class="page-container">
        <!-- Heading -->
        <div class="overskrift">
            <h1 data-i18n="form.lag_nyannonse">List a new ad</h1>
            <h2 data-i18n="form.velg_kat">Select category</h2>
        </div>

        <!-- Category Selection -->
        <div class="kategorierContainer">
            <div class="kategori" onclick="setCategory('Torget')">
                <i class="fas fa-chair"></i>
                <span data-i18n="kategori.torget">Marked</span>
            </div>
            <div class="kategori" onclick="setCategory('Bil')">
                <i class="fas fa-car"></i>
                <span data-i18n="kategori.bil">Car</span>
            </div>
            <div class="kategori" onclick="setCategory('Eiendom')">
                <i class="fas fa-home"></i>
                <span data-i18n="kategori.eiendom">Property</span>
            </div>
            <div class="kategori" onclick="setCategory('Båt')">
                <i class="fas fa-ship"></i>
                <span data-i18n="kategori.båt">Boat</span>
            </div>
            <div class="kategori" onclick="setCategory('MC')">
                <i class="fas fa-motorcycle"></i>
                <span data-i18n="kategori.mc">MC</span>
            </div>
            <div class="kategori" onclick="setCategory('Jobb')">
                <i class="fas fa-briefcase"></i>
                <span data-i18n="categories.jobb">Job</span>
            </div>
        </div>

        <!-- Form Container -->
        <div class="formContainer" id="productFormContainer">
            <h3 data-i18n="form.detaljer">Details for the product</h3>
                <form id="productForm" action="/api/products" method="POST" enctype="multipart/form-data" novalidate>

                <div id="productFields" style="display: none;">
                    <label for="ProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
                    <input type="text" id="ProductName" name="ProductName" required>
                    <div class="error-message" id="ProductNameError"></div>

                    <label for="Price" data-i18n="form.price">Price</label>
                    <input type="number" id="Price" name="TorgetPrice" >

                    <label for="SubCategori" data-i18n="form.category" id="subcategoryLabel">Category</label>
                    <select id="SubCategori" name="SubCategori">
                        <option value="Elektronikk" data-i18n="subkategori.elektronikk">Electronics</option>
                        <option value="Hvitvarer" data-i18n="subkategori.hvitvarer">White Goods</option>
                        <option value="Møbler" data-i18n="subkategori.møbler">Furniture</option>
                        <option value="Klær" data-i18n="subkategori.klær">Clothes</option>
                        <option value="Annet" data-i18n="subkategori.annet">Other</option>
                    </select>

                <label for="Description" data-i18n="form.description">Description</label>
                <textarea id="Description" name="Description" ></textarea>
            </div>

                <div id="jobFields" style="display: none;">
                    <label for="JobTitle" data-i18n="form.job_title">Job Title <span class="required">*</span></label>
                    <input type="text" id="JobTitle" name="JobTitle" required>
                    <div class="error-message" id="JobTitleError"></div>

                    <label for="CompanyName" data-i18n="form.company_name">Company Name</label>
                    <input type="text" id="CompanyName" name="CompanyName" >

                    <label for="EmploymentType" data-i18n="form.employment_type">Employment Type</label>
                    <select id="EmploymentType" name="EmploymentType" >
                        <option value="Fast" data-i18n="employment.full_time">Full Time</option>
                        <option value="Deltid" data-i18n="employment.part_time">Part Time</option>
                        <option value="Kontrakt" data-i18n="employment.contract">Contract</option>
                        <option value="Vikariat" data-i18n="employment.temporary">Temporary</option>
                        <option value="Lærling" data-i18n="employment.internship">Internship</option>
                    </select>

                    <label for="Salary" data-i18n="form.salary">Salary Range</label>
                    <input type="text" id="Salary" name="Salary" data-i18n="[placeholder]form.salary_placeholder" placeholder="e.g., 450,000 - 550,000 per year" >

                    <label for="JobDescription" data-i18n="form.job_description">Job Description</label>
                    <textarea id="JobDescription" name="JobDescription" data-i18n="[placeholder]form.job_description_placeholder" placeholder="Describe the position and responsibilities..." ></textarea>

                    <label for="ApplicationDeadline" data-i18n="form.deadline">Application Deadline</label>
                    <input type="date" id="ApplicationDeadline" name="ApplicationDeadline" >

                    <label for="ContactEmail" data-i18n="form.contact_email">Contact Email</label>
                    <input type="email" id="ContactEmail" name="ContactEmail" data-i18n="[placeholder]form.email_placeholder" placeholder="applications@company.com" >

                    <label for="ApplicationLink" data-i18n="form.application_link">Application Link (optional)</label>
                    <input type="url" id="ApplicationLink" name="ApplicationLink" data-i18n="[placeholder]form.url_placeholder" placeholder="https://">
            </div>

            <!-- Property Specific Fields -->
            <div id="propertyFields" style="display: none;">
                <h3 data-i18n="property.details">Property Details</h3>
                
                <div class="form-columns">
                    <div class="form-column">
                        <label for="propertyTitle" data-i18n="form.title">Title <span class="required">*</span></label>
                        <input type="text" id="propertyTitle" name="ProductName" required>
                        <div class="error-message" id="PropertyTitleError"></div>
                        
                        <label for="PropertyPrice" data-i18n="form.price">Price</label>
                        <input type="number" id="PropertyPrice" name="EiendomPrice" >
                        
                        <label for="PropertyType" data-i18n="form.property_type">Property Type</label>
                        <select id="PropertyType" name="PropertyType" >
                            <option value="" data-i18n="form.velg">Select</option>
                            <option value="House" data-i18n="property.house">House</option>
                            <option value="Apartment" data-i18n="property.apartment">Apartment</option>
                            <option value="Commercial" data-i18n="property.commercial">Commercial Property</option>
                            <option value="Vacation" data-i18n="property.vacation">Vacation Home</option>
                            <option value="Land" data-i18n="property.land">Land Plot</option>
                        </select>

                        <label for="SizeSqm" data-i18n="property.size">Size (m²)</label>
                        <input type="number" id="SizeSqm" name="SizeSqm" >

                        <label for="NumRooms" data-i18n="property.rooms">Number of Bedrooms</label>
                        <input type="number" id="NumRooms" name="NumRooms" >

                        <label for="NumBathrooms" data-i18n="property.bathrooms">Number of Bathrooms</label>
                        <input type="number" id="NumBathrooms" name="NumBathrooms" >
                    </div>

                    <div class="form-column">
                        <label data-i18n="amenities.title">Amenities</label>
                        <div class="checkbox-group">
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Balcony"> 
                                <span data-i18n="amenities.balcony">Balcony</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Fireplace"> 
                                <span data-i18n="amenities.fireplace">Fireplace</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Parking"> 
                                <span data-i18n="amenities.parking">Parking</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Elevator"> 
                                <span data-i18n="amenities.elevator">Elevator</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="SmartHome"> 
                                <span data-i18n="amenities.smarthome">Smart Home</span>
                            </label>
                        </div>

                        <label for="YearBuilt" data-i18n="property.year_built">Year Built</label>
                        <input type="number" id="YearBuilt" name="YearBuilt" >

                        <label for="EnergyClass" data-i18n="property.energy_class">Energy Class</label>
                        <select id="EnergyClass" name="EnergyClass">
                            <option value="">-</option>
                            <option value="A">A</option>
                            <option value="B">B</option>
                            <option value="C">C</option>
                            <option value="D">D</option>
                            <option value="E">E</option>
                        </select>

                        <label for="PropertyDescription" data-i18n="form.description">Description (Optional)</label>
                        <textarea id="PropertyDescription" name="Description" rows="4" placeholder="Add a description of your property..."></textarea>
                    </div>
                </div>
            </div>

            <!-- Car Specific Fields -->
        <div id="carFields" style="display: none;">
            <h3 data-i18n="form.car_details">Car Details</h3>
            <div class="form-columns">
                <div class="form-column">
                     <label for="car-ProductName" data-i18n="form.title">Title <span class="required">*</span></label>
                     <input type="text" id="car-ProductName" name="ProductName" required>
                     <div class="error-message" id="CarTitleError"></div>

                     <label for="CarBrand" data-i18n="form.brand">Brand</label>
                     <select id="CarBrand" name="brand_id" >
                         <option value="" data-i18n="form.select_brand">Select Brand</option>
                         <!-- Options loaded dynamically -->
                     </select>

                     <label for="CarModel" data-i18n="form.model">Model</label>
                     <select id="CarModel" name="model_id" disabled>
                         <option value="" data-i18n="form.select_model">Select Model First</option>
                         <!-- Models loaded dynamically -->
                     </select>

                     <label for="Year" data-i18n="form.year">Year</label>
                     <input type="number" id="Year" name="Year" >
                </div>
                <div class="form-column">
                    <label for="Mileage" data-i18n="form.mileage">Mileage</label>
                    <input type="number" id="Mileage" name="Mileage" >

                    <label for="car-Price" data-i18n="form.price">Price</label>
                    <input type="number" id="car-Price" name="BilPrice" 
                    pattern="[0-9]+([,\.][0-9]{1,2})?" 
                    title="Use numbers (e.g., 150000 or 150000.50)">

                    <label for="FuelType" data-i18n="form.fuel_type">Fuel Type</label>
                    <select id="FuelType" name="FuelType" >
                        <option value="" data-i18n="form.velg">Select</option>
                        <option value="Petrol" data-i18n="fuel.petrol">Petrol</option>
                        <option value="Diesel" data-i18n="fuel.diesel">Diesel</option>
                        <option value="Electric" data-i18n="fuel.electric">Electric</option>
                        <option value="Hybrid" data-i18n="fuel.hybrid">Hybrid</option>
                    </select>

                    <label for="Transmission" data-i18n="form.transmission">Transmission</label>
                    <select id="Transmission" name="Transmission">
                        <option value="" data-i18n="form.velg">Select</option>
                        <option value="Manual" data-i18n="transmission.manual">Manual</option>
                        <option value="Automatic" data-i18n="transmission.automatic">Automatic</option>
                    </select>

                    <label for="car-Description" data-i18n="form.description">Description</label>
                    <textarea id="car-Description" name="Description" ></textarea>
                </div>
            </div>
        </div>

        <!-- Boat Specific Fields -->
        <div id="boatFields" style="display: none;">
            <label for="BoatProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
            <input type="text" id="BoatProductName" name="ProductName" required>
            <div class="error-message" id="BoatProductNameError"></div>

            <label for="BoatPrice" data-i18n="form.price">Price</label>
            <input type="number" id="BoatPrice" name="Price">

            <label for="BoatDescription" data-i18n="form.description">Description</label>
            <textarea id="BoatDescription" name="Description"></textarea>
        </div>

        <!-- MC Specific Fields -->
        <div id="mcFields" style="display: none;">
            <label for="MCProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
            <input type="text" id="MCProductName" name="ProductName" required>
            <div class="error-message" id="MCProductNameError"></div>

            <label for="MCPrice" data-i18n="form.price">Price</label>
            <input type="number" id="MCPrice" name="Price">

            <label for="MCDescription" data-i18n="form.description">Description</label>
            <textarea id="MCDescription" name="Description"></textarea>
        </div>

                

                <label for="Country" data-i18n="form.country">Country <span class="required">*</span></label>
                <select id="Country" name="Country" required>
                    <option value="" >None selected</option>
                </select>
                <div class="error-message" id="CountryError"></div>

                <label for="City" id="cityLabel" style="display: none;" data-i18n="form.city">City <span class="required">*</span></label>
                <select id="City" name="City" style="display: none;" required>
                    <option value="" data-i18n="form.select_city">Select City</option>
                </select>
                <div class="error-message" id="CityError"></div>

                <label for="Location" data-i18n="form.location">Location</label>
                <input type="text" id="Location" name="Location" >

                <label for="Images" data-i18n="form.upload_images">Upload Images</label>
                <input type="file" id="Images" name="images" multiple>

                <!-- Hidden Category Field -->
                <input type="hidden" id="Category" name="Category" required>

                <button type="submit" data-i18n="form.submit">Submit</button>
            </form>
        </div>
    </div>

    <script>
    let selectedCategory = '';

    function setCategory(category) {
    selectedCategory = category;
    document.getElementById('Category').value = category;

    // Define all form sections
    const sections = {
        product: document.getElementById('productFields'),
        job: document.getElementById('jobFields'),
        property: document.getElementById('propertyFields'),
        car: document.getElementById('carFields'),
        boat: document.getElementById('boatFields'),
        mc: document.getElementById('mcFields'),
        formContainer: document.getElementById('productFormContainer')
    };

    // Map categories to their respective sections
    const categoryToSection = {
        'Torget': 'product',
        'Bil': 'car',
        'Eiendom': 'property',
        'Båt': 'boat',
        'MC': 'mc',
        'Jobb': 'job'
    };

    // Hide all sections first
    Object.keys(sections).forEach(key => {
        if (key !== 'formContainer' && sections[key]) {
            sections[key].style.display = 'none';
            sections[key].classList.remove('active');
            // Disable fields in inactive sections to prevent them from being submitted
            sections[key].querySelectorAll('input, textarea, select').forEach(field => {
                field.disabled = true;
            });
        }
    });

    // Show the selected category's section
    const activeSectionKey = categoryToSection[category];
    if (activeSectionKey && sections[activeSectionKey]) {
        sections[activeSectionKey].style.display = 'block';
        sections[activeSectionKey].classList.add('active');
        // Enable fields in the active section
        sections[activeSectionKey].querySelectorAll('input, textarea, select').forEach(field => {
            field.disabled = false;
        });
    }

    // Show the form container
    sections.formContainer.classList.add('active');

    // Reset all required attributes first
    document.querySelectorAll('[required]').forEach(field => {
        field.removeAttribute('required');
    });

    // Set required fields based on category
    const requiredFields = {
        'Torget': ['ProductName'],
        'Båt': ['BoatProductName'],
        'MC': ['MCProductName'],
        'Jobb': ['JobTitle'],
        'Eiendom': ['propertyTitle'],
        'Bil': ['car-ProductName']
    };

    // Add Country and City to all categories' required fields
    if (requiredFields[category]) {
        requiredFields[category].push('Country');
        requiredFields[category].push('City');
    }

    // Set required attribute for the fields in the selected category
    requiredFields[category]?.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) field.setAttribute('required', 'true');
    });

    // Always ensure Country and City are required regardless of category
    document.getElementById('Country').setAttribute('required', 'true');
    document.getElementById('City').setAttribute('required', 'true');
}

    function loadCountries() {
        fetch('/api/utils/countriess')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load countries');
                }
                return response.json();
            })
            .then(countries => {
                const countrySelect = document.getElementById('Country');
                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country;
                    option.textContent = country;
                    countrySelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading countries:', error);
                const errorElement = document.createElement('p');
                errorElement.textContent = 'Failed to load countries. Please try again later.';
                errorElement.style.color = 'red';
                document.getElementById('Country').insertAdjacentElement('afterend', errorElement);
            });
    }

    function loadCarBrands() {
        fetch('/api/utils/car-brands')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load car brands');
                }
                return response.json();
            })
            .then(brands => {
                const brandSelect = document.getElementById('CarBrand');
                brands.forEach(brand => {
                    const option = document.createElement('option');
                    option.value = brand.brand_id;
                    option.textContent = brand.brand_name;
                    brandSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading car brands:', error);
                const errorElement = document.createElement('p');
                errorElement.textContent = 'Failed to load car brands. Please try again later.';
                errorElement.style.color = 'red';
                document.getElementById('CarBrand').insertAdjacentElement('afterend', errorElement);
            });
    }

    document.getElementById('Country').addEventListener('change', function() {
        const selectedCountry = this.value;
        const cityDropdown = document.getElementById('City');
        const cityLabel = document.getElementById('cityLabel');

        if (selectedCountry) {
            fetch(`/api/utils/cities/${selectedCountry}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load cities');
                    }
                    return response.json();
                })
                .then(cities => {
                    cityDropdown.innerHTML = `<option value="">Select city</option>`;
                    cities.forEach(city => {
                        const option = document.createElement('option');
                        option.value = city;
                        option.textContent = city;
                        cityDropdown.appendChild(option);
                    });
                    cityDropdown.style.display = 'block';
                    cityLabel.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading cities:', error);
                    const errorElement = document.createElement('p');
                    errorElement.textContent = 'Failed to load cities. Please try again later.';
                    errorElement.style.color = 'red';
                    document.getElementById('City').insertAdjacentElement('afterend', errorElement);
                });
        } else {
            cityDropdown.style.display = 'none';
            cityLabel.style.display = 'none';
        }
    });

    document.getElementById('CarBrand').addEventListener('change', function() {
        const brandId = this.value;
        const modelSelect = document.getElementById('CarModel');
        
        modelSelect.disabled = !brandId;
        
        if (!brandId) {
            modelSelect.innerHTML = '<option value="">Select model</option>';
            return;
        }

        fetch(`/api/utils/car-models/${brandId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load car models');
                }
                return response.json();
            })
            .then(models => {
                modelSelect.innerHTML = `<option value="">Select model</option>`;
                models.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model.model_id;
                    option.textContent = model.model_name;
                    modelSelect.appendChild(option);
                });
                modelSelect.disabled = false;
            })
            .catch(error => {
                console.error('Error loading models:', error);
                const errorElement = document.createElement('p');
                errorElement.textContent = 'Failed to load car models. Please try again later.';
                errorElement.style.color = 'red';
                document.getElementById('CarModel').insertAdjacentElement('afterend', errorElement);
            });
    });

    document.addEventListener('DOMContentLoaded', () => {
        loadCountries();
        loadCarBrands();
    });

    document.getElementById('productForm').addEventListener('submit', function(event) {
    // Prevent form submission initially
    event.preventDefault();
    
    // Clear all previous error messages
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
    
    const selectedCategory = document.getElementById('Category').value;
    let hasError = false;

    if (!selectedCategory) {
        alert('Please select a category');
        return;
    }

    // Title field validation based on category
    const titleFields = {
        'Torget': 'ProductName',
        'Båt': 'BoatProductName',
        'MC': 'MCProductName',
        'Jobb': 'JobTitle',
        'Eiendom': 'propertyTitle',
        'Bil': 'car-ProductName'
    };

    // Price validation for applicable categories
    if (['Torget', 'Bil', 'Eiendom', 'Båt', 'MC'].includes(selectedCategory)) {
        const priceFields = {
            'Torget': 'Price',
            'Bil': 'car-Price',
            'Eiendom': 'PropertyPrice',
            'Båt': 'BoatPrice',
            'MC': 'MCPrice'
        };

    const priceField = document.getElementById(priceFields[selectedCategory]);
        if (priceField && priceField.value) {
            const price = parseFloat(priceField.value);
            if (isNaN(price) || price < 0) {
                const errorId = priceFields[selectedCategory] + 'Error';
                // Create error element if it doesn't exist
                if (!document.getElementById(errorId)) {
                    const errorElement = document.createElement('div');
                    errorElement.id = errorId;
                    errorElement.className = 'error-message';
                    priceField.insertAdjacentElement('afterend', errorElement);
                }
                document.getElementById(errorId).textContent = 'Please enter a valid price';
                hasError = true;
            }
        }
    }

    const titleFieldId = titleFields[selectedCategory];
    if (titleFieldId) {
        const titleField = document.getElementById(titleFieldId);
        if (!titleField.value.trim()) {
            document.getElementById(`${titleFieldId}Error`).textContent = 'This field is required';
            hasError = true;
        }
    }

    // ALWAYS validate Country regardless of category
    const country = document.getElementById('Country').value;
    if (!country) {
        document.getElementById('CountryError').textContent = 'Country is required';
        hasError = true;
    }

    // Validate City only if Country is selected
    if (country) {
        const city = document.getElementById('City').value;
        if (!city) {
            document.getElementById('CityError').textContent = 'City is required';
            hasError = true;
        }
    }

    // If no validation errors, submit the form
    if (hasError) {
        // Scroll to the first error
        const firstError = document.querySelector('.error-message:not(:empty)');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    } else {
        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = 'Submitting...';
        
        // Submit the form
        setTimeout(() => {
            this.submit();
        }, 200);
    }
});
    // 2. Add real-time validation for fields
function addRealTimeValidation() {
    // Add validation to all required fields
    document.querySelectorAll('input[required], select[required], textarea[required]').forEach(field => {
        field.addEventListener('blur', function() {
            validateField(this);
        });
        
        field.addEventListener('input', function() {
            if (this.classList.contains('invalid')) {
                validateField(this);
            }
        });
    });
    
    // Add price validation to price fields
    document.querySelectorAll('input[type="number"][id$="Price"]').forEach(field => {
        field.addEventListener('input', function() {
            validatePrice(this);
        });
    });
}

function validateField(field) {
    const errorId = field.id + 'Error';
    let errorElement = document.getElementById(errorId);
    
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = errorId;
        errorElement.className = 'error-message';
        field.insertAdjacentElement('afterend', errorElement);
    }
    
    if (!field.value.trim()) {
        field.classList.add('invalid');
        errorElement.textContent = 'This field is required';
        return false;
    } else {
        field.classList.remove('invalid');
        errorElement.textContent = '';
        return true;
    }
}

function validatePrice(field) {
    const errorId = field.id + 'Error';
    let errorElement = document.getElementById(errorId);
    
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = errorId;
        errorElement.className = 'error-message';
        field.insertAdjacentElement('afterend', errorElement);
    }
    
    if (field.value) {
        const price = parseFloat(field.value);
        if (isNaN(price) || price < 0) {
            field.classList.add('invalid');
            errorElement.textContent = 'Please enter a valid price';
            return false;
        }
    }
    
    field.classList.remove('invalid');
    errorElement.textContent = '';
    return true;
}

// 3. Image preview functionality
document.getElementById('Images').addEventListener('change', function(event) {
    const previewContainer = document.getElementById('imagePreviewContainer') || createImagePreviewContainer();
    previewContainer.innerHTML = '';
    
    const files = event.target.files;
    if (files.length > 0) {
        const previewHeader = document.createElement('h4');
        previewHeader.textContent = 'Image Previews';
        previewContainer.appendChild(previewHeader);
        
        const previewGrid = document.createElement('div');
        previewGrid.className = 'image-preview-grid';
        previewContainer.appendChild(previewGrid);
        
        for (let i = 0; i < Math.min(files.length, 5); i++) {
            const file = files[i];
            if (!file.type.startsWith('image/')) continue;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewItem = document.createElement('div');
                previewItem.className = 'image-preview-item';
                
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = 'Preview';
                
                previewItem.appendChild(img);
                previewGrid.appendChild(previewItem);
            };
            reader.readAsDataURL(file);
        }
        
        if (files.length > 5) {
            const moreInfo = document.createElement('p');
            moreInfo.textContent = `+${files.length - 5} more images selected`;
            previewContainer.appendChild(moreInfo);
        }
    }
});

function createImagePreviewContainer() {
    const container = document.createElement('div');
    container.id = 'imagePreviewContainer';
    container.className = 'image-preview-container';
    // Add CSS for image preview
    const style = document.createElement('style');
    style.textContent = `
        .image-preview-container {
            margin-top: 15px;
        }
        
        .image-preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }
        
        .image-preview-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px;
            height: 100px;
        }
        
        .image-preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 3px;
        }
        
        .invalid {
            border-color: #ff4444 !important;
            background-color: #fff8f8;
        }
    `;
    document.head.appendChild(style);
    
    // Insert after the file input
    document.getElementById('Images').insertAdjacentElement('afterend', container);
    return container;
}

// 4. Save form data to localStorage to prevent data loss
function setupFormDataSaving() {
    // Restore form data on page load
    const savedCategory = localStorage.getItem('selectedCategory');
    if (savedCategory) {
        setCategory(savedCategory);
        
        // Restore saved fields
        const savedData = JSON.parse(localStorage.getItem('formData') || '{}');
        Object.keys(savedData).forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                if (field.type === 'checkbox') {
                    field.checked = savedData[fieldId];
                } else {
                    field.value = savedData[fieldId];
                }
            }
        });
        
        // Trigger country change to load cities
        if (savedData.Country) {
            const countryEvent = new Event('change');
            document.getElementById('Country').dispatchEvent(countryEvent);
            
            // Set timeout to restore city after cities are loaded
            setTimeout(() => {
                if (savedData.City) {
                    document.getElementById('City').value = savedData.City;
                }
            }, 500);
        }
    }
    
    // Save form data as user types
    const formElements = document.querySelectorAll('#productForm input, #productForm select, #productForm textarea');
    formElements.forEach(element => {
        element.addEventListener('change', saveFormData);
        if (element.tagName === 'INPUT' && element.type !== 'file') {
            element.addEventListener('input', saveFormData);
        }
    });
}

function saveFormData() {
    const formData = {};
    document.querySelectorAll('#productForm input, #productForm select, #productForm textarea').forEach(field => {
        if (field.type === 'file') return; // Skip file inputs
        if (field.type === 'checkbox') {
            formData[field.id] = field.checked;
        } else {
            formData[field.id] = field.value;
        }
    });
    
    localStorage.setItem('formData', JSON.stringify(formData));
    localStorage.setItem('selectedCategory', document.getElementById('Category').value);
}

// 5. Add a clear form button
function addClearFormButton() {
    const submitBtn = document.querySelector('#productForm button[type="submit"]');
    
    const clearBtn = document.createElement('button');
    clearBtn.type = 'button';
    clearBtn.textContent = 'Clear Form';
    clearBtn.className = 'clear-button';
    clearBtn.style.marginRight = '10px';
    clearBtn.style.backgroundColor = '#f0f0f0';
    clearBtn.style.color = '#333';
    
    clearBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to clear all form data?')) {
            document.getElementById('productForm').reset();
            localStorage.removeItem('formData');
            localStorage.removeItem('selectedCategory');
            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
            
            const imagePreview = document.getElementById('imagePreviewContainer');
            if (imagePreview) {
                imagePreview.innerHTML = '';
            }
        }
    });
    
    submitBtn.parentNode.insertBefore(clearBtn, submitBtn);
}

// Initialize all improvements
document.addEventListener('DOMContentLoaded', function() {
    loadCountries();
    loadCarBrands();
    addRealTimeValidation();
    setupFormDataSaving();
    addClearFormButton();
});
</script>
</body>
</html>