<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" href="ishtri1.png" sizes="16x16 32x32" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-i18n="form.lag_nyannonse">New ad</title>
    <style>
/* Container for the entire page content */
.page-container {
width: 100%;
max-width: 1200px;
margin: 0 auto;
padding: 20px;
display: flex;
flex-direction: column;
align-items: center;
}

/* Heading Styling */
.overskrift {
text-align: center;
margin-top: 40px;
color: #333;
}

.overskrift h1 {
font-size: 32px;
margin-bottom: 10px;
font-weight: 600;
}

.overskrift h2 {
font-size: 20px;
color: #555;
font-weight: 400;
}

/* Category Buttons Styling */
.kategorierContainer {
display: flex;
justify-content: center;
gap: 30px;
margin-top: 30px;
flex-wrap: wrap;
}

.kategori {
text-align: center;
cursor: pointer;
transition: transform 0.3s ease-in-out;
background-color: #fff;
padding: 20px;
border-radius: 12px;
box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
width: 150px;
}

.kategori i {
font-size: 40px;
color: #007bff;
margin-bottom: 10px;
}

.kategori span {
font-size: 16px;
color: #333;
font-weight: 500;
}

.kategori:hover {
transform: scale(1.05);
box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* Form Container Styling */
.formContainer {
font-family: Arial, Helvetica, sans-serif;
text-align: center;
margin-top: 50px;
display: none;
transition: opacity 0.5s ease;
padding: 30px;
border-radius: 12px;
background-color: white;
box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
width: 100%;
max-width: 600px;
}

.formContainer h3 {
font-size: 24px;
margin-bottom: 20px;
color: #333;
font-weight: 600;
}

.formContainer label {
display: block;
margin-bottom: 8px;
font-weight: 600;
color: #555;
text-align: left;
}

.formContainer input,
.formContainer textarea,
.formContainer select {
margin-bottom: 20px;
padding: 12px;
width: 100%;
border-radius: 6px;
border: 1px solid #ddd;
font-size: 16px;
color: #333;
background-color: #f9f9f9;
transition: border-color 0.3s, box-shadow 0.3s;
}

.formContainer input:focus,
.formContainer textarea:focus,
.formContainer select:focus {
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
outline: none;
}

.formContainer button {
padding: 12px 20px;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 6px;
cursor: pointer;
font-weight: 600;
transition: background-color 0.3s;
}

.formContainer button:hover {
background-color: #0056b3;
}

.formContainer textarea {
resize: vertical;
min-height: 100px;
}

.formContainer select {
appearance: none;
background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007BFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
background-repeat: no-repeat;
background-position: right 10px center;
background-size: 12px;
}

/* Replace all display: none with */
#productFields, #jobFields, #propertyFields, #carFields {
    display: none;
}

.active {
    display: block !important;
}

.formContainer {
    display: none;
}

.formContainer.active {
    display: block;
}


@media (max-width: 768px) {
.kategorierContainer {
gap: 20px;
}

.kategori {
width: 120px;
padding: 15px;
}

.kategori i {
font-size: 30px;
}

.kategori span {
font-size: 14px;
}

.formContainer {
padding: 20px;
}
}

.required {
  color: #ff4444; /* Red color */
  margin-left: 3px;
  font-weight: bold;
}

.error-message {
    color: red;
    font-size: 0.9em;
    margin-top: 5px;
}

/* Add to existing styles */
.error-message-container {
    display: none;
    margin-top: 15px;
    padding: 15px;
    border-radius: 6px;
    background-color: #fff8f8;
    border: 1px solid #ffcccc;
    color: #ff4444;
    align-items: center;
    gap: 10px;
}

.error-message-container i {
    font-size: 18px;
}

.error-message-container.active {
    display: flex;
}

.success-message-container {
    display: none; /* Hidden by default */
    margin-top: 15px;
    padding: 15px;
    border-radius: 6px;
    background-color: #e8f5e9; /* Light green background */
    border: 1px solid #a5d6a7; /* Green border */
    color: #2e7d32; /* Dark green text */
    align-items: center;
    gap: 10px;
    text-align: left; /* Align text left within the container */
}

.success-message-container i {
    font-size: 18px;
    color: #4caf50; /* Slightly brighter green for icon */
}

.success-message-container.active {
    display: flex; /* Use flex to show it */
}
    </style>
</head>
<body>
    <script src="/shared.js"></script>
    <%- include('partials/navbar') %>
    <!-- Page Container -->
    <div class="page-container">
        <!-- Heading -->
        <div class="overskrift">
            <h1 data-i18n="form.lag_nyannonse">List a new ad</h1>
            <h2 data-i18n="form.velg_kat">Select category</h2>
        </div>

        <!-- Category Selection -->
        <div class="kategorierContainer">
            <div class="kategori" onclick="setCategory('Torget')">
                <i class="fas fa-chair"></i>
                <span data-i18n="kategori.torget">Marked</span>
            </div>
            <div class="kategori" onclick="setCategory('Bil')">
                <i class="fas fa-car"></i>
                <span data-i18n="kategori.bil">Car</span>
            </div>
            <div class="kategori" onclick="setCategory('Eiendom')">
                <i class="fas fa-home"></i>
                <span data-i18n="kategori.eiendom">Property</span>
            </div>
            <div class="kategori" onclick="setCategory('Båt')">
                <i class="fas fa-ship"></i>
                <span data-i18n="kategori.båt">Boat</span>
            </div>
            <div class="kategori" onclick="setCategory('MC')">
                <i class="fas fa-motorcycle"></i>
                <span data-i18n="kategori.mc">MC</span>
            </div>
            <div class="kategori" onclick="setCategory('Jobb')">
                <i class="fas fa-briefcase"></i>
                <span data-i18n="categories.jobb">Job</span>
            </div>
        </div>

        <!-- Form Container -->
        <div class="formContainer" id="productFormContainer">
            <h3 data-i18n="form.detaljer">Details for the product</h3>
                <form id="productForm" action="/api/products" method="POST" enctype="multipart/form-data" novalidate>

                <div id="productFields" style="display: none;">
                    <label for="ProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
                    <input type="text" id="ProductName" name="ProductName" required>
                    <div class="error-message" id="ProductNameError"></div>

                    <label for="Price" data-i18n="form.price">Price</label>
                    <input type="number" id="Price" name="TorgetPrice" >

                    <label for="SubCategori" data-i18n="form.category" id="subcategoryLabel">Category</label>
                    <select id="SubCategori" name="SubCategori">
                        <option value="Elektronikk" data-i18n="subkategori.elektronikk">Electronics</option>
                        <option value="Hvitvarer" data-i18n="subkategori.hvitvarer">White Goods</option>
                        <option value="Møbler" data-i18n="subkategori.møbler">Furniture</option>
                        <option value="Klær" data-i18n="subkategori.klær">Clothes</option>
                        <option value="Annet" data-i18n="subkategori.annet">Other</option>
                    </select>

                <label for="Description" data-i18n="form.description">Description</label>
                <textarea id="Description" name="Description" ></textarea>
            </div>

                <div id="jobFields" style="display: none;">
                     <h3 data-i18n="form.job_details">Job Details</h3>
                    <label for="JobTitle" data-i18n="form.job_title">Job Title <span class="required">*</span></label>
                    <input type="text" id="JobTitle" name="JobTitle" required>
                    <div class="error-message" id="JobTitleError"></div>

                    <label for="CompanyName" data-i18n="form.company_name">Company Name</label>
                    <input type="text" id="CompanyName" name="CompanyName" >

                    <label for="EmploymentType" data-i18n="form.employment_type">Employment Type</label>
                    <select id="EmploymentType" name="EmploymentType" >
                        <option value="Fast" data-i18n="employment.full_time">Full Time</option>
                        <option value="Deltid" data-i18n="employment.part_time">Part Time</option>
                        <option value="Kontrakt" data-i18n="employment.contract">Contract</option>
                        <option value="Vikariat" data-i18n="employment.temporary">Temporary</option>
                        <option value="Lærling" data-i18n="employment.internship">Internship</option>
                    </select>

                    <label for="Salary" data-i18n="form.salary">Salary Range</label>
                    <input type="text" id="Salary" name="Salary" data-i18n="[placeholder]form.salary_placeholder" placeholder="e.g., 450,000 - 550,000 per year" >

                    <label for="JobDescription" data-i18n="form.job_description">Job Description</label>
                    <textarea id="JobDescription" name="JobDescription" data-i18n="[placeholder]form.job_description_placeholder" placeholder="Describe the position and responsibilities..." ></textarea>

                    <label for="ApplicationDeadline" data-i18n="form.deadline">Application Deadline</label>
                    <input type="date" id="ApplicationDeadline" name="ApplicationDeadline" >

                    <label for="ContactEmail" data-i18n="form.contact_email">Contact Email</label>
                    <input type="email" id="ContactEmail" name="ContactEmail" data-i18n="[placeholder]form.email_placeholder" placeholder="applications@company.com" >

                    <label for="ApplicationLink" data-i18n="form.application_link">Application Link (optional)</label>
                    <input type="url" id="ApplicationLink" name="ApplicationLink" data-i18n="[placeholder]form.url_placeholder" placeholder="https://">
            </div>

            <!-- Property Specific Fields -->
            <div id="propertyFields" style="display: none;">
                <h3 data-i18n="property.details">Property Details</h3>
                <div class="form-columns">
                    <div class="form-column">
                        <label for="propertyTitle" data-i18n="form.title">Title <span class="required">*</span></label>
                        <input type="text" id="propertyTitle" name="ProductName" required>
                        <div class="error-message" id="propertyTitleError"></div>
                        
                        <label for="PropertyPrice" data-i18n="form.price">Price</label>
                        <input type="number" id="PropertyPrice" name="EiendomPrice" >
                        
                        <label for="PropertyType" data-i18n="form.property_type">Property Type</label>
                        <select id="PropertyType" name="PropertyType" >
                            <option value="" data-i18n="form.velg">Select</option>
                            <option value="House" data-i18n="property.house">House</option>
                            <option value="Apartment" data-i18n="property.apartment">Apartment</option>
                            <option value="Commercial" data-i18n="property.commercial">Commercial Property</option>
                            <option value="Vacation" data-i18n="property.vacation">Vacation Home</option>
                            <option value="Land" data-i18n="property.land">Land Plot</option>
                        </select>

                        <label for="SizeSqm" data-i18n="property.size">Size (m²)</label>
                        <input type="number" id="SizeSqm" name="SizeSqm" >

                        <label for="NumRooms" data-i18n="property.rooms">Number of Bedrooms</label>
                        <input type="number" id="NumRooms" name="NumRooms" >

                        <label for="NumBathrooms" data-i18n="property.bathrooms">Number of Bathrooms</label>
                        <input type="number" id="NumBathrooms" name="NumBathrooms" >
                    </div>

                    <div class="form-column">
                        <label data-i18n="amenities.title">Amenities</label>
                        <div class="checkbox-group">
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Balcony"> 
                                <span data-i18n="amenities.balcony">Balcony</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Fireplace"> 
                                <span data-i18n="amenities.fireplace">Fireplace</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Parking"> 
                                <span data-i18n="amenities.parking">Parking</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="Elevator"> 
                                <span data-i18n="amenities.elevator">Elevator</span>
                            </label>
                            <label>
                                <input type="checkbox" name="Amenities[]" value="SmartHome"> 
                                <span data-i18n="amenities.smarthome">Smart Home</span>
                            </label>
                        </div>

                        <label for="YearBuilt" data-i18n="property.year_built">Year Built</label>
                        <input type="number" id="YearBuilt" name="YearBuilt" >

                        <label for="EnergyClass" data-i18n="property.energy_class">Energy Class</label>
                        <select id="EnergyClass" name="EnergyClass">
                            <option value="">-</option>
                            <option value="A">A</option>
                            <option value="B">B</option>
                            <option value="C">C</option>
                            <option value="D">D</option>
                            <option value="E">E</option>
                        </select>

                        <label for="PropertyDescription" data-i18n="form.description">Description (Optional)</label>
                        <textarea id="PropertyDescription" name="Description" rows="4" placeholder="Add a description of your property..."></textarea>
                    </div>
                </div>
            </div>

            <!-- Car Specific Fields -->
        <div id="carFields" style="display: none;">
            <h3 data-i18n="form.car_details">Car Details</h3>
            <div class="form-columns">
                <div class="form-column">
                     <label for="car-ProductName" data-i18n="form.title">Title <span class="required">*</span></label>
                     <input type="text" id="car-ProductName" name="ProductName" required>
                     <div class="error-message" id="car-ProductNameError"></div>

                     <label for="CarBrand" data-i18n="form.brand">Brand</label>
                     <select id="CarBrand" name="brand_id" >
                         <option value="" data-i18n="form.select_brand">Select Brand</option>
                         <!-- Options loaded dynamically -->
                     </select>

                     <label for="CarModel" data-i18n="form.model">Model</label>
                     <select id="CarModel" name="model_id" disabled>
                         <option value="" data-i18n="form.select_model">Select Model First</option>
                         <!-- Models loaded dynamically -->
                     </select>

                     <label for="Year" data-i18n="form.year">Year</label>
                     <input type="number" id="Year" name="Year" >
                </div>
                <div class="form-column">
                    <label for="Mileage" data-i18n="form.mileage">Mileage</label>
                    <input type="number" id="Mileage" name="Mileage" >

                    <label for="car-Price" data-i18n="form.price">Price</label>
                    <input type="number" id="car-Price" name="BilPrice" 
                    pattern="[0-9]+([,\.][0-9]{1,2})?" 
                    title="Use numbers (e.g., 150000 or 150000.50)">

                    <label for="FuelType" data-i18n="form.fuel_type">Fuel Type</label>
                    <select id="FuelType" name="FuelType" >
                        <option value="" data-i18n="form.velg">Select</option>
                        <option value="Petrol" data-i18n="fuel.petrol">Petrol</option>
                        <option value="Diesel" data-i18n="fuel.diesel">Diesel</option>
                        <option value="Electric" data-i18n="fuel.electric">Electric</option>
                        <option value="Hybrid" data-i18n="fuel.hybrid">Hybrid</option>
                    </select>

                    <label for="Transmission" data-i18n="form.transmission">Transmission</label>
                    <select id="Transmission" name="Transmission">
                        <option value="" data-i18n="form.velg">Select</option>
                        <option value="Manual" data-i18n="transmission.manual">Manual</option>
                        <option value="Automatic" data-i18n="transmission.automatic">Automatic</option>
                    </select>

                    <label for="car-Description" data-i18n="form.description">Description</label>
                    <textarea id="car-Description" name="Description" ></textarea>
                </div>
            </div>
        </div>

        <!-- Boat Specific Fields -->
        <div id="boatFields" style="display: none;">
            <h3 data-i18n="form.boat_details">Boat Details</h3>
            <label for="BoatProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
            <input type="text" id="BoatProductName" name="ProductName" required>
            <div class="error-message" id="BoatProductNameError"></div>

            <label for="BoatPrice" data-i18n="form.price">Price</label>
            <input type="number" id="BoatPrice" name="Price">

            <label for="BoatDescription" data-i18n="form.description">Description</label>
            <textarea id="BoatDescription" name="Description"></textarea>
        </div>

        <!-- MC Specific Fields -->
        <div id="mcFields" style="display: none;">
            <h3 data-i18n="form.mc_details">MC Details</h3>
            <label for="MCProductName" data-i18n="form.product_name">Product Name <span class="required">*</span></label>
            <input type="text" id="MCProductName" name="ProductName" required>
            <div class="error-message" id="MCProductNameError"></div>

            <label for="MCPrice" data-i18n="form.price">Price</label>
            <input type="number" id="MCPrice" name="Price">

            <label for="MCDescription" data-i18n="form.description">Description</label>
            <textarea id="MCDescription" name="Description"></textarea>
        </div>

                

                <label for="Country" data-i18n="form.country">Country <span class="required">*</span></label>
                <select id="Country" name="Country" required>
                    <option value="" >None selected</option>
                </select>
                <div class="error-message" id="CountryError"></div>

                <label for="City" id="cityLabel" style="display: none;" data-i18n="form.city">City <span class="required">*</span></label>
                <select id="City" name="City" style="display: none;" required>
                    <option value="" data-i18n="form.select_city">Select City</option>
                </select>
                <div class="error-message" id="CityError"></div>

                <label for="Location" data-i18n="form.location">Location</label>
                <input type="text" id="Location" name="Location" >

                <label for="Images" data-i18n="form.upload_images">Upload Images</label>
                <input type="file" id="Images" name="images" multiple>
                <div id="uploadError" class="error-message-container" style="display: none;">
                    <i class="fas fa-exclamation-circle"></i>
                    <span id="errorText"></span>
                </div>
                <div id="successMessageContainer" class="success-message-container" style="display: none;">
                    <i class="fas fa-check-circle"></i>
                    <span id="successText"></span>
                </div>

                <!-- Hidden Category Field -->
                <input type="hidden" id="Category" name="Category" required>

                <button type="submit" data-i18n="form.submit">Submit</button>
            </form>
        </div>
    </div>

    <script>
    let selectedCategory = '';

    function setCategory(category) {
    selectedCategory = category;
    document.getElementById('Category').value = category;

    // Define all form sections
    const sections = {
        product: document.getElementById('productFields'),
        job: document.getElementById('jobFields'),
        property: document.getElementById('propertyFields'),
        car: document.getElementById('carFields'),
        boat: document.getElementById('boatFields'),
        mc: document.getElementById('mcFields'),
        formContainer: document.getElementById('productFormContainer')
    };

    // Map categories to their respective sections
    const categoryToSection = {
        'Torget': 'product',
        'Bil': 'car',
        'Eiendom': 'property',
        'Båt': 'boat',
        'MC': 'mc',
        'Jobb': 'job'
    };

    // Hide all sections first
    Object.keys(sections).forEach(key => {
        if (key !== 'formContainer' && sections[key]) {
            sections[key].style.display = 'none';
            sections[key].classList.remove('active');
            // Disable fields in inactive sections to prevent them from being submitted
            sections[key].querySelectorAll('input, textarea, select').forEach(field => {
                field.disabled = true;
            });
        }
    });

    // Show the selected category's section
    const activeSectionKey = categoryToSection[category];
    if (activeSectionKey && sections[activeSectionKey]) {
        sections[activeSectionKey].style.display = 'block';
        sections[activeSectionKey].classList.add('active');
        // Enable fields in the active section
        sections[activeSectionKey].querySelectorAll('input, textarea, select').forEach(field => {
            field.disabled = false;
        });
    }

    // Show the form container
    sections.formContainer.classList.add('active');

    // Reset all required attributes first
    document.querySelectorAll('[required]').forEach(field => {
        field.removeAttribute('required');
    });

    // Set required fields based on category
    const requiredFields = {
        'Torget': ['ProductName'],
        'Båt': ['BoatProductName'],
        'MC': ['MCProductName'],
        'Jobb': ['JobTitle'],
        'Eiendom': ['propertyTitle'],
        'Bil': ['car-ProductName']
    };

    // Add Country and City to all categories' required fields
    if (requiredFields[category]) {
        requiredFields[category].push('Country');
        requiredFields[category].push('City');
    }

    // Set required attribute for the fields in the selected category
    requiredFields[category]?.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) field.setAttribute('required', 'true');
    });

    // Always ensure Country and City are required regardless of category
    document.getElementById('Country').setAttribute('required', 'true');
    document.getElementById('City').setAttribute('required', 'true');
}

    function loadCountries() {
    const countrySelect = document.getElementById('Country'); // Get reference
    fetch('/api/utils/countriess') // Note: URL still has 'countriess' typo from original code
        .then(response => {
            if (!response.ok) {
                // Throw an error object with status text for better context
                throw new Error(`HTTP error ${response.status}: ${response.statusText || 'Failed to load countries'}`);
            }
            return response.json();
        })
        .then(countries => {
            // Clear previous options except the placeholder
            countrySelect.innerHTML = '<option value="">None selected</option>';
            countries.forEach(country => {
                const option = document.createElement('option');
                option.value = country;
                option.textContent = country;
                countrySelect.appendChild(option);
            });
            countrySelect.disabled = false; // Ensure it's enabled on success
        })
        .catch(error => {
            console.error('Error loading countries:', error);
            // Use showUploadError for user feedback
            showUploadError(`Failed to load countries: ${error.message}. Please try refreshing the page.`);
            // Disable the dropdown as it's unusable
            countrySelect.disabled = true;
            // Optionally add placeholder indicating error
            countrySelect.innerHTML = '<option value="">Error loading countries</option>';
        });
}


    function loadCarBrands() {
    const brandSelect = document.getElementById('CarBrand'); // Get reference
    fetch('/api/utils/car-brands')
        .then(response => {
            if (!response.ok) {
                 throw new Error(`HTTP error ${response.status}: ${response.statusText || 'Failed to load car brands'}`);
            }
            return response.json();
        })
        .then(brands => {
            brandSelect.innerHTML = '<option value="" data-i18n="form.select_brand">Select Brand</option>'; // Reset
            brands.forEach(brand => {
                const option = document.createElement('option');
                option.value = brand.brand_id;
                option.textContent = brand.brand_name;
                brandSelect.appendChild(option);
            });
            brandSelect.disabled = false; // Ensure enabled
        })
        .catch(error => {
            console.error('Error loading car brands:', error);
            showUploadError(`Failed to load car brands: ${error.message}. Please try refreshing.`);
            brandSelect.disabled = true;
            brandSelect.innerHTML = '<option value="">Error loading brands</option>';
        });
}

    document.getElementById('Country').addEventListener('change', function() {
    const selectedCountry = this.value;
    const cityDropdown = document.getElementById('City');
    const cityLabel = document.getElementById('cityLabel');
    cityDropdown.disabled = true; // Disable initially

    if (selectedCountry) {
        cityLabel.style.display = 'block'; // Show label immediately
        cityDropdown.style.display = 'block';
        cityDropdown.innerHTML = `<option value="">Loading cities...</option>`; // Loading state

        fetch(`/api/utils/cities/${selectedCountry}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error ${response.status}: ${response.statusText || 'Failed to load cities'}`);
                }
                return response.json();
            })
            .then(cities => {
                cityDropdown.innerHTML = `<option value="" data-i18n="form.select_city">Select City</option>`; // Reset before populating
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city;
                    option.textContent = city;
                    cityDropdown.appendChild(option);
                });
                cityDropdown.disabled = false; // Enable on success
            })
            .catch(error => {
                console.error('Error loading cities:', error);
                showUploadError(`Failed to load cities for ${selectedCountry}: ${error.message}. Please try selecting the country again or refresh.`);
                cityDropdown.disabled = true;
                cityDropdown.innerHTML = `<option value="">Error loading cities</option>`;
            });
    } else {
        // Hide and reset if no country is selected
        cityDropdown.style.display = 'none';
        cityLabel.style.display = 'none';
        cityDropdown.innerHTML = `<option value="">Select City</option>`;
        cityDropdown.disabled = true;
    }
});

    document.getElementById('CarBrand').addEventListener('change', function() {
    const brandId = this.value;
    const modelSelect = document.getElementById('CarModel');

    modelSelect.disabled = true; // Disable initially or if no brand selected

    if (!brandId) {
        modelSelect.innerHTML = '<option value="" data-i18n="form.select_model">Select Model First</option>';
        return; // Exit if no brand is selected
    }

    modelSelect.innerHTML = '<option value="">Loading models...</option>'; // Loading state

    fetch(`/api/utils/car-models/${brandId}`)
        .then(response => {
            if (!response.ok) {
                 throw new Error(`HTTP error ${response.status}: ${response.statusText || 'Failed to load car models'}`);
            }
            return response.json();
        })
        .then(models => {
            modelSelect.innerHTML = `<option value="">Select model</option>`; // Reset
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.model_id;
                option.textContent = model.model_name;
                modelSelect.appendChild(option);
            });
            modelSelect.disabled = false; // Enable on success
        })
        .catch(error => {
            console.error('Error loading models:', error);
            showUploadError(`Failed to load models for selected brand: ${error.message}. Please try selecting the brand again or refresh.`);
            modelSelect.disabled = true;
            modelSelect.innerHTML = `<option value="">Error loading models</option>`;
        });
});

     // 2. Add real-time validation for fields
function addRealTimeValidation() {
    // Add validation to all required fields
    document.querySelectorAll('input[required], select[required], textarea[required]').forEach(field => {
        field.addEventListener('blur', function() {
            validateField(this);
        });
        
        field.addEventListener('input', function() {
            if (this.classList.contains('invalid')) {
                validateField(this);
            }
        });
    });
    
    // Add price validation to price fields
    document.querySelectorAll('input[type="number"][id$="Price"]').forEach(field => {
        field.addEventListener('input', function() {
            validatePrice(this);
        });
    });
}

function validateField(field) {
    const errorId = field.id + 'Error';
    let errorElement = document.getElementById(errorId);
    
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = errorId;
        errorElement.className = 'error-message';
        field.insertAdjacentElement('afterend', errorElement);
    }
    
    if (!field.value.trim()) {
        field.classList.add('invalid');
        errorElement.textContent = 'This field is required';
        return false;
    } else {
        field.classList.remove('invalid');
        errorElement.textContent = '';
        return true;
    }
}

function validatePrice(field) {
    const errorId = field.id + 'Error';
    let errorElement = document.getElementById(errorId);
    
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = errorId;
        errorElement.className = 'error-message';
        field.insertAdjacentElement('afterend', errorElement);
    }
    
    if (field.value) {
        const price = parseFloat(field.value);
        
        // Check if price is not a number
        if (isNaN(price)) {
            field.classList.add('invalid');
            errorElement.textContent = 'Please enter a valid price';
            return false;
        }
        
        // Check if price is negative
        if (price < 0) {
            field.classList.add('invalid');
            errorElement.textContent = 'Price cannot be negative';
            return false;
        }
        
        // Check if price exceeds database limits (assuming INT or DECIMAL type)
        // MySQL INT has max value of 2147483647
        if (price > 214748364) {
            field.classList.add('invalid');
            errorElement.textContent = 'Price is too high. Maximum allowed is 2,147,483,64';
            return false;
        }
        
        // Check decimal precision (if database column is DECIMAL)
        const decimalParts = field.value.toString().split('.');
        if (decimalParts.length > 1 && decimalParts[1].length > 2) {
            field.classList.add('invalid');
            errorElement.textContent = 'Please enter a price with maximum 2 decimal places';
            return false;
        }
    }
    
    field.classList.remove('invalid');
    errorElement.textContent = '';
    return true;
}

function createImagePreviewContainer() {
    const container = document.createElement('div');
    container.id = 'imagePreviewContainer';
    container.className = 'image-preview-container';
    // Add CSS for image preview
    const style = document.createElement('style');
    style.textContent = `
        .image-preview-container {
            margin-top: 15px;
        }
        
        .image-preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }
        
        .image-preview-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px;
            height: 100px;
        }
        
        .image-preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 3px;
        }
        
        .invalid {
            border-color: #ff4444 !important;
            background-color: #fff8f8;
        }
    `;
    document.head.appendChild(style);
    
    // Insert after the file input
    document.getElementById('Images').insertAdjacentElement('afterend', container);
    return container;
}

// 4. Save form data to localStorage to prevent data loss
function setupFormDataSaving() {
    try {
        // Restore form data on page load
        const savedCategory = localStorage.getItem('selectedCategory');
        if (savedCategory) {
            setCategory(savedCategory); // Assuming setCategory handles its own errors if needed

            // Restore saved fields
            const savedDataRaw = localStorage.getItem('formData');
            const savedData = savedDataRaw ? JSON.parse(savedDataRaw) : {};

            Object.keys(savedData).forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    if (field.type === 'checkbox') {
                        field.checked = savedData[fieldId];
                    } else {
                        field.value = savedData[fieldId];
                    }
                }
            });
        
         // Trigger country change to load cities
            if (savedData.Country) {
                const countrySelect = document.getElementById('Country');
                // Ensure the value is actually set before dispatching event
                if (countrySelect.value === savedData.Country) {
                     const countryEvent = new Event('change');
                     countrySelect.dispatchEvent(countryEvent);

                     // Set timeout to restore city after cities are potentially loaded
                     setTimeout(() => {
                         if (savedData.City) {
                             const citySelect = document.getElementById('City');
                             // Check if city exists in dropdown before setting
                             if (citySelect.querySelector(`option[value="${savedData.City}"]`)) {
                                 citySelect.value = savedData.City;
                             }
                         }
                     }, 700); // Increased timeout slightly
                } else {
                     // If country value wasn't set immediately (e.g., options not loaded yet),
                     // might need a more robust way, maybe wait for country options load
                     console.warn("Could not immediately trigger country change for saved data.");
                }
            }
        }
    } catch (e) {
        console.error("Error reading from localStorage:", e);
        // Optionally inform the user that saved form data couldn't be loaded
        // showUploadError("Could not load previously saved form data.");
    }

    // Save form data as user types/changes
    const formElements = document.querySelectorAll('#productForm input, #productForm select, #productForm textarea');
    formElements.forEach(element => {
        element.addEventListener('change', saveFormData);
        // Also save on input for text fields for more real-time saving
        if (element.tagName === 'INPUT' && element.type !== 'file' && element.type !== 'checkbox' && element.type !== 'radio') {
            element.addEventListener('input', saveFormData);
        }
         // Handle checkbox changes correctly
        if (element.type === 'checkbox'){
             element.addEventListener('change', saveFormData);
        }
    });
}

function saveFormData() {
    try {
        const formData = {};
        document.querySelectorAll('#productForm input, #productForm select, #productForm textarea').forEach(field => {
            // Skip file inputs and potentially the submit button if it's an input type
            if (field.type === 'file' || field.type === 'submit' || !field.id) return;

            if (field.type === 'checkbox') {
                formData[field.id] = field.checked;
            } else {
                formData[field.id] = field.value;
            }
        });

        localStorage.setItem('formData', JSON.stringify(formData));
        const currentCategory = document.getElementById('Category').value;
        if (currentCategory) {
             localStorage.setItem('selectedCategory', currentCategory);
        } else {
             localStorage.removeItem('selectedCategory'); // Remove if no category selected
        }

    } catch (e) {
        console.error("Error writing to localStorage:", e);
        // Optionally inform the user that the form cannot be auto-saved
        // showUploadError("Could not auto-save form data. Storage might be full or disabled.");
    }
}

// 5. Add a clear form button
function addClearFormButton() {
    const submitBtn = document.querySelector('#productForm button[type="submit"]');

    // Check if submit button exists before proceeding
    if (!submitBtn || !submitBtn.parentNode) {
        console.error("Submit button or its parent not found. Cannot add Clear button.");
        return;
    }

    const clearBtn = document.createElement('button');
    clearBtn.type = 'button';
    clearBtn.textContent = 'Clear Form'; // You might want to add i18n here too
    clearBtn.setAttribute('data-i18n', 'form.clear'); // Example i18n attribute
    clearBtn.className = 'clear-button'; // Use class for styling if needed
    clearBtn.style.marginRight = '10px';
    clearBtn.style.backgroundColor = '#6c757d'; // A neutral grey
    clearBtn.style.color = '#fff';
     clearBtn.style.border = 'none';
     clearBtn.style.padding = '12px 20px'; // Match submit button padding
     clearBtn.style.borderRadius = '6px'; // Match submit button radius
     clearBtn.style.cursor = 'pointer';
     clearBtn.style.fontWeight = '600'; // Match submit button weight
     clearBtn.style.transition = 'background-color 0.3s'; // Add hover effect

     // Add a hover effect similar to the submit button
     clearBtn.addEventListener('mouseenter', () => {
         clearBtn.style.backgroundColor = '#5a6268';
     });
     clearBtn.addEventListener('mouseleave', () => {
         clearBtn.style.backgroundColor = '#6c757d';
     });



    clearBtn.addEventListener('click', function() {
        // Use i18n for confirmation message if possible
        if (confirm('Are you sure you want to clear all form data? This cannot be undone.')) {
            try {
                localStorage.removeItem('formData');
                localStorage.removeItem('selectedCategory');
                console.log("Cleared form data from localStorage.");
            } catch (e) {
                console.error("Error clearing localStorage:", e);
                // Inform user even if clearing fails, as reset will still happen
                alert("Could not clear saved data from browser storage, but the form will be reset.");
            }

            // Reset the form visually
            document.getElementById('productForm').reset();

            // Clear dynamic elements and errors
            const errorContainer = document.getElementById('uploadError');
            if(errorContainer) errorContainer.style.display = 'none';
            const errorText = document.getElementById('errorText');
            if(errorText) errorText.textContent = '';

            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
            document.querySelectorAll('.invalid').forEach(el => el.classList.remove('invalid')); // Remove red borders

            const imagePreview = document.getElementById('imagePreviewContainer');
            if (imagePreview) {
                imagePreview.innerHTML = '';
            }

            // Hide city dropdown again as country will be reset
            document.getElementById('City').style.display = 'none';
            document.getElementById('cityLabel').style.display = 'none';
            document.getElementById('City').innerHTML = '<option value="">Select City</option>'; // Clear old options

            // Important: Also hide all category-specific fieldsets and the main form container
             const sections = {
                product: document.getElementById('productFields'),
                job: document.getElementById('jobFields'),
                property: document.getElementById('propertyFields'),
                car: document.getElementById('carFields'),
                boat: document.getElementById('boatFields'),
                mc: document.getElementById('mcFields'),
                formContainer: document.getElementById('productFormContainer')
            };
             Object.keys(sections).forEach(key => {
                 if (sections[key]) {
                     sections[key].style.display = 'none';
                     sections[key].classList.remove('active');
                     if (key !== 'formContainer') {
                        sections[key].querySelectorAll('input, textarea, select').forEach(field => {
                            field.disabled = true; // Ensure fields are disabled
                        });
                     }
                 }
             });
             selectedCategory = ''; // Reset the global variable
             document.getElementById('Category').value = ''; // Clear hidden category field
             // Potentially scroll back to the category selection
             document.querySelector('.kategorierContainer')?.scrollIntoView({ behavior: 'smooth' });


        } // <-- This brace closes the 'if (confirm(...))' block
    }); // <-- This closes the addEventListener callback & parenthesis

    // **** THIS LINE WAS MISSING ****
    // Insert the clear button before the submit button
    submitBtn.parentNode.insertBefore(clearBtn, submitBtn);

} // <-- This brace closes the addClearFormButton function

function showUploadError(message) {
    const errorContainer = document.getElementById('uploadError');
    const errorText = document.getElementById('errorText');
    
    if (!errorContainer || !errorText) {
        console.error('Error elements missing in DOM');
        alert('Error: ' + message);
        return;
    }
    
    // Clear previous messages before showing new one
    errorText.textContent = '';
    errorContainer.style.display = 'flex'; // Or use classList.add('active') if using classes
    errorText.textContent = message;
    
    setTimeout(() => {
        errorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }, 100);
}
    document.addEventListener('DOMContentLoaded', () => {
        loadCountries();
        loadCarBrands();
    });

    document.getElementById('productForm').addEventListener('submit', async function(event) {
    // Prevent form submission initially
    event.preventDefault();

    // Clear all previous error messages
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
    const errorContainer = document.getElementById('uploadError');
    const successContainer = document.getElementById('successMessageContainer');
    const successText = document.getElementById('successText');
    errorContainer.style.display = 'none';
    if(successContainer) successContainer.style.display = 'none';
    let hasError = false; // Reset hasError for submit validation
    
    const selectedCategory = document.getElementById('Category').value;
    if (!selectedCategory) {
        alert('Please select a category');
        return;
    }

    // Title field validation based on category
    const titleFields = {
        'Torget': 'ProductName',
        'Båt': 'BoatProductName',
        'MC': 'MCProductName',
        'Jobb': 'JobTitle',
        'Eiendom': 'propertyTitle',
        'Bil': 'car-ProductName'
    };
    const titleFieldId = titleFields[selectedCategory];
    if (titleFieldId) {
        const titleField = document.getElementById(titleFieldId);
        if (!validateField(titleField)) { // Use validateField for consistency
             hasError = true;
        }
    }

    // Price validation for applicable categories
    if (['Torget', 'Bil', 'Eiendom', 'Båt', 'MC'].includes(selectedCategory)) {
        const priceFields = {
            'Torget': 'Price',
            'Bil': 'car-Price',
            'Eiendom': 'PropertyPrice',
            'Båt': 'BoatPrice',
            'MC': 'MCPrice'
        };
        const priceField = document.getElementById(priceFields[selectedCategory]);
        if (priceField) {
            if (!validatePrice(priceField)) {
                hasError = true;
            }
        }
    }

    // ALWAYS validate Country regardless of category
     const countryField = document.getElementById('Country');
    if (!validateField(countryField)) {
        hasError = true;
    }
    if (countryField.value) { // Only validate city if country is selected and valid
        const cityField = document.getElementById('City');
        if (!validateField(cityField)) {
             hasError = true;
        }
    }

    // --- Image Validation (Count, Size, TYPE) ---
    const fileInput = document.getElementById('Images');
    const files = fileInput.files;

    if (files.length > 5) {
        showUploadError('Maximum 5 images allowed.');
        hasError = true; // Mark error
    }

    let sizeError = false;
    let typeError = false;
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];
    const invalidFileNames = [];

    if (!hasError && files.length > 0) { // Only check size/type if count is okay and files exist
        Array.from(files).forEach(file => {
            // Size Check
            if (file.size > 5 * 1024 * 1024) { // 5MB
                sizeError = true;
            }
            // Type Check (Added)
            if (!file.type || !allowedTypes.some(type => file.type.startsWith(type))) {
                 typeError = true;
                 invalidFileNames.push(file.name); // Collect names for error message
            }
        });

        if (sizeError) {
            showUploadError('One or more images exceed the 5MB size limit.');
            hasError = true; // Mark error
        }
        // Add Type Error Check (Added)
        if (typeError) {
            // Show specific error message about types
            showUploadError(`Invalid file type(s) detected: ${invalidFileNames.join(', ')}. Please upload only valid image files.`);
            hasError = true; // Mark error
        }
    }

     // If any validation errors occurred, scroll and stop
    if (hasError) {
        // Scroll to the first inline error OR the main upload error container
        const firstInlineError = document.querySelector('.error-message:not(:empty)');
        const targetElement = firstInlineError || (errorContainer.style.display !== 'none' ? errorContainer : null);

        if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return; // Stop the submission process
    }

    // --- If NO errors, proceed with submission ---
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.textContent = 'Submitting...'; // Add i18n if needed

    try {
        // Clear local storage *only on successful submission*
        localStorage.removeItem('formData');
        localStorage.removeItem('selectedCategory');
        console.log("Cleared saved form data on successful submission attempt.");


        const formData = new FormData(this);
        // Add selected category explicitly if needed by backend, though it's in hidden input
        // formData.append('selectedCategory', selectedCategory);

        const response = await fetch('/api/products', {
            method: 'POST',
            body: formData
            // Add headers if required by your API (e.g., Authorization)
            // headers: { 'Authorization': 'Bearer YOUR_TOKEN' }
        });

        if (!response.ok) {
            let errorMsg = 'Upload failed. Please try again.';
            try {
                // Try to parse JSON error from backend
                const errorData = await response.json();
                errorMsg = errorData.message || `Server error: ${response.status} ${response.statusText}`;
            } catch (e) {
                // If response is not JSON or parsing fails
                 errorMsg = `Server error: ${response.status} ${response.statusText}`;
            }
             // Re-enable local storage saving if submission fails? Optional.
            // saveFormData(); // Might save partially incorrect data if user doesn't fix
            throw new Error(errorMsg);
        }
        // <<< --- SUCCESS --- >>>
        // Hide error container if it was somehow visible
        if (errorContainer) errorContainer.style.display = 'none';

        // Show success message
        if (successContainer && successText) {
            successText.textContent = 'Ad submitted successfully! Redirecting...'; // Set message text
            successContainer.style.display = 'flex'; // Show the container
            successContainer.scrollIntoView({ behavior: 'smooth', block: 'center' }); // Scroll to it
        } else {
            console.error("Success message container elements not found!");
        }

        // Wait for a few seconds before redirecting
        setTimeout(() => {
            window.location.href = '/mine-annonser'; // Redirect after delay
        }, 2500); // 2500 milliseconds = 2.5 seconds delay

    } catch (error) {
        console.error('Submission error:', error);
        showUploadError(`Submission failed: ${error.message}`);
        // Ensure success message is hidden on error
        if (successContainer) successContainer.style.display = 'none';

    } finally {
        // Reset button state (will happen just before redirect starts or if an error occurred)
        submitBtn.disabled = false; // Re-enable *unless* redirecting immediately
        submitBtn.textContent = originalText;
    }
 });

// 3. Image preview functionality
document.getElementById('Images').addEventListener('change', function(event) {
    const errorContainer = document.getElementById('uploadError');
    const errorText = document.getElementById('errorText');
    const previewContainer = document.getElementById('imagePreviewContainer') || createImagePreviewContainer();
    const files = event.target.files;
    let invalidFilesFound = false;

    // --- START: New File Type Validation ---
    if (files.length > 0) {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];
        const invalidFileNames = [];

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            // Check if file.type is empty (can happen) or doesn't start with 'image/'
            // More robust check: Use a list of allowed types.
            if (!file.type || !allowedTypes.some(type => file.type.startsWith(type))) {
                invalidFilesFound = true;
                invalidFileNames.push(file.name); // Collect names of invalid files
                console.warn(`Invalid file type detected: ${file.name} (${file.type || 'unknown type'})`);
            }
        }

        if (invalidFilesFound) {
            // Show error message listing problematic files
            showUploadError(`Invalid file type detected for: ${invalidFileNames.join(', ')}. Please upload only image files (JPEG, PNG, GIF, WEBP, SVG).`);
            // Clear the file input to remove the invalid selection
            event.target.value = null;
            // Clear any previews that might have started rendering
            previewContainer.innerHTML = '';
            return; // Stop further processing (like preview generation)
        }
    }
    // --- END: New File Type Validation ---

    // Clear any previous validation errors if files are now valid
    if (!invalidFilesFound) {
       errorContainer.style.display = 'none';
       errorText.textContent = '';
    }

    // --- Image Preview Logic (remains mostly the same) ---
    previewContainer.innerHTML = ''; // Clear previous previews first

    if (files.length > 0) {
        // Check file count *again* after validation, as input might have been cleared
        if (files.length > 5) {
             showUploadError('Maximum 5 images allowed. Please select again.');
             event.target.value = null; // Clear selection
             return;
        }

        // Check size *again*
        let sizeError = false;
        Array.from(files).forEach(file => {
            if (file.size > 5 * 1024 * 1024) { // 5MB
                sizeError = true;
            }
        });
        if (sizeError) {
            showUploadError('One or more images exceed the 5MB size limit. Please select again.');
            event.target.value = null; // Clear selection
            return;
        }

        // If all checks pass, proceed with preview
        const previewHeader = document.createElement('h4');
        previewHeader.textContent = 'Image Previews';
        previewContainer.appendChild(previewHeader);

        const previewGrid = document.createElement('div');
        previewGrid.className = 'image-preview-grid';
        previewContainer.appendChild(previewGrid);

        for (let i = 0; i < files.length; i++) { // Loop through all selected files now
            const file = files[i];
            // No need to check type again here, already validated

            const reader = new FileReader();
            reader.onload = function(e) {
                const previewItem = document.createElement('div');
                previewItem.className = 'image-preview-item';

                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = `Preview of ${file.name}`; // More descriptive alt text

                previewItem.appendChild(img);
                previewGrid.appendChild(previewItem);
            };
            reader.readAsDataURL(file);
        }

    }
});

// Initialize all improvements
document.addEventListener('DOMContentLoaded', function() {
    // Add price validation to all price input fields
    const priceInputs = [
        document.getElementById('Price'), 
        document.getElementById('car-Price'),
        document.getElementById('PropertyPrice'), 
        document.getElementById('BoatPrice'), 
        document.getElementById('MCPrice')
    ];

    priceInputs.forEach(input => {
        if (input) {
            input.addEventListener('input', function() {
                validatePrice(this);
            });
            
            input.addEventListener('blur', function() {
                validatePrice(this);
            });
        }
    });

    loadCountries();
    loadCarBrands();
    addRealTimeValidation();
    setupFormDataSaving();
    addClearFormButton();
});

</script>
</body>
</html>