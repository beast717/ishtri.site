<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Add necessary meta tags, CSS links (including /css/style.css) -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Saved Searches</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/toast.js" defer></script>
    <link rel="icon" href="/ishtri1.png" sizes="16x16 32x32" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .saved-searches-container { max-width: 900px; margin: 2rem auto; padding: 1rem; }
        .search-item { background: white; border: 1px solid #eee; border-radius: 8px; margin-bottom: 1rem; padding: 15px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .search-item h3 { margin: 0 0 5px 0; font-size: 1.1em; }
        .search-item .category { font-size: 0.9em; color: #555; margin-bottom: 10px; }
        .search-item .filters-summary { font-size: 0.85em; color: #777; max-height: 40px; overflow: hidden; text-overflow: ellipsis; }
        .search-item-actions button { margin-left: 10px; /* Remove padding, font-size, cursor */ }
        /* .delete-btn { background-color: #dc3545; color: white; border: none; border-radius: 4px; } */
        /* .view-btn { background-color: #007bff; color: white; border: none; border-radius: 4px; } */
        .no-searches { text-align: center; color: #777; margin-top: 2rem; }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="saved-searches-container">
        <h1>My Saved Searches</h1>

        <div id="savedSearchesList">
            <p>Loading saved searches...</p>
            <!-- Searches will be loaded here -->
        </div>
    </div>

    <!-- Include shared JS for navbar, cookie consent etc. -->
    <script src="/shared.js"></script>
    <!-- Page specific JS -->
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const listContainer = document.getElementById('savedSearchesList');
            try { await loadSavedSearches(); } catch (e) {console.error(e)}

            async function loadSavedSearches() {
                    // Fetch countries data to map country IDs to names
                    let cityMap = {};
                    let countryMap = {};
                    let countriesData = [];
                    try {
                        const countriesResponse = await fetch('/api/utils/countries');
                        countriesData = await countriesResponse.json();
                        countriesData.forEach(country => {
                            countryMap[country.country] = country.country;
                            country.cities.forEach((city, index) => {
                                cityMap[country.city_ids[index]] = city;
                            });
                        });
                    } catch (countriesError) {
                        console.error("Error fetching countries:", countriesError);
                    }

                    const searchesResponse = await fetch('/api/saved-searches');
                    if (!searchesResponse.ok) {
                        if (searchesResponse.status === 401) throw new Error('Please log in to view saved searches.');
                        throw new Error('Failed to load saved searches.');
                    }
                    const searches = await searchesResponse.json();
                    listContainer.innerHTML = ''; // Clear loading message
                    if (!searches || searches.length === 0) {
                        listContainer.innerHTML = '<p class="no-searches">You have no saved searches yet.</p>';
                        return;
                    }

                    searches.forEach(search => {
                        const item = document.createElement('div');
                        item.className = 'search-item';
                        item.dataset.searchId = search.search_id;

                        // Simple filter summary (can be improved)
                        let filtersObj; 
                        let filtersSummary = 'Filters: ';
                        // --- START: ROBUST PARSING LOGIC (similar to matchingService.js) ---
                        try {
                            if (typeof search.filters === 'string') {
                                // It's a string, attempt to parse
                                filtersObj = search.filters ? JSON.parse(search.filters) : {};
                                console.log(`Parsed filters STRING for search ${search.search_id}:`, filtersObj); // Debug log
                            } else if (typeof search.filters === 'object' && search.filters !== null) {
                                // It's already an object, use it directly
                                filtersObj = search.filters;
                                console.log(`Using filters OBJECT directly for search ${search.search_id}:`, filtersObj); // Debug log
                            } else {
                                // Handle null, undefined, or other unexpected types
                                console.warn(`Unexpected type or null filters for search ${search.search_id}:`, search.filters);
                                filtersObj = {};
                            }

                            // Check if filters object is empty after potential parsing/assignment
                            if (Object.keys(filtersObj).length === 0) {
                                filtersSummary = 'No specific filters';
                            } else {
                                // --- EXISTING SUMMARY GENERATION LOGIC using filtersObj ---
                                filtersSummary += Object.entries(filtersObj).map(([key, value]) => {
                                    // --- START ENHANCED FORMATTING ---
                                    if (key === 'cities' && Array.isArray(value)) {
                                        const cityNames = value.map(cityId => cityMap[cityId] || `Unknown City (ID: ${cityId})`);
                                        return `cities: ${cityNames.join(', ')}`;
                                    } else if (key === 'countries' && Array.isArray(value)) {
                                        const countryNames = value.map(countryName => countryMap[countryName] || countryName);
                                        return `countries: ${countryNames.join(', ')}`;
                                    } else if (typeof value === 'object' && value !== null && !Array.isArray(value) && (value.hasOwnProperty('from') || value.hasOwnProperty('to'))) {
                                        const rangeParts = [];
                                        if (value.from !== null && value.from !== undefined && value.from !== '') rangeParts.push(value.from);
                                        if (value.to !== null && value.to !== undefined && value.to !== '') rangeParts.push(value.to);
                                        const formattedRange = rangeParts.join(' - ');
                                        // Format key (e.g., yearRange -> Year Range)
                                        const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).replace('Range', ' Range');
                                        return `${formattedKey}: ${formattedRange || 'Any'}`;
                                    } else if (Array.isArray(value)) {
                                        if (value.length > 0) {
                                             const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()); // e.g. fuel_types -> Fuel Types
                                             return `${formattedKey}: ${value.join(', ')}`;
                                        } else { return ''; }
                                    } else if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
                                        const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()); // e.g. subCategory -> Sub Category
                                        return `${formattedKey}: ${value}`;
                                    } else { return ''; }
                                    // --- END ENHANCED FORMATTING ---
                                }).filter(Boolean) // Remove empty strings
                                  .slice(0, 3)    // Limit to first 3 filters shown
                                  .join('; ');     // Join with semicolon and space

                                if (Object.keys(filtersObj).length > 3 && filtersSummary.length > 0 && filtersSummary !== 'Filters: ') filtersSummary += '...'; // Add ellipsis if more than 3 filters exist
                                if (filtersSummary === 'Filters: ') filtersSummary = 'No specific filters'; // Catch case where all filters resulted in empty strings
                            }

                        } catch (e) {
                            // This catch block now specifically handles errors from JSON.parse if input was a malformed *string*
                            console.error(`Error parsing filters JSON STRING for display (Search ID: ${search.search_id}):`, search.filters, e);
                            filtersSummary = "Error displaying filters.";
                            filtersObj = {}; // Ensure filtersObj is an empty object on error
                        }

                        item.innerHTML = `
                            <div>
                                <h3>${search.search_name || 'Untitled Search'}</h3>
                                <div class="category">Category: ${search.category}</div>
                                <div class="filters-summary">${filtersSummary}</div>
                            </div>
                            <div class="search-item-actions">
                                <button class="btn btn-primary view-btn" data-category="${search.category}" data-filters='${JSON.stringify(filtersObj || {})}'>View Results</button>
                                <button class="btn btn-danger delete-btn">Delete</button>
                            </div>
                        `;

                        // Attach delete listener
                        item.querySelector('.delete-btn').addEventListener('click', async (e) => {
                            const searchId = item.dataset.searchId;
                            if (!confirm(`Are you sure you want to delete the search "${search.search_name}"?`)) return;

                            try {
                                const deleteResponse = await fetch(`/api/saved-searches/${searchId}`, { method: 'DELETE' });
                                if (!deleteResponse.ok) {
                                     const errorData = await deleteResponse.json();
                                     throw new Error(errorData.message || 'Failed to delete search.');
                                }
                                item.remove(); // Remove from UI
                                window.toast.show('Search deleted.', 'success');
                                // If list becomes empty, show message
                                if (listContainer.children.length === 0) {
                                     listContainer.innerHTML = '<p class="no-searches">You have no saved searches yet.</p>';
                                }
                            } catch (error) {
                                console.error("Delete error:", error);
                                window.toast.show(`Error: ${error.message}`, 'error');
                            }
                        });

                         // Attach View Results listener
                         item.querySelector('.view-btn').addEventListener('click', (e) => {
                             const category = e.target.dataset.category;
                             const filters = JSON.parse(e.target.dataset.filters);
                             const params = new URLSearchParams();
                             params.set('category', category);

                             // Convert saved filter names/structure to URL query parameters
                            // This needs to exactly match what TorgetKat.html expects!
                            Object.entries(filters).forEach(([key, value]) => {
                                if (value !== null && value !== '') {
                                    if (key === 'car_brands') {
                                        params.set('carBrand', value.join(','));
                                    } else if (key === 'property_types') {
                                        params.set('propertyType', value.join(','));
                                    } else if (key === 'sizeRange') {
                                        if (value.from) params.set('sizeSqmFrom', value.from);
                                        if (value.to) params.set('sizeSqmTo', value.to);
                                    } else if (key === 'roomsRange') {
                                        if (value.from) params.set('numRoomsFrom', value.from);
                                        if (value.to) params.set('numRoomsTo', value.to);
                                    } else if (key === 'bathroomsRange') {
                                        if (value.from) params.set('numBathroomsFrom', value.from);
                                        if (value.to) params.set('numBathroomsTo', value.to);
                                    } else if (key === 'energy_classes') {
                                        params.set('energyClass', value.join(','));
                                    } else if (key === 'employment_types') {
                                        params.set('employmentTypes', value.join(','));
                                    } else if (key === 'salaryRange') {
                                        if (value.from) params.set('salaryFrom', value.from);
                                        if (value.to) params.set('salaryTo', value.to);
                                    } else if (key === 'applicationDeadline') {
                                        params.set('deadline', value);
                                    } else  if (key === 'yearRange') {
                                        if (value.from) params.set('yearFrom', value.from);
                                        if (value.to) params.set('yearTo', value.to);
                                    } else if (key === 'mileageRange') {
                                        if (value.from) params.set('mileageFrom', value.from);
                                        if (value.to) params.set('mileageTo', value.to);
                                    } else if (key === 'fuel_types') {
                                        params.set('fuelTypes', value.join(','));
                                    } else if (key === 'transmission_types') {
                                        params.set('transmissionTypes', value.join(','));
                                    } else if (Array.isArray(value)) {
                                        if (value.length > 0) params.set(key, value.join(','));
                                    } else if (typeof value === 'object') { // Handle range objects
                                        if (value.from && !key.endsWith('Range')) params.set(`${key}_from`, value.from); // e.g., year_from
                                        if (value.to) params.set(`${key}_to`, value.to); // e.g., year_to
                                    } else {
                                        params.set(key, value);
                                    }
                                }
                            });

                            // Redirect to the category page with filters applied
                             // **Important**: Make sure the URL path (/TorgetKat) is correct!
                            window.location.href = `/TorgetKat?${params.toString()}`;
                         });


                        listContainer.appendChild(item);
                    });
                }
        });
    </script>
</body>
</html>