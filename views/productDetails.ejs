<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://unpkg.com/i18next-http-backend/i18nextHttpBackend.min.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <style>
        
      
.productDetailsContainer {
    padding: 20px;
    max-width: 800px;
    margin: auto;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.carousel {
    position: relative;
    max-width: 100%;
    height: 300px;
    margin-bottom: 20px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}

.carousel img {
    width: 100%;
    height: auto;
    display: none;
}

.carousel img.active {
    display: block;
}

.carousel .prev, .carousel .next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    cursor: pointer;
    padding: 10px;
    border-radius: 50%;
}

.carousel .prev {
    left: 10px;
}

.carousel .next {
    right: 10px;
}

.sendMessage {
    margin-top: 10px;
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.sendMessage:hover {
    background-color: #0056b3;
}

.soldLabel {
    color: #ffffff;
    background-color: #ff5722;
    padding: 5px 8px;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    margin-left: 5px;
    display: inline-block;
}

/* Custom Modal Styles */
#messageModal {
display: none;
position: fixed;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: white;
padding: 30px;
border: 1px solid #e0e0e0;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
z-index: 101; /* Above the overlay */
border-radius: 8px;
max-width: 400px;
width: 90%;
font-family: Arial, sans-serif;
}

#overlay {
display: none;
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: rgba(0, 0, 0, 0.5);
z-index: 100;
backdrop-filter: blur(5px); /* Add blur effect to the background */
}

#messageModal h3 {
margin-top: 0;
font-size: 20px;
color: #333;
text-align: center;
margin-bottom: 20px;
}

#messageInput {
width: 100%;
padding: 10px;
border: 1px solid #e0e0e0;
border-radius: 4px;
font-size: 14px;
line-height: 1.5;
resize: vertical;
margin-bottom: 20px;
box-sizing: border-box;
}

#messageInput:focus {
border-color: #007bff;
outline: none;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

#sendMessageButton, #cancelMessageButton {
padding: 10px 20px;
margin: 5px;
border: none;
border-radius: 4px;
cursor: pointer;
font-size: 14px;
transition: background-color 0.3s ease;
}

#sendMessageButton {
background-color: #007bff;
color: white;
}

#sendMessageButton:hover {
background-color: #0056b3;
}

#cancelMessageButton {
background-color: #f0f0f0;
color: #333;
}

#cancelMessageButton:hover {
background-color: #e0e0e0;
}

/* Button Container for Alignment */
#messageModal .button-container {
display: flex;
justify-content: flex-end;
margin-top: 10px;
}

#loginModal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 30px;
    border: 1px solid #e0e0e0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 101;
    border-radius: 8px;
    max-width: 400px;
    width: 90%;
    font-family: Arial, sans-serif;
    text-align: center;
}

#loginModal h3 {
    margin-top: 0;
    font-size: 20px;
    color: #333;
    margin-bottom: 15px;
}

#loginModal p {
    color: #666;
    margin-bottom: 25px;
}

#loginModal .button-container {
    display: flex;
    justify-content: center;
    gap: 10px;
}

#loginButton1 {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#loginButton1:hover {
    background-color: #0056b3;
}

#cancelLoginButton {
    background-color: #f0f0f0;
    color: #333;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#cancelLoginButton:hover {
    background-color: #e0e0e0;
}

#loginOverlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 100;
    backdrop-filter: blur(5px);
}

.custom-title {
    color: #666;
    font-size: 1.2rem;
    margin-top: -10px;
    margin-bottom: 15px;
    font-weight: normal;
}
    </style>
</head>
<body>
    <div class="page-content">

     <%- include('partials/navbar') %>
     <script src="/shared.js"></script>

    <!-- Custom Modal for Sending Messages -->
    <div id="messageModal">
        <h3>Send Message to Owner</h3>
        <textarea id="messageInput" rows="5" cols="40" placeholder="Type your message here..."></textarea>
        <br><br>
        <button id="sendMessageButton">Send</button>
        <button id="cancelMessageButton">Cancel</button>
    </div>
    <div id="overlay"></div>

    <div class="productDetailsContainer">
        <div class="carousel" id="imageCarousel">
            <!-- Images will be dynamically loaded -->
            <button class="prev" onclick="prevImage()">❮</button>
            <button class="next" onclick="nextImage()">❯</button>
        </div>

        <h1 id="productTitle">Product Title</h1>
        <p><strong>Price</strong> <span id="productPrice"></span></p>
        <p><strong data-i18n="product_details.location">Sted:</strong> <span id="productLocation"></span></p>
        <p id="productDescription">Product Description</p>

        <button class="sendMessage" id="contactOwner" data-i18n="product_details.contact_owner">Kontakt eier</button>
        <button id="favoriteButton" class="sendMessage">Favorite</button>
    </div>
    <div id="loginModal">
    <h3>You need to log in to favorite this product</h3>
    <p>Please log in to access this feature.</p>
    <div class="button-container">
        <button id="loginButton1">Log In</button>
        <button id="cancelLoginButton">Cancel</button>
    </div>
</div>
<div id="loginOverlay"></div>

    </div>

    <script>
    (function () {
        // ========== MODAL HANDLING ========== //
        // Message Modal
        function showMessageModal() {
            document.getElementById('messageModal').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
        }

        function hideMessageModal() {
            document.getElementById('messageModal').style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('messageInput').value = '';
        }

        // Login Modal
        function showLoginModal() {
            document.getElementById('loginModal').style.display = 'block';
            document.getElementById('loginOverlay').style.display = 'block';
        }

        function hideLoginModal() {
            document.getElementById('loginModal').style.display = 'none';
            document.getElementById('loginOverlay').style.display = 'none';
        }

        // ========== DOM REFERENCES ========== //
        const messageInput = document.getElementById('messageInput');
        const favoriteButton = document.getElementById('favoriteButton');
        const urlParams = new URLSearchParams(window.location.search);
        const productdID = urlParams.get('productdID');
        let currentImageIndex = 0;

        // ========== MESSAGE FUNCTIONALITY ========== //
        document.getElementById('contactOwner').addEventListener('click', () => {
            fetch('/api/auth/current-user')
                .then(response => response.json())
                .then(data => data.brukernavn ? showMessageModal() : window.location.href = '/login')
                .catch(console.error);
        });

        document.getElementById('sendMessageButton').addEventListener('click', () => {
            const messageContent = messageInput.value.trim();
            messageContent ? sendMessage(productdID, messageContent) : alert('Please enter a message.');
        });

        document.getElementById('cancelMessageButton').addEventListener('click', hideMessageModal);

        // ========== FAVORITE FUNCTIONALITY ========== //
        function initializeFavorites() {
            // Check backend for current favorite status
            fetch('/api/favorites')
                .then(response => response.json())
                .then(favorites => {
                    const isFavorited = favorites.some(p => p.ProductdID == productdID);
                    favoriteButton.textContent = isFavorited ? 'Unfavorite' : 'Favorite';
                    favoriteButton.classList.toggle('unfavorite', isFavorited);
                })
                .catch(console.error);
        }

        document.getElementById('favoriteButton').addEventListener('click', () => {
            fetch('/api/auth/current-user')
                .then(response => response.json())
                .then(data => data.brukernavn ? toggleFavorite() : showLoginModal())
                .catch(console.error);
        });

        function toggleFavorite() {
            fetch('/api/favorites', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ productdID })
            })
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(data => {
                const newState = data.message.includes('Added');
                favoriteButton.textContent = newState ? 'Unfavorite' : 'Favorite';
                favoriteButton.classList.toggle('unfavorite', newState);
            })
            .catch(error => {
                console.error("Favorite error:", error);
                alert(`Failed to toggle favorite. Please try again.`);
            });
        }

        // ========== LOGIN MODAL HANDLERS ========== //
        document.getElementById('loginButton1').addEventListener('click', () => window.location.href = '/login');
        document.getElementById('cancelLoginButton').addEventListener('click', hideLoginModal);

        // ========== PRODUCT INITIALIZATION ========== //
        fetch(`/api/products/${productdID}`)
        .then(response => response.json())
        .then(product => {
            const isJob = product.category === 'Jobb';
            const isCar = product.category === 'Bil';
            const isProperty = product.category === 'Eiendom';

            // Get DOM elements first
            const titleElement = document.getElementById('productTitle');
            const priceElement = document.getElementById('productPrice');
            const locationElement = document.getElementById('productLocation');
            const descElement = document.getElementById('productDescription');

            // Update title
            titleElement.textContent = isJob ? product.JobTitle : 
                                  isCar ? `${product.brand_name} ${product.model_name}` : 
                                  product.ProductName;

            if (product.Sold) {
                const soldLabel = document.createElement('span');
                soldLabel.className = 'soldLabel';
                soldLabel.textContent = '(Sold)';
                titleElement.appendChild(soldLabel);
            }

            // Handle amenities with proper error checking
            let amenities = [];
            try {
              if (product.Amenities && product.Amenities !== '[]') {
                amenities = JSON.parse(product.Amenities);
              }
            } catch (e) {
              // Fallback for malformed JSON
              amenities = typeof product.Amenities === 'string' ? 
                          product.Amenities.split(',') : 
                          [];
            }

             // Handle Property Details
            if (isProperty) {
                // Price display
                priceElement.innerHTML = `
                    ${product.Price} kr<br>
                    <strong>Type:</strong> ${product.PropertyType}<br>
                    <strong>Size:</strong> ${product.SizeSqm} m²
                `;

                // Description section
                descElement.innerHTML = `
                    <div class="property-details">
                        <p><strong>Property Type:</strong> ${product.PropertyType}</p>
                        <p><strong>Size:</strong> ${product.SizeSqm} m²</p>
                        <p><strong>Rooms:</strong> ${product.NumRooms}</p>
                        <p><strong>Bathrooms:</strong> ${product.NumBathrooms}</p>
                        <p><strong>Year Built:</strong> ${product.YearBuilt || 'Not specified'}</p>
                        <p><strong>Energy Class:</strong> ${product.EnergyClass || 'Not specified'}</p>
                        <p><strong>Amenities:</strong> ${amenities.join(', ') || 'Ingen spesielle fasiliteter'}</p>
                    </div>
                    ${product.Description ? `<div class="description">${product.Description}</div>` : ''}
                `;

                // Update location
                locationElement.textContent = product.Location;
            }
            // Handle car details
            else if (isCar) {
                const customTitleElement = document.createElement('h2');
                customTitleElement.className = 'custom-title';
                customTitleElement.textContent = product.ProductName;
                titleElement.insertAdjacentElement('afterend', customTitleElement);

                priceElement.innerHTML = `
                    ${product.Price} kr<br>
                    <strong data-i18n="form.brand">Brand:</strong> ${product.brand_name}<br>
                    <strong data-i18n="form.model">Model:</strong> ${product.model_name}<br>
                    <strong data-i18n="form.year">Year:</strong> ${product.Year}<br>
                    <strong data-i18n="form.mileage">Mileage:</strong> ${product.Mileage}
                `;

                descElement.innerHTML = `
                    ${product.Description || ''}
                    <p><strong data-i18n="form.fuel_type">Fuel Type:</strong> <span data-i18n="fuel.${product.FuelType.toLowerCase()}">${product.FuelType}</span></p>
                    <p><strong data-i18n="form.transmission">Transmission:</strong> <span data-i18n="transmission.${product.Transmission.toLowerCase()}">${product.Transmission || 'Not specified'}</span></p>
                `;
            }
            // Handle job details
            else if (isJob) {
                priceElement.innerHTML = `<strong data-i18n="form.employment_type">Ansettelsesform:</strong> ${product.EmploymentType}`;

                descElement.innerHTML = `
                    <p><strong data-i18n="form.company_name">Bedrift:</strong> ${product.CompanyName}</p>
                    <p><strong data-i18n="form.salary">Lønn:</strong> ${product.Salary}</p>
                    <p><strong data-i18n="form.deadline">Søknadsfrist:</strong> ${product.ApplicationDeadline}</p>
                    <p><strong data-i18n="form.contact_email">Kontakt-e-post:</strong> ${product.ContactEmail}</p>
                    ${product.JobDescription}
                `;
            }
            // Default case
            else {
                priceElement.textContent = `${product.Price} kr`;
                descElement.textContent = product.Description;
            }

            // Location display
            locationElement.textContent = isJob ? product.Location : 
                      isCar ? `${product.Location}${product.country ? ', ' + product.country : ''}` 
                      : product.Location;

            // Handle images
            const images = product.Images.split(',').filter(img => img.trim());
            const carousel = document.getElementById('imageCarousel');
            carousel.querySelectorAll('img').forEach(img => img.remove());
            
            images.forEach((imgSrc, index) => {
                const img = document.createElement('img');
                img.src = `/uploads/${imgSrc.trim()}`;
                if (index === 0) img.classList.add('active');
                carousel.appendChild(img);
            });

            updateCarouselButtons(images.length);
        });

        // ========== CAROUSEL CONTROLS ========== //
        function updateCarouselButtons(imageCount) {
            document.querySelectorAll('.carousel button').forEach(btn => {
                btn.style.display = imageCount <= 1 ? 'none' : 'block';
            });
        }

        window.prevImage = function() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        window.nextImage = function() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex + 1) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        // ========== INITIALIZE PAGE ========== //
        window.addEventListener('load', () => {
            initializeFavorites();
            checkUnreadMessages(); // Assuming this is defined elsewhere
        });

        // ========== MESSAGE SENDING ========== //
         function sendMessage() {
            const messageContent = messageInput.value.trim();
            
            if (!productdID || !messageContent) {
                alert('Missing required information');
                return;
            }

            fetch('/api/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ 
                    productdID: productdID, 
                    messageContent: messageContent 
                })
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to send message');
                alert('Message sent successfully!');
                hideMessageModal();
            })
            .catch(error => {
                console.error('Message error:', error);
                alert(error.message);
            });
        }

    })();
</script>
</body>
</html>