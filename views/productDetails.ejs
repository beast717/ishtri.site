<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="/ishtri1.png" sizes="16x16 32x32" type="image/png"> <!-- Use root-relative path -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- SEO and Social Media Meta Tags -->
    <!-- Title Tag: Be concise and descriptive. Use product name if available. -->
    <title><%= typeof product !== 'undefined' ? `${product.ProductName} in ${product.Location} - ${product.category} | Ishtri` : 'Product Details | Ishtri' %></title>

    <!-- Meta Description: Summarize the page content for search engines. -->
    <meta name="description" content="<%= typeof product !== 'undefined' ? `Find a great deal on a ${product.ProductName} located in ${product.Location}. See photos, price of ${product.Price}$, and contact the seller directly on Ishtri.` : 'Explore product details on Ishtri.' %>">

    <!-- Keywords: Relevant terms for search. -->
    <meta name="keywords" content="<%= typeof product !== 'undefined' ? product.ProductName + ', ' + product.category + ', buy, sell, marketplace, Ishtri' : 'product details, marketplace, buy, sell, Ishtri' %>">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="product">
    <meta property="og:url" content="<%= typeof product !== 'undefined' ? 'https://ishtri.site/productDetails?productdID=' + product.ProductdID : 'https:/ishtri.site' %>"> <!-- Replace with actual domain and URL -->
    <meta property="og:title" content="<%= typeof product !== 'undefined' ? product.ProductName + ' | Ishtri' : 'Product Details | Ishtri' %>">
    <meta property="og:description" content="<%= typeof product !== 'undefined' ? 'View details for ' + product.ProductName + '.' : 'Explore product details on Ishtri.' %>">
    <!-- Use the first product image for OG image if available -->
    <meta property="og:image" content="<%= typeof product !== 'undefined' && product.Images && product.Images.split(',').length > 0 ? baseUrl + '/uploads/' + product.Images.split(',')[0].trim() : baseUrl + '/images/default-product.png' %>"> <!-- Replace with actual domain/path -->

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="<%= typeof product !== 'undefined' ? 'https://ishtri.site/productDetails?productdID=' + product.ProductdID : 'https://ishtri.site' %>"> <!-- Replace with actual domain and URL -->
    <meta property="twitter:title" content="<%= typeof product !== 'undefined' ? product.ProductName + ' | Ishtri' : 'Product Details | Ishtri' %>">
    <meta property="twitter:description" content="<%= typeof product !== 'undefined' ? 'View details for ' + product.ProductName + '.' : 'Explore product details on Ishtri.' %>">
    <!-- Use the first product image for Twitter image if available -->
    <meta property="twitter:image" content="<%= typeof product !== 'undefined' && product.Images && product.Images.split(',').length > 0 ? '/uploads/' + product.Images.split(',')[0].trim() : '/images/default-product.png' %>"> <!-- Replace with actual domain/path -->

    <!-- Other Meta Tags -->
    <meta name="robots" content="index, follow"> <!-- Allow search engines to index -->
    <link rel="canonical" href="<%= typeof product !== 'undefined' ? baseUrl + '/productDetails?productdID=' + product.ProductdID : baseUrl %>" /> <!-- Replace with actual domain and URL -->

    <!-- Stylesheets and Scripts -->
    <link rel="stylesheet" href="/css/main.css"> <!-- Use root-relative path -->
    <script src="/js/toast.js"></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/backToTop.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>

<!-- ADD THIS SCRIPT TO THE <head> of productDetails.html -->
    <% if (typeof product !== 'undefined') { %>
    <script type="application/ld+json">
    {
      "@context": "https://schema.org/",
      "@type": "Product",
      "name": "<%= product.ProductName %>",
      "image": [
        <% const images = product.Images.split(',').filter(img => img.trim()); %>
        <% images.forEach((img, index) => { %>
          "<%= baseUrl %>/uploads/<%= img.trim() %>"<%= index < images.length - 1 ? ',' : '' %>
        <% }); %>
       ],
      "description": "<%= product.Description.replace(/"/g, '\\"') %>",
      "sku": "<%= product.ProductdID %>",
      "mpn": "<%= product.ProductdID %>",
      <% if (product.brand_name) { %>
      "brand": {
        "@type": "Brand",
        "name": "<%= product.brand_name %>"
      },
      <% } %>
      "offers": {
        "@type": "Offer",
        "url": "<%= baseUrl %>/productDetails?productdID=<%= product.ProductdID %>",
        "priceCurrency": "USD", /* CHANGE TO YOUR CURRENCY (e.g., NOK) */
        "price": "<%= product.Price %>",
        "availability": "<%= product.Sold ? 'https://schema.org/SoldOut' : 'https://schema.org/InStock' %>",
        "itemCondition": "https://schema.org/UsedCondition" /* Or NewCondition, etc. */
      },
      "seller": {
        "@type": "Person", /* Or Organization */
        "name": "Seller on Ishtri" /* If you have the seller's name, use it here */
      }
    }
    </script>
    <% } %>
    
   
</head>
<body>
    <div class="page-content">

     <%- include('partials/navbar') %>
     <script src="/shared.js"></script>

    <!-- Custom Modal for Sending Messages -->
    <div id="messageModal">
        <h3>Send Message to Owner</h3>
        <textarea id="messageInput" rows="5" cols="40" placeholder="Type your message here..."></textarea>
        <br><br>
        <button id="sendMessageButton" class="btn btn-primary">Send</button>
        <button id="cancelMessageButton" class="btn btn-secondary">Cancel</button>
    </div>
    <div id="overlay"></div>

    <div class="productDetailsContainer">
        <div id="productSkeleton" class="skeleton-container">
            <div class="skeleton-image skeleton"></div>
            <div class="skeleton-title skeleton"></div>
            <div class="skeleton-price skeleton"></div>
            <div class="skeleton-location skeleton"></div>
            <div class="skeleton-description skeleton"></div>
        </div>

        <div class="carousel" id="imageCarousel" style="display: none;">
            <!-- Images will be dynamically loaded -->
            <button class="prev" onclick="prevImage()">❮</button>
            <button class="next" onclick="nextImage()">❯</button>
        </div>

        <h1 id="productTitle" style="display: none;">Product Title</h1>
        <p style="display: none;"><strong>Price</strong> <span id="productPrice"></span></p>
        <p style="display: none;"><strong data-i18n="product_details.location">Location:</strong> <span id="productLocation"></span></p>
        <p id="productDescription" style="display: none;">Product Description</p>

        <button class="btn btn-primary sendMessage" id="contactOwner" style="display: none;" data-i18n="product_details.contact_owner">Contact owner</button>
        <button id="favoriteButton" class="btn btn-primary sendMessage" style="display: none;">Favorite</button>
    </div>
    <div id="loginModal">
    <h3>You need to log in to favorite this product</h3>
    <p>Please log in to access this feature.</p>
    <div class="button-container">
        <button id="loginButton1" class="btn btn-primary">Log In</button>
        <button id="cancelLoginButton" class="btn btn-secondary">Cancel</button>
    </div>
</div>
<div id="loginOverlay"></div>

    </div>

    <div class="toast-container" id="toastContainer"></div>
    <div class="back-to-top" id="backToTop">
        <i class="fas fa-arrow-up"></i>
    </div>

    <script>
    (function () {
        // ========== MODAL HANDLING ========== //
        // Message Modal
        function showMessageModal() {
            document.getElementById('messageModal').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
        }

        function hideMessageModal() {
            document.getElementById('messageModal').style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('messageInput').value = '';
        }

        // Login Modal
        function showLoginModal() {
            document.getElementById('loginModal').style.display = 'block';
            document.getElementById('loginOverlay').style.display = 'block';
        }

        function hideLoginModal() {
            document.getElementById('loginModal').style.display = 'none';
            document.getElementById('loginOverlay').style.display = 'none';
        }

        // ========== DOM REFERENCES ========== //
        const messageInput = document.getElementById('messageInput');
        const favoriteButton = document.getElementById('favoriteButton');
        const urlParams = new URLSearchParams(window.location.search);
        const productdID = urlParams.get('productdID');
        let currentImageIndex = 0;

        // ========== MESSAGE FUNCTIONALITY ========== //
        document.getElementById('contactOwner').addEventListener('click', () => {
            fetch('/api/auth/current-user')
                .then(response => response.json())
                .then(data => data.brukernavn ? showMessageModal() : window.location.href = '/login')
                .catch(console.error);
        });

        document.getElementById('sendMessageButton').addEventListener('click', () => {
            const messageContent = messageInput.value.trim();
            messageContent ? sendMessage(productdID, messageContent) : alert('Please enter a message.');
        });

        document.getElementById('cancelMessageButton').addEventListener('click', hideMessageModal);

        // ========== FAVORITE FUNCTIONALITY ========== //
        function initializeFavorites() {
            // Check if user is logged in first
            fetch('/api/auth/current-user')
                .then(response => response.json())
                .then(data => {
                    if (data.brukernavn) {
                        // User is logged in, proceed to check favorites
                        fetch('/api/favorites')
                            .then(response => {
                                if (!response.ok) { // Check if the response was successful
                                    // Handle potential errors even for logged-in users
                                    if (response.status === 401) {
                                        // This shouldn't happen if current-user check passed, but as a safeguard
                                        console.warn("Unauthorized access to favorites despite session check.");
                                        favoriteButton.textContent = 'Favorite';
                                        favoriteButton.classList.remove('unfavorite');
                                    } else {
                                        throw new Error(`HTTP error! status: ${response.status}`);
                                    }
                                    return null; // Prevent further processing on error
                                }
                                return response.json();
                            })
                            .then(favorites => {
                                if (favorites) { // Only process if favorites were successfully fetched
                                    const isFavorited = favorites.some(p => p.ProductdID == productdID);
                                    favoriteButton.textContent = isFavorited ? 'Unfavorite' : 'Favorite';
                                    favoriteButton.classList.toggle('unfavorite', isFavorited);
                                }
                            })
                            .catch(error => {
                                console.error("Error checking favorites for logged-in user:", error);
                                // Avoid showing the generic error toast here if it's just a fetch issue
                                // window.toast.show('Failed to check favorite status', 'error');
                                // Optionally, set a default state or log differently
                                favoriteButton.textContent = 'Favorite';
                                favoriteButton.classList.remove('unfavorite');
                            });
                    } else {
                        // User is not logged in, set default button state
                        favoriteButton.textContent = 'Favorite';
                        favoriteButton.classList.remove('unfavorite');
                        // No need to show an error toast here, this is expected behavior
                    }
                })
                .catch(error => {
                    // This catch handles errors fetching the current-user status itself
                    console.error("Error checking user session:", error);
                    window.toast.show('Failed to check login status', 'error');
                    // Set default button state as a fallback
                    favoriteButton.textContent = 'Favorite';
                    favoriteButton.classList.remove('unfavorite');
                });
        }

        document.getElementById('favoriteButton').addEventListener('click', () => {
            fetch('/api/auth/current-user')
                .then(response => response.json())
                .then(data => {
                    if (data.brukernavn) {
                        toggleFavorite();
                    } else {
                        window.toast.show('Please log in to add favorites', 'info');
                        showLoginModal();
                    }
                })
                .catch(error => {
                    console.error("Error checking user session:", error);
                    window.toast.show('Failed to check login status', 'error');
                });
        });

        function toggleFavorite() {
            fetch('/api/favorites', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ productdID })
            })
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(data => {
                const newState = data.message.includes('Added');
                favoriteButton.textContent = newState ? 'Unfavorite' : 'Favorite';
                favoriteButton.classList.toggle('unfavorite', newState);
                window.toast.show(
                    newState ? 'Product added to favorites' : 'Product removed from favorites',
                    'success'
                );
            })
            .catch(error => {
                console.error("Favorite error:", error);
                window.toast.show('Failed to update favorites', 'error');
            });
        }

        // ========== LOGIN MODAL HANDLERS ========== //
        document.getElementById('loginButton1').addEventListener('click', () => window.location.href = '/login');
        document.getElementById('cancelLoginButton').addEventListener('click', hideLoginModal);

        // ========== PRODUCT INITIALIZATION ========== //
        let productOwnerId = null;
        fetch(`/api/products/${productdID}`)
        .then(response => response.json())
        .then(product => {
            // Hide skeleton and show content
            productOwnerId = product.brukerId;
            document.getElementById('productSkeleton').style.display = 'none';
            document.getElementById('imageCarousel').style.display = 'block';
            document.getElementById('productTitle').style.display = 'block';
            document.querySelectorAll('.productDetailsContainer p').forEach(p => p.style.display = 'block');
            document.getElementById('contactOwner').style.display = 'inline-block';
            document.getElementById('favoriteButton').style.display = 'inline-block';

            const isJob = product.category === 'Jobb';
            const isCar = product.category === 'Bil';
            const isProperty = product.category === 'Eiendom';

            // Get DOM elements first
            const titleElement = document.getElementById('productTitle');
            const priceElement = document.getElementById('productPrice');
            const locationElement = document.getElementById('productLocation');
            const descElement = document.getElementById('productDescription');

            // Update title
            titleElement.textContent = isJob ? product.JobTitle : 
                                  isCar ? (product.brand_name && product.model_name ? 
                                  `${product.brand_name} ${product.model_name}` : 
                                  product.ProductName) :
                          product.ProductName;

            if (product.Sold) {
                const soldLabel = document.createElement('span');
                soldLabel.className = 'soldLabel';
                soldLabel.textContent = '(Sold)';
                titleElement.appendChild(soldLabel);
            }

            // Handle amenities with proper error checking
            let amenities = [];
            try {
              if (product.Amenities && product.Amenities !== '[]') {
                amenities = JSON.parse(product.Amenities);
              }
            } catch (e) {
              // Fallback for malformed JSON
              amenities = typeof product.Amenities === 'string' ? 
                          product.Amenities.split(',') : 
                          [];
            }

             // Handle Property Details
            if (isProperty) {
                // Price display
                priceElement.innerHTML = `
                    ${product.Price} $<br>
                    <strong>Type:</strong> ${product.PropertyType}<br>
                    <strong>Size:</strong> ${product.SizeSqm} m²
                `;

                // Description section
                descElement.innerHTML = `
                    <div class="property-details">
                        <p><strong>Property Type:</strong> ${product.PropertyType}</p>
                        <p><strong>Size:</strong> ${product.SizeSqm} m²</p>
                        <p><strong>Rooms:</strong> ${product.NumRooms}</p>
                        <p><strong>Bathrooms:</strong> ${product.NumBathrooms}</p>
                        <p><strong>Year Built:</strong> ${product.YearBuilt || 'Not specified'}</p>
                        <p><strong>Energy Class:</strong> ${product.EnergyClass || 'Not specified'}</p>
                        <p><strong>Amenities:</strong> ${amenities.join(', ') || 'Ingen spesielle fasiliteter'}</p>
                    </div>
                    ${product.Description ? `<div class="description">${product.Description}</div>` : ''}
                `;

                // Update location
                locationElement.textContent = product.Location;
            }
            // Handle car details
            else if (isCar) {
                const customTitleElement = document.createElement('h2');
                customTitleElement.className = 'custom-title';
                customTitleElement.textContent = product.ProductName;
                titleElement.insertAdjacentElement('afterend', customTitleElement);

                priceElement.innerHTML = `
                    ${product.Price} $<br>
                    <strong data-i18n="form.brand">Brand:</strong> ${product.brand_name}<br>
                    <strong data-i18n="form.model">Model:</strong> ${product.model_name}<br>
                    <strong data-i18n="form.year">Year:</strong> ${product.Year}<br>
                    <strong data-i18n="form.mileage">Mileage:</strong> ${product.Mileage}
                `;

                descElement.innerHTML = `
                    ${product.Description || ''}
                    <p><strong data-i18n="form.fuel_type">Fuel Type:</strong> <span data-i18n="fuel.${product.FuelType?.toLowerCase() || ''}">${product.FuelType || 'N/A'}</span></p>
                    <p><strong data-i18n="form.transmission">Transmission:</strong> <span data-i18n="transmission.${product.Transmission?.toLowerCase() || ''}">${product.Transmission || 'Not specified'}</span></p>
                `;
            }
            // Handle job details
            else if (isJob) {
                priceElement.innerHTML = `<strong data-i18n="form.employment_type">Employment Type:</strong> ${product.EmploymentType}`;

                descElement.innerHTML = `
                    <p><strong data-i18n="form.company_name">Company:</strong> ${product.CompanyName}</p>
                    <p><strong data-i18n="form.salary">Salary:</strong> ${product.Salary}</p>
                    <p><strong data-i18n="form.deadline">Application Deadline:</strong> ${product.ApplicationDeadline}</p>
                    <p><strong data-i18n="form.contact_email">Contact Email:</strong> ${product.ContactEmail}</p>
                    ${product.JobDescription}
                `;
            }
            // Default case
            else {
                priceElement.textContent = `${product.Price} $`;
                descElement.textContent = product.Description;
            }

            // Location display
            locationElement.textContent = isJob ? product.Location : 
                      isCar ? `${product.Location}${product.country ? ', ' + product.country : ''}` 
                      : product.Location;

            // Handle images with lazy loading
            const images = product.Images.split(',').filter(img => img.trim());
            const carousel = document.getElementById('imageCarousel');
            carousel.querySelectorAll('img').forEach(img => img.remove());
            
            images.forEach((imgSrc, index) => {
                const img = document.createElement('img');
                img.setAttribute('data-src', `/uploads/${imgSrc.trim()}`);
                if (index === 0) {
                    img.classList.add('active');
                    // Load first image immediately
                    img.src = img.getAttribute('data-src');
                }
                carousel.appendChild(img);
            });

            // Initialize lazy loading for carousel images
            if (window.lazyLoader) {
                window.lazyLoader.observe();
            }

            updateCarouselButtons(images.length);
        })
        .catch(error => {
            console.error("Error fetching product:", error);
            window.toast.show('Failed to load product details', 'error');
        });

        // ========== CAROUSEL CONTROLS ========== //
        function updateCarouselButtons(imageCount) {
            document.querySelectorAll('.carousel button').forEach(btn => {
                btn.style.display = imageCount <= 1 ? 'none' : 'block';
            });
        }

        window.prevImage = function() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        window.nextImage = function() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex + 1) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        // ========== MESSAGE SENDING ========== //
        function sendMessage() {
            const messageContent = messageInput.value.trim();
            const senderId = '<%= user ? user.brukerId : "" %>';
            
            if (!productdID || !messageContent || !productOwnerId) {
                window.toast.show('Please enter a message', 'warning');
                return;
            }

            fetch('/api/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ 
                    productdID: productdID, 
                    messageContent: messageContent,
                    receiverId: productOwnerId 
                })
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to send message');
                window.toast.show('Message sent successfully!', 'success');
                hideMessageModal();
            })
            .catch(error => {
                console.error('Message error:', error);
                window.toast.show('Failed to send message', 'error');
            });
        }

        // Initialize back to top button
        const backToTopButton = document.getElementById('backToTop');
        window.addEventListener('scroll', () => {
            if (window.scrollY > 300) {
                backToTopButton.classList.add('visible');
            } else {
                backToTopButton.classList.remove('visible');
            }
        });

        backToTopButton.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // ========== INITIALIZE PAGE ========== //
        window.addEventListener('load', () => {
            initializeFavorites();
            checkUnreadMessages();
            
            // Initialize lazy loading
            if (window.lazyLoader) {
                window.lazyLoader.observe();
            }
        });
    })();
</script>
</body>
</html>