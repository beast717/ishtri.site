<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://unpkg.com/i18next-http-backend/i18nextHttpBackend.min.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <style>
        
      
        .productDetailsContainer {
            padding: 20px;
            max-width: 800px;
            margin: auto;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .carousel {
            position: relative;
            max-width: 100%;
            height: 300px;
            margin-bottom: 20px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .carousel img {
            width: 100%;
            height: auto;
            display: none;
        }

        .carousel img.active {
            display: block;
        }

        .carousel .prev, .carousel .next {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
        }

        .carousel .prev {
            left: 10px;
        }

        .carousel .next {
            right: 10px;
        }

        .sendMessage {
            margin-top: 10px;
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .sendMessage:hover {
            background-color: #0056b3;
        }

        .soldLabel {
            color: #ffffff;
            background-color: #ff5722;
            padding: 5px 8px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            margin-left: 5px;
            display: inline-block;
        }

        /* Custom Modal Styles */
        #messageModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            border-radius: 8px;
            max-width: 400px;
            width: 100%;
        }

        #overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        #sendMessageButton, #cancelMessageButton {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #sendMessageButton {
            background-color: #007bff;
            color: white;
        }

        #cancelMessageButton {
            background-color: #ccc;
            color: black;
        }

    </style>
</head>
<body>

     <%- include('partials/navbar') %>
     <script src="/shared.js"></script>

    <!-- Custom Modal for Sending Messages -->
    <div id="messageModal">
        <h3>Send Message to Owner</h3>
        <textarea id="messageInput" rows="5" cols="40" placeholder="Type your message here..."></textarea>
        <br><br>
        <button id="sendMessageButton">Send</button>
        <button id="cancelMessageButton">Cancel</button>
    </div>
    <div id="overlay"></div>

    <div class="productDetailsContainer">
        <div class="carousel" id="imageCarousel">
            <!-- Images will be dynamically loaded -->
            <button class="prev" onclick="prevImage()">❮</button>
            <button class="next" onclick="nextImage()">❯</button>
        </div>

        <h1 id="productTitle">Product Title</h1>
        <p><strong data-i18n="product_details.price">Pris:</strong> <span id="productPrice"></span></p>
        <p><strong data-i18n="product_details.location">Sted:</strong> <span id="productLocation"></span></p>
        <p id="productDescription">Product Description</p>

        <button class="sendMessage" id="contactOwner" data-i18n="product_details.contact_owner">Kontakt eier</button>
        <button id="favoriteButton" class="sendMessage">Favorite</button>
    </div>

    <script>
        (function () {


        // Get references to the modal and overlay
        const messageModal = document.getElementById('messageModal');
        const overlay = document.getElementById('overlay');
        const messageInput = document.getElementById('messageInput');
        const sendMessageButton = document.getElementById('sendMessageButton');
        const cancelMessageButton = document.getElementById('cancelMessageButton');

        // Function to show the modal
        function showMessageModal() {
            messageModal.style.display = 'block';
            overlay.style.display = 'block';
        }

        // Function to hide the modal
        function hideMessageModal() {
            messageModal.style.display = 'none';
            overlay.style.display = 'none';
            messageInput.value = ''; // Clear the input field
        }

        // Event listener for the "Contact Owner" button
        document.getElementById('contactOwner').addEventListener('click', () => {
            // Check if the user is logged in
            fetch('/api/brukernavn')
                .then(response => response.json())
                .then(data => {
                    if (!data.brukernavn) {
                        // If the user is not logged in, redirect to the login page
                        window.location.href = '/login';
                    } else {
                        // If the user is logged in, show the modal
                        showMessageModal();
                    }
                })
                .catch(error => {
                    console.error('Error checking login status:', error);
                });
        });

        // Event listener for the "Send" button in the modal
        sendMessageButton.addEventListener('click', () => {
            const messageContent = messageInput.value.trim();

            if (messageContent) {
                // Send the message if the input is not empty
                sendMessage(productdID, messageContent);
                hideMessageModal(); // Hide the modal after sending
            } else {
                alert('Please enter a message.'); // Show an alert if the input is empty
            }
        });

        // Event listener for the "Cancel" button in the modal
        cancelMessageButton.addEventListener('click', () => {
            hideMessageModal(); // Hide the modal without sending
        });

        // Function to send a message
       function sendMessage(productdID, messageContent) {
    fetch('/send-message', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productdID, messageContent }),
    })
    .then(response => {
        if (response.ok) {
            return response.text(); // Parse the response as text
        } else {
            return response.text().then(text => {
                throw new Error(text); // Throw an error with the response text
            });
        }
    })
    .then(message => {
        alert(message); // Show success message
        hideMessageModal(); // Hide the modal after sending
    })
    .catch(error => {
        console.error('Error sending message:', error);
        alert(error.message); // Show error message to the user
    });
}
        // Fetch product details and populate the page
        const urlParams = new URLSearchParams(window.location.search);
        const productdID = urlParams.get('productdID');

        let currentImageIndex = 0;

        fetch(`/api/product/${productdID}`)
            .then(response => response.json())
            .then(product => {
                const productTitleElement = document.getElementById('productTitle');
                productTitleElement.textContent = product.ProductName;

                if (product.Sold) {
                    const soldLabel = document.createElement('span');
                    soldLabel.className = 'soldLabel';
                    soldLabel.textContent = '(Sold)';
                    productTitleElement.appendChild(soldLabel);
                }
                document.getElementById('productPrice').textContent = product.Price;
                document.getElementById('productLocation').textContent = product.Location;
                document.getElementById('productDescription').textContent = product.Description;

                const images = product.Images.split(',').filter(image => image.trim() !== '');
                const carousel = document.getElementById('imageCarousel');

                // Clear existing images
                const existingImages = carousel.querySelectorAll('img');
                existingImages.forEach(img => img.remove());

                // Append images dynamically
                images.forEach((image, index) => {
                    const img = document.createElement('img');
                    img.src = `/uploads/${image.trim()}`;
                    if (index === 0) img.classList.add('active');
                    carousel.appendChild(img);
                });

                // Update button visibility
                updateButtonVisibility(images.length);
            });

        function prevImage() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        function nextImage() {
            const images = document.querySelectorAll('.carousel img');
            images[currentImageIndex].classList.remove('active');
            currentImageIndex = (currentImageIndex + 1) % images.length;
            images[currentImageIndex].classList.add('active');
        }

        function updateButtonVisibility(imageCount) {
            const prevButton = document.querySelector('.carousel .prev');
            const nextButton = document.querySelector('.carousel .next');

            if (imageCount <= 1) {
                prevButton.style.display = 'none';
                nextButton.style.display = 'none';
            } else {
                prevButton.style.display = 'block';
                nextButton.style.display = 'block';
            }
        }

     
    // Existing JavaScript code for product details
    // ...

    // New JavaScript code for favorites
  function initializeFavorites() {
    const urlParams = new URLSearchParams(window.location.search);
    const productdID = urlParams.get('productdID');
    const isFavoritedFromURL = urlParams.get('favorited') === 'true'; // Get the favorite status from the URL

    const favoriteButton = document.getElementById('favoriteButton');

    // Set the initial state of the favorite button based on the URL parameter
    if (isFavoritedFromURL) {
        favoriteButton.textContent = 'Unfavorite';
        favoriteButton.classList.add('unfavorite');
    } else {
        favoriteButton.textContent = 'Favorite';
        favoriteButton.classList.remove('unfavorite');
    }

    // Check if the product is favorited by the user (from the backend)
    function checkIfFavorited(productdID) {
        fetch('/api/favorites')
            .then(response => response.json())
            .then(favorites => {
                const isFavorited = favorites.some(product => product.ProductdID === Number(productdID));
                if (isFavorited) {
                    favoriteButton.textContent = 'Unfavorite';
                    favoriteButton.classList.add('unfavorite');
                } else {
                    favoriteButton.textContent = 'Favorite';
                    favoriteButton.classList.remove('unfavorite');
                }
            })
            .catch(error => console.error("Error checking favorites:", error));
    }

    // Call this function when the page loads
    checkIfFavorited(productdID);
}

    // Toggle favorite/unfavorite
favoriteButton.addEventListener('click', () => {
    const isFavorited = favoriteButton.classList.contains('unfavorite');

    if (isFavorited) {
        favoriteButton.textContent = 'Favorite';
        favoriteButton.classList.remove('unfavorite');
        fetch('/api/unfavorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productdID }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            
        })
        .catch(error => {
            console.error("Error unfavoriting product:", error);
            alert("Failed to unfavorite product. Please try again.");
        });
    } else {
        favoriteButton.textContent = 'Unfavorite';
        favoriteButton.classList.add('unfavorite');
        fetch('/api/favorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productdID }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            
        })
        .catch(error => {
            console.error("Error favoriting product:", error);
            alert("Failed to favorite product. Please try again.");
        });
    }
});

    // Initialize favorites after the page loads
    window.addEventListener('load', initializeFavorites);
    window.onload = function () {
    checkUnreadMessages(); // Check for unread messages
};
})();

        
    </script>
</body>
</html>