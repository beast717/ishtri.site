<!-- views/notifications.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifications - Ishtri</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Modern Notification Page Styles */
        .notification-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .page-header {
            margin-bottom: 2.5rem;
            text-align: center;
        }

        .page-header h1 {
            font-size: 2.5rem;
            color: #1a365d;
            margin-bottom: 0.5rem;
        }

        .preferences-card {
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.05);
            padding: 2.5rem;
            margin-bottom: 3rem;
        }

        .filter-section {
            margin-bottom: 2rem;
        }

        .filter-section h3 {
            color: #2d3748;
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .multi-select {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: #f8fafc;
            font-size: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .multi-select:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 4px rgba(66, 153, 225, 0.15);
            outline: none;
        }

        .price-range-group {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .price-input {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: #f8fafc;
            font-size: 1rem;
        }

        .save-button {
            background: #4299e1;
            color: white;
            padding: 1rem 2rem;
            border-radius: 10px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .save-button:hover {
            background: #3182ce;
            transform: translateY(-1px);
        }

        .notifications-list {
            position: relative; /* Add this for positioning context */
            margin-top: 20px; /* Make space for the button */
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.05);
            overflow: hidden;
            z-index: 1;
        }

        .notification-card {
            padding: 1.75rem;
            border-bottom: 1px solid #edf2f7;
            transition: all 0.3s ease;
            display: flex;
            gap: 1.5rem;
            align-items: flex-start;
        }

        .notification-card.unread {
            background: #f8fafc;
            border-left: 6px solid #4299e1;
            transition: all 0.3s ease;
        }

        .notification-badge {
            transition: opacity 0.3s ease;
            background: #4299e1;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-left: 0.5rem;
        }

        .notification-content {
            flex-grow: 1;
        }

        .notification-title {
            color: #2d3748;
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .notification-meta {
            color: #718096;
            font-size: 0.875rem;
            display: flex;
            gap: 1rem;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .notification-product {
            color: #4299e1;
            font-weight: 500;
        }

        .notification-time {
            color: #a0aec0;
        }

        .notification-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .view-button {
            background: #4299e1;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .view-button:hover {
            background: #3182ce;
            transform: translateY(-1px);
        }

        .mark-all-read-btn {
    position: relative;
    top: 40px;
    right: -1020px;
    z-index: 1000;
    margin: 0;
    background: #48bb78;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 500;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.mark-all-read-btn:hover {
    background: #38a169;
    transform: translateY(-1px);
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}

.notifications-header {
    position: relative;
    height: 60px;
}

        /* Responsive Design */
        @media (max-width: 768px) {
             .mark-all-read-btn {
        top: 10px;
        right: 10px;
        padding: 10px 18px;
        font-size: 14px;
    }
    
    .notifications-list {
        margin-top: 50px;
    }
            .notification-container {
                padding: 0 1rem;
            }

            .price-range-group {
                grid-template-columns: 1fr;
            }

            .notification-card {
                flex-direction: column;
                gap: 1rem;
                padding: 1.5rem;
            }

            .notification-actions {
                width: 100%;
                flex-direction: column;
            }

            .view-button {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="notification-container">
        <div class="page-header">
            <h1>Notification Center</h1>
            <p>Manage your preferences and review updates</p>
        </div>

        <div class="preferences-card">
            <div class="filter-section">
                <h3>Notification Preferences</h3>
                <form id="preferenceForm">
                    <div class="form-group">
                        <label>Categories to Monitor</label>
                        <select class="multi-select" id="categories" multiple>
                        <% if (typeof categories !== 'undefined' && categories.length) { %>
                          <% categories.forEach(cat => { %>
                            <option value="<%= cat %>"
                              <%= preferences.categories.includes(cat) ? 'selected' : '' %>>
                              <%= cat %>
                            </option>
                          <% }) %>
                        <% } else { %>
                          <option disabled>No categories available</option>
                        <% } %>
                        </select>
                    </div>

                    <div class="price-range-group">
                        <div>
                            <label>Minimum Price</label>
                            <input type="number" 
       class="price-input" 
       id="minPrice"
       value="<%= preferences.minPrice || '' %>" 
       placeholder="NOK">
                        </div>
                        <div>
                            <label>Maximum Price</label>
                            <input type="number" 
       class="price-input" 
       id="maxPrice"
       value="<%= preferences.maxPrice || '' %>" 
       placeholder="NOK">
                        </div>
                    </div>

                    <button type="submit" class="save-button">
                        <i class="fas fa-save"></i>
                        Save Preferences
                    </button>
                </form>
            </div>
        </div>

        <div class="notifications-header">
    <button id="markAllRead" class="mark-all-read-btn">
        <i class="fas fa-check-circle"></i>
        Mark All Read
    </button>
</div>
        <div class="notifications-list">
            <% notifications.forEach(notification => { %>
                 <div class="notification-card <%= notification.isRead ? '' : 'unread' %>" 
                        data-notification-id="<%= notification.notificationId %>">
                    <div class="notification-content">
                        <div class="notification-meta">
                            <span class="notification-time">
                                <%= notification.createdAt.toLocaleDateString() %>
                            </span>
                            <% if (!notification.isRead) { %>
                                <span class="notification-badge">
                                    New Match
                                </span>
                            <% } %>
                        </div>
                        <h4 class="notification-title">
                            <%= notification.message %>
                        </h4>
                        <div class="notification-product">
                            <%= notification.ProductName %> â€¢ <%= notification.Price %> NOK
                        </div>
                    </div>
                    <div class="notification-actions">
                        <a href="/productDetails?productdID=<%= notification.productdID %>" 
                           class="view-button"
                           onclick="handleNotificationClick(event, <%= notification.notificationId %>)">
                            View Product
                        </a>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>

    <script>
        // Save preferences
        document.getElementById('preferenceForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const preferences = {
                categories: Array.from(document.getElementById('categories').selectedOptions)
                               .map(option => option.value),
                minPrice: document.getElementById('minPrice').value,
                maxPrice: document.getElementById('maxPrice').value
            };

            try {
                const response = await fetch('/api/notifications/preferences', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(preferences)
                });
                
                if (response.ok) {
                    alert('Preferences saved!');
                }
            } catch (error) {
                console.error('Error saving preferences:', error);
            }
        });

        // Check for new notifications periodically
        function updateNotificationBadge() {
            fetch('/api/notifications/count')
                .then(response => response.json())
                .then(data => {
                    const badge = document.getElementById('notificationBadge');
                    if (data.count > 0) {
                        badge.style.display = 'inline';
                        badge.textContent = data.count;
                    } else {
                        badge.style.display = 'none';
                    }
                });
        }

        document.getElementById('preferenceForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Get selected categories as array
    const categorySelect = document.getElementById('categories');
    const categories = Array.from(categorySelect.selectedOptions)
                          .map(option => option.value);

    const preferences = {
        categories,
        minPrice: document.getElementById('minPrice').value,
        maxPrice: document.getElementById('maxPrice').value
    };

    try {
        const response = await fetch('/api/notifications/preferences', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(preferences)
        });
        
        if (response.ok) {
            alert('Preferences saved successfully!');
            window.location.reload();
        }
    } catch (error) {
        console.error('Error saving preferences:', error);
        alert('Error saving preferences');
    }
});

        function handleNotificationClick(event, notificationId) {
    event.preventDefault();
    const link = event.currentTarget.href;
    const notificationCard = event.target.closest('.notification-card');

    // Immediate UI update
    if (notificationCard) {
        notificationCard.classList.remove('unread');
        const badge = notificationCard.querySelector('.notification-badge');
        if (badge) badge.remove();
    }

    // Mark as read in background
    fetch(`/api/notifications/mark-read/${notificationId}`, {
        method: 'POST'
    }).catch(error => console.error('Error:', error));

    // Smooth redirect after UI update
    setTimeout(() => {
        window.location.href = link;
    }, 150); // Short delay for visual feedback
}

document.getElementById('markAllRead').addEventListener('click', () => {
    // Update UI immediately
    document.querySelectorAll('.notification-card.unread').forEach(card => {
        card.classList.remove('unread');
        const badge = card.querySelector('.notification-badge');
        if (badge) badge.remove();
    });

    // Update server
    fetch('/api/notifications/mark-all-read', {
        method: 'POST'
    })
    .then(response => {
        if (response.ok) {
            // Update navbar badge
            const navBadge = document.getElementById('notificationBadge');
            navBadge.style.display = 'none';
            navBadge.textContent = '0';
        }
    })
    .catch(error => console.error('Error:', error));
});

        // Update every 5 minutes
        setInterval(updateNotificationBadge, 300000);
        window.addEventListener('load', updateNotificationBadge);
    </script>
</body>
</html>