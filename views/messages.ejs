<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-i18n="meldinger.dine_meldinger">Messages</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/toast.js" defer></script>
    <script src="/js/skeleton.js" defer></script>
    <script src="/js/backToTop.js" defer></script>
    <script src="/js/lazyLoad.js" defer></script>
    <style>
        /* Modern Chat UI Styles */
        .chat-container {
            display: flex;
            height: calc(100vh - 80px);
            margin: 20px auto;
            max-width: 1200px;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .conversations-list {
            will-change: contents;
            contain: content;
        }

        .conversations-list {
            width: 300px;
            border-right: 1px solid #eee;
            display: flex;
            flex-direction: column;
        }

        .search-container {
            padding: 15px;
            border-bottom: 1px solid #eee;
        }

        .search-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 14px;
            outline: none;
            transition: border-color 0.3s;
        }

        .search-input:focus {
            border-color: #007bff;
        }

        .conversations {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }

        .conversation-item {
            display: flex;
            align-items: center;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-bottom: 5px;
        }

        .conversation-item:hover {
            background-color: #f5f5f5;
        }

        .conversation-item.active {
            background-color: #e3f2fd;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .conversation-info {
            flex: 1;
        }

        .conversation-name {
            font-weight: 500;
            margin-bottom: 4px;
        }

        .conversation-preview {
            font-size: 12px;
            color: #666;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-window {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 15px;
            margin-bottom: 5px;
            position: relative;
        }

        .message.sent {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .message.received {
            background-color: #f1f1f1;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

        .message-time {
            font-size: 11px;
            margin-top: 5px;
            opacity: 0.7;
        }

        .message-status {
            position: absolute;
            bottom: 2px;
            right: 5px;
            font-size: 12px;
        }

        .chat-input-container {
            padding: 15px;
            border-top: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            resize: none;
            max-height: 100px;
        }

        .send-button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .send-button:hover {
            background-color: #0056b3;
        }

        .typing-indicator {
            padding: 5px 10px;
            font-size: 12px;
            color: #666;
            font-style: italic;
        }

        .online-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #28a745;
            margin-right: 5px;
        }

        .offline-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #dc3545;
            margin-right: 5px;
        }

        /* Loading States */
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }

        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        .skeleton-message {
            height: 60px;
            margin-bottom: 10px;
            border-radius: 8px;
        }

    </style>
    <script>
        // Global initialization flag
        let isInitialized = false;
        let socket = null;

        // Single initialization function
        function initialize() {
            if (isInitialized) {
                return;
            }
            
            // Initialize chat functionality
            initializeChat();
            isInitialized = true;
        }

        // Initialize on DOM content loaded
        document.addEventListener('DOMContentLoaded', initialize);

        // Your existing chat initialization code
        function initializeChat() {
            // Initialize Socket.IO only once
            if (socket) {
                return; // If socket already exists, don't create a new one
            }
            
            socket = io();
            let currentConversation = null;
            let typingTimeout = null;

            // Authenticate user
            socket.emit('authenticate', '<%= user?.brukerId || user.brukerId %>');

            // Handle new message
            socket.on('messageReceived', (message) => {  // For RECEIVER only
                appendMessage(message);
                checkUnreadMessages(); // Only receiver should check unread count
                updateConversationsList();
            });

            socket.on('messageSent', (message) => {  // For SENDER only
                appendMessage(message);
                updateConversationsList();  // But DON'T check unread count
            });

            // Handle typing status
            socket.on('userTyping', (data) => {
                if (currentConversation && currentConversation.productdID === data.productdID) {
                    const typingIndicator = document.getElementById('typingIndicator');
                    typingIndicator.style.display = 'block';
                    setTimeout(() => {
                        typingIndicator.style.display = 'none';
                    }, 3000);
                }
            });

            // Handle read receipts
            socket.on('messageReadReceipt', (data) => {
                updateMessageStatus(data.messageId, 'read');
            });

            // Setup search functionality
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    const conversations = document.querySelectorAll('.conversation-item');
                    
                    conversations.forEach(conv => {
                        const name = conv.querySelector('.conversation-name').textContent.toLowerCase();
                        const preview = conv.querySelector('.conversation-preview').textContent.toLowerCase();
                        
                        if (name.includes(searchTerm) || preview.includes(searchTerm)) {
                            conv.style.display = 'flex';
                        } else {
                            conv.style.display = 'none';
                        }
                    });
                });
            }

            // Setup message input
            const messageInput = document.querySelector('.chat-input');
            if (messageInput) {
                messageInput.addEventListener('input', () => {
                    if (!currentConversation) return;

                    if (typingTimeout) clearTimeout(typingTimeout);
                    
                    socket.emit('typing', {
                        senderId: '<%= user?.brukerId || user.brukerId %>',
                        receiverId: currentConversation.lastMessage.senderId,
                        productdID: currentConversation.productdID,
                        isTyping: true
                    });

                    typingTimeout = setTimeout(() => {
                        socket.emit('typing', {
                            senderId: '<%= user?.brukerId || user.brukerId %>',
                            receiverId: currentConversation.lastMessage.senderId,
                            productdID: currentConversation.productdID,
                            isTyping: false
                        });
                    }, 1000);
                });

                // Handle enter key in message input
                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        const sendButton = document.querySelector('.send-button');
                        if (sendButton) {
                            sendButton.click();
                        }
                    }
                });
            }

            // Setup send button
            const sendButton = document.querySelector('.send-button');
            if (sendButton) {
                sendButton.addEventListener('click', async () => {
                    const input = document.querySelector('.chat-input');
                    const message = input.value.trim();
                    
                    if (!message || !currentConversation) return;

                    try {
                        // Get the current user ID
                        const currentUserId = '<%= user?.brukerId || user.brukerId %>';
                        if (!currentUserId) {
                            throw new Error('User not authenticated');
                        }

                        // Determine the receiver ID based on the conversation
                        const receiverId = currentConversation.lastMessage.senderId === currentUserId 
                         ? currentConversation.lastMessage.receiverId 
                         : currentConversation.lastMessage.senderId;

                        const response = await fetch('/api/messages', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productdID: currentConversation.productdID,
                                messageContent: message,
                                receiverId: receiverId
                            })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to send message');
                        }

                        input.value = '';
                        const newMessage = await response.json();
                        appendMessage(newMessage);
                        socket.emit('newMessage', newMessage);
                        updateConversationsList(); // Refresh the conversations list
                    } catch (error) {
                        console.error('Error sending message:', error);
                        alert(error.message || 'Failed to send message. Please try again.');
                    }
                });
            }

            // Load conversations
            async function loadConversations() {
                try {
                    const response = await fetch('/api/messages');
                    const messages = await response.json();
                    displayConversations(messages);
                } catch (error) {
                    console.error('Error loading conversations:', error);
                }
            }

            async function updateConversationsList() {
            try {
                const response = await fetch('/api/messages');
                const messages = await response.json();
                const grouped = groupMessagesByProduct(messages);
                
                // Smart update instead of full refresh
                const existingIds = new Set(
                    Array.from(document.querySelectorAll('.conversation-item'))
                        .map(el => el.dataset.productId)
                );

                grouped.forEach(group => {
                    if (!existingIds.has(group.productdID.toString())) {
                        const newElement = createConversationElement(group);
                        document.getElementById('conversationsList').prepend(newElement);
                    }
                });
            } catch (error) {
                console.error('Update failed:', error);
            }
        }

            // Display conversations
            function displayConversations(messages) {
                const conversationsList = document.getElementById('conversationsList');
                conversationsList.innerHTML = '';

                // Group messages by product
                const groupedMessages = groupMessagesByProduct(messages);

                groupedMessages.forEach(group => {
                    const conversationItem = createConversationElement(group);
                    conversationsList.appendChild(conversationItem);
                });
            }

            // Group messages by product
            function groupMessagesByProduct(messages) {
                const groups = {};
                const currentUserId = '<%= user?.brukerId || user.brukerId %>';
                
                messages.forEach(message => {
                    if (!groups[message.productdID]) {
                        groups[message.productdID] = {
                            productdID: message.productdID,
                            productName: message.ProductName,
                            lastMessage: message,
                            unreadCount: message.readd ? 0 : 1,
                            senderName: message.senderName,
                            receiverId: message.senderId === currentUserId ? message.receiverId : message.senderId
                        };
                    } else {
                        if (message.timestamp > groups[message.productdID].lastMessage.timestamp) {
                            groups[message.productdID].lastMessage = message;
                            groups[message.productdID].senderName = message.senderName;
                            groups[message.productdID].receiverId = message.senderId === currentUserId ? message.receiverId : message.senderId;
                        }
                        if (!message.readd) {
                            groups[message.productdID].unreadCount++;
                        }
                    }
                });
                return Object.values(groups);
            }

            // Create conversation element
            function createConversationElement(group) {
                const div = document.createElement('div');
                div.className = 'conversation-item';
                div.dataset.productId = group.productdID;
                
                div.innerHTML = `
                    <div class="avatar">${group.productName[0]}</div>
                    <div class="conversation-info">
                        <div class="conversation-name">${group.productName}</div>
                        <div class="conversation-preview">
                            <span class="sender-name">${group.senderName}:</span> ${group.lastMessage.messageContent}
                        </div>
                    </div>
                    ${group.unreadCount > 0 ? `<span class="badge">${group.unreadCount}</span>` : ''}
                `;

                div.addEventListener('click', () => loadConversation(group));
                return div;
            }

            // Load conversation
            async function loadConversation(group) {
                currentConversation = group;
                document.querySelector('.selected-chat-name').textContent = `${group.productName} - ${group.senderName}`;
                
                try {
                    const response = await fetch(`/api/messages/conversation?productdID=${group.productdID}`);
                    const messages = await response.json();
                    displayMessages(messages);
                } catch (error) {
                    console.error('Error loading conversation:', error);
                }
            }

            // Display messages
            function displayMessages(messages) {
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.innerHTML = '';

                messages.forEach(message => {
                    appendMessage(message);
                });

                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Append message
            function appendMessage(message) {
                const chatMessages = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                const currentUserId = '<%= user?.brukerId || user.brukerId %>';
                messageDiv.className = `message ${message.senderId === currentUserId ? 'sent' : 'received'}`;
                
                messageDiv.innerHTML = `
                    <div class="message-header">${message.senderName}</div>
                    <div class="message-content">${message.messageContent}</div>
                    <div class="message-time">${formatTime(message.timestamp)}</div>
                    ${message.senderId === currentUserId ? 
                        `<div class="message-status">${message.readd ? '✓✓' : '✓'}</div>` : ''}
                `;

                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Format time
            function formatTime(timestamp) {
                const date = new Date(timestamp);
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }

            // Update message status
            function updateMessageStatus(messageId, status) {
                const message = document.querySelector(`[data-message-id="${messageId}"]`);
                if (message) {
                    const statusDiv = message.querySelector('.message-status');
                    statusDiv.textContent = status === 'read' ? '✓✓' : '✓';
                }
            }

            // Load initial conversations
            loadConversations();
        }
    </script>
</head>
<body>
    <%- include('partials/navbar') %>
    
    <% if (!user) { %>
        <div class="chat-container">
            <div class="error-message">
                <h2>Please log in to view messages</h2>
                <a href="/login" class="login-button">Log In</a>
            </div>
        </div>
    <% } else { %>
        <div class="chat-container">
            <div class="conversations-list">
                <div class="search-container">
                    <input type="text" class="search-input" data-i18n="[placeholder]search.placeholder" placeholder="Search...">
                </div>
                <div class="conversations" id="conversationsList">
                    <!-- Conversations will be loaded here -->
                </div>
            </div>
            
            <div class="chat-window">
                <div class="chat-header">
                    <div class="chat-header-info">
                        <span class="selected-chat-name" data-i18n="meldinger.klikk">Click to View Messages</span>
                    </div>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <!-- Messages will be loaded here -->
                </div>
                
                <div class="typing-indicator" id="typingIndicator" style="display: none;">
                    User is typing...
                </div>
                
                <div class="chat-input-container">
                    <textarea class="chat-input" data-i18n="[placeholder]meldinger.placeholder" placeholder="Type your message..."></textarea>
                    <button class="send-button" id="sendButton">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    <% } %>
</body>
</html>
